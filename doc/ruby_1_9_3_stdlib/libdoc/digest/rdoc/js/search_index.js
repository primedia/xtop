var search_data = {"index":{"searchIndex":["digest","base","class","hmac","instance","sha2","object","unknown","<<()","<<()","<<()","==()","digest()","base64digest()","base64digest()","base64digest!()","block_length()","block_length()","block_length()","digest()","digest()","digest!()","digest_length()","digest_length()","digest_length()","file()","file()","hexdigest()","hexdigest()","hexdigest!()","hexencode()","inspect()","inspect()","length()","new()","new()","new()","reset()","reset()","reset()","size()","to_s()","update()","update()","update()"],"longSearchIndex":["digest","digest::base","digest::class","digest::hmac","digest::instance","digest::sha2","object","unknown","digest::hmac#<<()","digest::instance#<<()","digest::sha2#<<()","digest::instance#==()","object#digest()","digest::class::base64digest()","digest::instance#base64digest()","digest::instance#base64digest!()","digest::hmac#block_length()","digest::instance#block_length()","digest::sha2#block_length()","digest::class::digest()","digest::instance#digest()","digest::instance#digest!()","digest::hmac#digest_length()","digest::instance#digest_length()","digest::sha2#digest_length()","digest::class::file()","digest::instance#file()","digest::class::hexdigest()","digest::instance#hexdigest()","digest::instance#hexdigest!()","digest::hexencode()","digest::hmac#inspect()","digest::instance#inspect()","digest::instance#length()","digest::hmac::new()","digest::instance#new()","digest::sha2::new()","digest::hmac#reset()","digest::instance#reset()","digest::sha2#reset()","digest::instance#size()","digest::instance#to_s()","digest::hmac#update()","digest::instance#update()","digest::sha2#update()"],"info":[["Digest","","Digest.html","","<p>This module provides a framework for message digest libraries.\n<p>You may want to look at OpenSSL::Digest ...\n"],["Digest::Base","","Digest/Base.html","","<p>This abstract class provides a common interface to message digest\nimplementation classes written in  ...\n"],["Digest::Class","","Digest/Class.html","","<p>This module stands as a base class for digest implementation classes.\n"],["Digest::HMAC","","Digest/HMAC.html","","<p>digest/hmac.rb\n<p>An experimental implementation of HMAC keyed-hashing algorithm\n<p>Overview\n"],["Digest::Instance","","Digest/Instance.html","","<p>This module provides instance methods for a digest implementation object to\ncalculate message digest ...\n"],["Digest::SHA2","","Digest/SHA2.html","","<p>A meta digest provider class for SHA256, SHA384 and SHA512.\n"],["Object","","Object.html","",""],["unknown","","unknown.html","",""],["<<","Digest::HMAC","Digest/HMAC.html#method-i-3C-3C","(text)",""],["<<","Digest::Instance","Digest/Instance.html#method-i-3C-3C","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["<<","Digest::SHA2","Digest/SHA2.html#method-i-3C-3C","(str)",""],["==","Digest::Instance","Digest/Instance.html#method-i-3D-3D","(p1)","<p>If a string is given, checks whether it is equal to the hex-encoded hash\nvalue of the digest object. …\n"],["Digest","Object","Object.html#method-i-Digest","(name)","<p>Returns a Digest subclass by <code>name</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'digest'</span>\n\n<span class=\"ruby-constant\">Digest</span>(<span class=\"ruby-string\">&quot;MD5&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; Digest::MD5</span>\n\n<span class=\"ruby-constant\">Digest</span>(<span class=\"ruby-string\">&quot;Foo&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["base64digest","Digest::Class","Digest/Class.html#method-c-base64digest","(str, *args)","<p>Returns the base64 encoded hash value of a given <em>string</em>.  The\nreturn value is properly padded with ‘=’ …\n"],["base64digest","Digest::Instance","Digest/Instance.html#method-i-base64digest","(str = nil)","<p>If none is given, returns the resulting hash value of the digest in a\nbase64 encoded form, keeping the …\n"],["base64digest!","Digest::Instance","Digest/Instance.html#method-i-base64digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial\nstate.\n"],["block_length","Digest::HMAC","Digest/HMAC.html#method-i-block_length","()","<p>Returns the block length in bytes of the hmac.\n"],["block_length","Digest::Instance","Digest/Instance.html#method-i-block_length","()","<p>Returns the block length of the digest.\n<p>This method is overridden by each implementation subclass.\n"],["block_length","Digest::SHA2","Digest/SHA2.html#method-i-block_length","()","<p>Returns the block length of the digest in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Digest</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SHA256</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">digest_length</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">8</span>\n<span class=\"ruby-comment\"># =&gt; 512</span>\n<span class=\"ruby-constant\">Digest</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SHA384</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">digest_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["digest","Digest::Class","Digest/Class.html#method-c-digest","(*args)","<p>Returns the hash value of a given <em>string</em>.  This is equivalent to\nDigest::Class.new(*parameters).digest(string), …\n"],["digest","Digest::Instance","Digest/Instance.html#method-i-digest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest, keeping\nthe digest’s state.\n<p>If a <em>string</em> …\n"],["digest!","Digest::Instance","Digest/Instance.html#method-i-digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial\nstate.\n"],["digest_length","Digest::HMAC","Digest/HMAC.html#method-i-digest_length","()","<p>Returns the length in bytes of the hash value of the digest.\n"],["digest_length","Digest::Instance","Digest/Instance.html#method-i-digest_length","()","<p>Returns the length of the hash value of the digest.\n<p>This method should be overridden by each implementation …\n"],["digest_length","Digest::SHA2","Digest/SHA2.html#method-i-digest_length","()","<p>Returns the length of the hash value of the digest in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Digest</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SHA256</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">digest_length</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">8</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["file","Digest::Class","Digest/Class.html#method-c-file","(name)","<p>creates a digest object and reads a given file, <em>name</em>.\n\n<pre>p Digest::SHA256.file(&quot;X11R6.8.2-src.tar.bz2&quot;).hexdigest ...</pre>\n"],["file","Digest::Instance","Digest/Instance.html#method-i-file","(name)","<p>updates the digest with the contents of a given file <em>name</em> and\nreturns self.\n"],["hexdigest","Digest::Class","Digest/Class.html#method-c-hexdigest","(*args)","<p>Returns the hex-encoded hash value of a given <em>string</em>.  This is\nalmost equivalent to Digest.hexencode …\n"],["hexdigest","Digest::Instance","Digest/Instance.html#method-i-hexdigest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest in a\nhex-encoded form, keeping the digest’s …\n"],["hexdigest!","Digest::Instance","Digest/Instance.html#method-i-hexdigest-21","()","<p>Returns the resulting hash value in a hex-encoded form and resets the\ndigest to the initial state.\n"],["hexencode","Digest","Digest.html#method-c-hexencode","(p1)","<p>Generates a hex-encoded version of a given <em>string</em>.\n"],["inspect","Digest::HMAC","Digest/HMAC.html#method-i-inspect","()","<p>Creates a printable version of the hmac object.\n"],["inspect","Digest::Instance","Digest/Instance.html#method-i-inspect","()","<p>Creates a printable version of the digest object.\n"],["length","Digest::Instance","Digest/Instance.html#method-i-length","()","<p>Returns digest_obj.digest_length().\n"],["new","Digest::HMAC","Digest/HMAC.html#method-c-new","(key, digester)","<p>Creates a Digest::HMAC instance.\n"],["new","Digest::Instance","Digest/Instance.html#method-i-new","()","<p>Returns a new, initialized copy of the digest object.  Equivalent to\ndigest_obj.clone().reset().\n"],["new","Digest::SHA2","Digest/SHA2.html#method-c-new","(bitlen = 256)","<p>Creates a new SHA2 hash object with a given bit length.\n<p>Valid bit lengths are 256, 384 and 512.\n"],["reset","Digest::HMAC","Digest/HMAC.html#method-i-reset","()","<p>Resets the hmac to the initial state and returns self.\n"],["reset","Digest::Instance","Digest/Instance.html#method-i-reset","()","<p>Resets the digest to the initial state and returns self.\n<p>This method is overridden by each implementation …\n"],["reset","Digest::SHA2","Digest/SHA2.html#method-i-reset","()","<p>Resets the digest to the initial state and returns self.\n"],["size","Digest::Instance","Digest/Instance.html#method-i-size","()","<p>Returns digest_obj.digest_length().\n"],["to_s","Digest::Instance","Digest/Instance.html#method-i-to_s","()","<p>Returns digest_obj.hexdigest().\n"],["update","Digest::HMAC","Digest/HMAC.html#method-i-update","(text)","<p>Updates the hmac using a given <code>string</code> and returns self.\n"],["update","Digest::Instance","Digest/Instance.html#method-i-update","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["update","Digest::SHA2","Digest/SHA2.html#method-i-update","(str)","<p>Updates the digest using a given <em>string</em> and returns self.\n"]]}}