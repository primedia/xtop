var search_data = {"index":{"searchIndex":["acl","aclentry","acllist","drb","drbarray","drbbadscheme","drbbaduri","drbconn","drbconnerror","drberror","drbidconv","drbidconv","drbmessage","drbobject","drbobject","drbobservable","drbprotocol","drbremoteerror","drbsslsocket","sslconfig","drbserver","invokemethod18mixin","drbservernotfound","drbtcpsocket","drbunixsocket","drbundumped","drbundumped","drbunknown","drbunknownerror","extserv","extservmanager","gw","gwidconv","timeridconv","timerholder2","invalidindexerror","foo","object","==()","==()","[]()","[]()","[]=()","__drbref()","__drbref()","__drburi()","__drburi()","_dump()","_dump()","_dump()","_load()","_load()","_load()","accept()","accept()","accept()","accept()","add()","add()","add_protocol()","alive?()","alive?()","alive?()","allow_addr?()","allow_socket?()","block_yield()","check_insecure_method()","close()","close()","close()","command()","command=()","config()","connect()","current_server()","default_acl()","default_argc_limit()","default_id_conv()","default_load_limit()","default_safe_level()","eql?()","eql?()","exception()","fetch()","fetch_server()","front()","front()","getservername()","hash()","hash()","hello()","here?()","here?()","include?()","install_acl()","install_id_conv()","install_list()","match()","match()","method_missing()","method_missing()","mutex()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_with()","new_with()","new_with_uri()","new_with_uri()","notify_observers()","open()","open()","open()","open()","open_server()","open_server()","open_server()","open_server()","open_server_inaddr_any()","parse_uri()","parse_uri()","peek()","peeraddr()","perform_with_block()","prepare_backtrace()","prepare_backtrace()","recv_reply()","recv_request()","regist()","regist_server()","reload()","remove_server()","respond_to?()","respond_to?()","send_reply()","send_request()","service()","set_sockopt()","setup_certificate()","setup_ssl_context()","start_service()","stop_service()","stop_service()","stop_service()","stream()","stream()","thread()","to_id()","to_id()","to_id()","to_id()","to_id()","to_obj()","to_obj()","to_obj()","to_obj()","to_obj()","to_obj()","to_s()","unregist()","uri()","uri_option()","uri_option()","uri_option()","uri_option()","verbose()","verbose()","verbose=()","verbose=()","with_friend()","with_friend()"],"longSearchIndex":["acl","acl::aclentry","acl::acllist","drb","drb::drbarray","drb::drbbadscheme","drb::drbbaduri","drb::drbconn","drb::drbconnerror","drb::drberror","drb::drbidconv","drb::drbidconv","drb::drbmessage","drb::drbobject","drb::drbobject","drb::drbobservable","drb::drbprotocol","drb::drbremoteerror","drb::drbsslsocket","drb::drbsslsocket::sslconfig","drb::drbserver","drb::drbserver::invokemethod18mixin","drb::drbservernotfound","drb::drbtcpsocket","drb::drbunixsocket","drb::drbundumped","drb::drbundumped","drb::drbunknown","drb::drbunknownerror","drb::extserv","drb::extservmanager","drb::gw","drb::gwidconv","drb::timeridconv","drb::timeridconv::timerholder2","drb::timeridconv::timerholder2::invalidindexerror","foo","object","drb::drbobject#==()","drb::drbobject#==()","drb::drbsslsocket::sslconfig#[]()","drb::gw#[]()","drb::gw#[]=()","drb::drbobject#__drbref()","drb::drbobject#__drbref()","drb::drbobject#__drburi()","drb::drbobject#__drburi()","drb::drbarray#_dump()","drb::drbobject#_dump()","drb::drbobject#_dump()","drb::drbarray::_load()","drb::drbobject::_load()","drb::drbobject::_load()","drb::drbsslsocket#accept()","drb::drbsslsocket::sslconfig#accept()","drb::drbtcpsocket#accept()","drb::drbunixsocket#accept()","acl::acllist#add()","drb::timeridconv::timerholder2#add()","drb::drbprotocol::add_protocol()","drb::drbserver#alive?()","drb::drbtcpsocket#alive?()","drb::extserv#alive?()","acl#allow_addr?()","acl#allow_socket?()","drb::drbserver::invokemethod18mixin#block_yield()","drb::drbserver#check_insecure_method()","drb::drbsslsocket#close()","drb::drbtcpsocket#close()","drb::drbunixsocket#close()","drb::extservmanager::command()","drb::extservmanager::command=()","drb::config()","drb::drbsslsocket::sslconfig#connect()","drb::current_server()","drb::drbserver::default_acl()","drb::drbserver::default_argc_limit()","drb::drbserver::default_id_conv()","drb::drbserver::default_load_limit()","drb::drbserver::default_safe_level()","drb::drbobject#eql?()","drb::drbobject#eql?()","drb::drbunknown#exception()","drb::timeridconv::timerholder2#fetch()","drb::fetch_server()","drb::front()","drb::extserv#front()","drb::drbtcpsocket::getservername()","drb::drbobject#hash()","drb::drbobject#hash()","foo#hello()","drb::here?()","drb::drbserver#here?()","drb::timeridconv::timerholder2#include?()","drb::install_acl()","drb::install_id_conv()","acl#install_list()","acl::aclentry#match()","acl::acllist#match()","drb::drbobject#method_missing()","drb::drbobject#method_missing()","drb::mutex()","acl::new()","acl::aclentry::new()","acl::acllist::new()","drb::drbarray::new()","drb::drbobject::new()","drb::drbobject::new()","drb::drbremoteerror::new()","drb::drbsslsocket::new()","drb::drbsslsocket::sslconfig::new()","drb::drbserver::new()","drb::drbtcpsocket::new()","drb::drbunixsocket::new()","drb::drbunknown::new()","drb::drbunknownerror::new()","drb::extserv::new()","drb::extservmanager::new()","drb::gw::new()","drb::timeridconv::new()","drb::timeridconv::timerholder2::new()","foo::new()","drb::drbobject::new_with()","drb::drbobject::new_with()","drb::drbobject::new_with_uri()","drb::drbobject::new_with_uri()","drb::drbobservable#notify_observers()","drb::drbprotocol::open()","drb::drbsslsocket::open()","drb::drbtcpsocket::open()","drb::drbunixsocket::open()","drb::drbprotocol::open_server()","drb::drbsslsocket::open_server()","drb::drbtcpsocket::open_server()","drb::drbunixsocket::open_server()","drb::drbtcpsocket::open_server_inaddr_any()","drb::drbsslsocket::parse_uri()","drb::drbunixsocket::parse_uri()","drb::timeridconv::timerholder2#peek()","drb::drbtcpsocket#peeraddr()","drb::drbserver::invokemethod18mixin#perform_with_block()","drb::drbobject::prepare_backtrace()","drb::drbobject::prepare_backtrace()","drb::drbtcpsocket#recv_reply()","drb::drbtcpsocket#recv_request()","drb::extservmanager#regist()","drb::regist_server()","drb::drbunknown#reload()","drb::remove_server()","drb::drbobject#respond_to?()","drb::drbobject#respond_to?()","drb::drbtcpsocket#send_reply()","drb::drbtcpsocket#send_request()","drb::extservmanager#service()","drb::drbunixsocket#set_sockopt()","drb::drbsslsocket::sslconfig#setup_certificate()","drb::drbsslsocket::sslconfig#setup_ssl_context()","drb::start_service()","drb::stop_service()","drb::drbserver#stop_service()","drb::extserv#stop_service()","drb::drbsslsocket#stream()","drb::drbtcpsocket#stream()","drb::thread()","drb::to_id()","drb::drbidconv#to_id()","drb::drbidconv#to_id()","drb::drbserver#to_id()","drb::timeridconv#to_id()","drb::to_obj()","drb::drbidconv#to_obj()","drb::drbidconv#to_obj()","drb::drbserver#to_obj()","drb::gwidconv#to_obj()","drb::timeridconv#to_obj()","foo#to_s()","drb::extservmanager#unregist()","drb::uri()","drb::drbprotocol::uri_option()","drb::drbsslsocket::uri_option()","drb::drbtcpsocket::uri_option()","drb::drbunixsocket::uri_option()","drb::drbserver::verbose()","drb::drbserver#verbose()","drb::drbserver::verbose=()","drb::drbserver#verbose=()","drb::drbobject::with_friend()","drb::drbobject::with_friend()"],"info":[["ACL","","ACL.html","","<p>Simple Access Control Lists.\n<p>Access control lists are composed of “allow” and “deny” …\n"],["ACL::ACLEntry","","ACL/ACLEntry.html","","<p>An entry in an ACL\n"],["ACL::ACLList","","ACL/ACLList.html","","<p>A list of ACLEntry objects.  Used to implement the allow and deny halves of\nan ACL\n"],["DRb","","DRb.html","","<p>Overview\n<p>dRuby is a distributed object system for Ruby.  It is written in pure Ruby\nand uses its own protocol. …\n"],["DRb::DRbArray","","DRb/DRbArray.html","",""],["DRb::DRbBadScheme","","DRb/DRbBadScheme.html","","<p>Error raised by a dRuby protocol when it doesn’t support the scheme\nspecified in a URI.  See DRb::DRbProtocol …\n"],["DRb::DRbBadURI","","DRb/DRbBadURI.html","","<p>Error raised by the DRbProtocol module when it cannot find any protocol\nimplementation support the scheme …\n"],["DRb::DRbConn","","DRb/DRbConn.html","","<p>Class handling the connection between a DRbObject and the server the real\nobject lives on.\n<p>This class …\n"],["DRb::DRbConnError","","DRb/DRbConnError.html","","<p>Error raised when an error occurs on the underlying communication protocol.\n"],["DRb::DRbError","","DRb/DRbError.html","","<p>Superclass of all errors raised in the DRb module.\n"],["DRb::DRbIdConv","","DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbIdConv","","DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbMessage","","DRb/DRbMessage.html","","<p>Handler for sending and receiving drb messages.\n<p>This takes care of the low-level marshalling and unmarshalling …\n"],["DRb::DRbObject","","DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObject","","DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObservable","","DRb/DRbObservable.html","",""],["DRb::DRbProtocol","","DRb/DRbProtocol.html","",""],["DRb::DRbRemoteError","","DRb/DRbRemoteError.html","","<p>An exception wrapping an error object\n"],["DRb::DRbSSLSocket","","DRb/DRbSSLSocket.html","",""],["DRb::DRbSSLSocket::SSLConfig","","DRb/DRbSSLSocket/SSLConfig.html","",""],["DRb::DRbServer","","DRb/DRbServer.html","","<p>Class representing a drb server instance.\n<p>A DRbServer must be running in the local process before any …\n"],["DRb::DRbServer::InvokeMethod18Mixin","","DRb/DRbServer/InvokeMethod18Mixin.html","",""],["DRb::DRbServerNotFound","","DRb/DRbServerNotFound.html","","<p>Error raised by the DRb module when an attempt is made to refer to the\ncontext’s current drb server but …\n"],["DRb::DRbTCPSocket","","DRb/DRbTCPSocket.html","","<p>The default drb protocol.\n<p>Communicates over a TCP socket.\n"],["DRb::DRbUNIXSocket","","DRb/DRbUNIXSocket.html","",""],["DRb::DRbUndumped","","DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUndumped","","DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUnknown","","DRb/DRbUnknown.html","","<p>Class wrapping a marshalled object whose type is unknown locally.\n<p>If an object is returned by a method …\n"],["DRb::DRbUnknownError","","DRb/DRbUnknownError.html","","<p>An exception wrapping a DRb::DRbUnknown object\n"],["DRb::ExtServ","","DRb/ExtServ.html","",""],["DRb::ExtServManager","","DRb/ExtServManager.html","",""],["DRb::GW","","DRb/GW.html","",""],["DRb::GWIdConv","","DRb/GWIdConv.html","",""],["DRb::TimerIdConv","","DRb/TimerIdConv.html","",""],["DRb::TimerIdConv::TimerHolder2","","DRb/TimerIdConv/TimerHolder2.html","",""],["DRb::TimerIdConv::TimerHolder2::InvalidIndexError","","DRb/TimerIdConv/TimerHolder2/InvalidIndexError.html","",""],["Foo","","Foo.html","",""],["Object","","Object.html","",""],["==","DRb::DRbObject","DRb/DRbObject.html#method-i-3D-3D","(other)",""],["==","DRb::DRbObject","DRb/DRbObject.html#method-i-3D-3D","(other)",""],["[]","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-5B-5D","(key)",""],["[]","DRb::GW","DRb/GW.html#method-i-5B-5D","(key)",""],["[]=","DRb::GW","DRb/GW.html#method-i-5B-5D-3D","(key, v)",""],["__drbref","DRb::DRbObject","DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drbref","DRb::DRbObject","DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drburi","DRb::DRbObject","DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__drburi","DRb::DRbObject","DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["_dump","DRb::DRbArray","DRb/DRbArray.html#method-i-_dump","(lv)",""],["_dump","DRb::DRbObject","DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","DRb::DRbObject","DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_load","DRb::DRbArray","DRb/DRbArray.html#method-c-_load","(s)",""],["_load","DRb::DRbObject","DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","DRb::DRbObject","DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["accept","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-i-accept","()",""],["accept","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-accept","(tcp)",""],["accept","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-i-accept","()","<p>On the server side, for an instance returned by #open_server, accept a\nclient connection and return a …\n"],["accept","DRb::DRbUNIXSocket","DRb/DRbUNIXSocket.html#method-i-accept","()",""],["add","ACL::ACLList","ACL/ACLList.html#method-i-add","(str)","<p>Adds <code>str</code> as an ACLEntry in this list\n"],["add","DRb::TimerIdConv::TimerHolder2","DRb/TimerIdConv/TimerHolder2.html#method-i-add","(obj)",""],["add_protocol","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-add_protocol","(prot)","<p>Add a new protocol to the DRbProtocol module.\n"],["alive?","DRb::DRbServer","DRb/DRbServer.html#method-i-alive-3F","()","<p>Is this server alive?\n"],["alive?","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-i-alive-3F","()","<p>Check to see if this connection is alive.\n"],["alive?","DRb::ExtServ","DRb/ExtServ.html#method-i-alive-3F","()",""],["allow_addr?","ACL","ACL.html#method-i-allow_addr-3F","(addr)","<p>Allow connections from addrinfo <code>addr</code>?  It must be formatted\nlike Socket#peeraddr:\n\n<pre>[&quot;AF_INET&quot;, 10, &quot;lc630&quot;, ...</pre>\n"],["allow_socket?","ACL","ACL.html#method-i-allow_socket-3F","(soc)","<p>Allow connections from Socket <code>soc</code>?\n"],["block_yield","DRb::DRbServer::InvokeMethod18Mixin","DRb/DRbServer/InvokeMethod18Mixin.html#method-i-block_yield","(x)",""],["check_insecure_method","DRb::DRbServer","DRb/DRbServer.html#method-i-check_insecure_method","(obj, msg_id)","<p>Check that a method is callable via dRuby.\n<p><code>obj</code> is the object we want to invoke the method on.\n<code>msg_id</code> is ...\n"],["close","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-i-close","()",""],["close","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-i-close","()","<p>Close the connection.\n<p>If this is an instance returned by #open_server, then this stops listening\nfor new …\n"],["close","DRb::DRbUNIXSocket","DRb/DRbUNIXSocket.html#method-i-close","()",""],["command","DRb::ExtServManager","DRb/ExtServManager.html#method-c-command","()",""],["command=","DRb::ExtServManager","DRb/ExtServManager.html#method-c-command-3D","(cmd)",""],["config","DRb","DRb.html#method-c-config","()","<p>Get the configuration of the current server.\n<p>If there is no current server, this returns the default configuration. …\n"],["connect","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-connect","(tcp)",""],["current_server","DRb","DRb.html#method-c-current_server","()","<p>Get the ‘current’ server.\n<p>In the context of execution taking place within the main thread of a dRuby\nserver …\n"],["default_acl","DRb::DRbServer","DRb/DRbServer.html#method-c-default_acl","(acl)","<p>Set the default value for the :acl option.\n<p>See #new().  The initial default value is nil.\n"],["default_argc_limit","DRb::DRbServer","DRb/DRbServer.html#method-c-default_argc_limit","(argc)","<p>Set the default value for the :argc_limit option.\n<p>See #new().  The initial default value is 256.\n"],["default_id_conv","DRb::DRbServer","DRb/DRbServer.html#method-c-default_id_conv","(idconv)","<p>Set the default value for the :id_conv option.\n<p>See #new().  The initial default value is a DRbIdConv instance. …\n"],["default_load_limit","DRb::DRbServer","DRb/DRbServer.html#method-c-default_load_limit","(sz)","<p>Set the default value for the :load_limit option.\n<p>See #new().  The initial default value is 25 MB.\n"],["default_safe_level","DRb::DRbServer","DRb/DRbServer.html#method-c-default_safe_level","(level)",""],["eql?","DRb::DRbObject","DRb/DRbObject.html#method-i-eql-3F","(other)",""],["eql?","DRb::DRbObject","DRb/DRbObject.html#method-i-eql-3F","(other)",""],["exception","DRb::DRbUnknown","DRb/DRbUnknown.html#method-i-exception","()","<p>Create a DRbUnknownError exception containing this object.\n"],["fetch","DRb::TimerIdConv::TimerHolder2","DRb/TimerIdConv/TimerHolder2.html#method-i-fetch","(key, dv=@sentinel)",""],["fetch_server","DRb","DRb.html#method-c-fetch_server","(uri)",""],["front","DRb","DRb.html#method-c-front","()","<p>Get the front object of the current server.\n<p>This raises a DRbServerNotFound error if there is no current …\n"],["front","DRb::ExtServ","DRb/ExtServ.html#method-i-front","()",""],["getservername","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-c-getservername","()",""],["hash","DRb::DRbObject","DRb/DRbObject.html#method-i-hash","()",""],["hash","DRb::DRbObject","DRb/DRbObject.html#method-i-hash","()",""],["hello","Foo","Foo.html#method-i-hello","(it)",""],["here?","DRb","DRb.html#method-c-here-3F","(uri)","<p>Is <code>uri</code> the URI for the current local server?\n"],["here?","DRb::DRbServer","DRb/DRbServer.html#method-i-here-3F","(uri)",""],["include?","DRb::TimerIdConv::TimerHolder2","DRb/TimerIdConv/TimerHolder2.html#method-i-include-3F","(key)",""],["install_acl","DRb","DRb.html#method-c-install_acl","(acl)","<p>Set the default acl.\n<p>See DRb::DRbServer.default_acl.\n"],["install_id_conv","DRb","DRb.html#method-c-install_id_conv","(idconv)","<p>Set the default id conv object.\n<p>See DRbServer#default_id_conv.\n"],["install_list","ACL","ACL.html#method-i-install_list","(list)","<p>Adds <code>list</code> of ACL entries to this ACL.\n"],["match","ACL::ACLEntry","ACL/ACLEntry.html#method-i-match","(addr)","<p>Matches <code>addr</code> against this entry.\n"],["match","ACL::ACLList","ACL/ACLList.html#method-i-match","(addr)","<p>Matches <code>addr</code> against each ACLEntry in this list.\n"],["method_missing","DRb::DRbObject","DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)","<p>Routes method calls to the referenced object.\n"],["method_missing","DRb::DRbObject","DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)","<p>Routes method calls to the referenced object.\n"],["mutex","DRb","DRb.html#method-c-mutex","()",""],["new","ACL","ACL.html#method-c-new","(list=nil, order = DENY_ALLOW)","<p>Creates a new ACL from <code>list</code> with an evaluation\n<code>order</code> of DENY_ALLOW or ALLOW_DENY.\n<p>An ACL <code>list</code> is an Array …\n"],["new","ACL::ACLEntry","ACL/ACLEntry.html#method-c-new","(str)","<p>Creates a new entry using <code>str</code>.\n<p><code>str</code> may be \"*\" or \"all\" to match any address, an IP ...\n"],["new","ACL::ACLList","ACL/ACLList.html#method-c-new","()","<p>Creates an empty ACLList\n"],["new","DRb::DRbArray","DRb/DRbArray.html#method-c-new","(ary)",""],["new","DRb::DRbObject","DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for. \nNormally this ...\n"],["new","DRb::DRbObject","DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for. \nNormally this ...\n"],["new","DRb::DRbRemoteError","DRb/DRbRemoteError.html#method-c-new","(error)",""],["new","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-new","(uri, soc, config, is_established)",""],["new","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-c-new","(config)",""],["new","DRb::DRbServer","DRb/DRbServer.html#method-c-new","(uri=nil, front=nil, config_or_acl=nil)","<p>Create a new DRbServer instance.\n<p><code>uri</code> is the URI to bind to.  This is normally of the form\n'druby://&lt;hostname&gt;:&lt;port&gt;' ...\n"],["new","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-c-new","(uri, soc, config={})","<p>Create a new DRbTCPSocket instance.\n<p><code>uri</code> is the URI we are connected to. <code>soc</code> is the\ntcp socket we are bound ...\n"],["new","DRb::DRbUNIXSocket","DRb/DRbUNIXSocket.html#method-c-new","(uri, soc, config={}, server_mode = false)",""],["new","DRb::DRbUnknown","DRb/DRbUnknown.html#method-c-new","(err, buf)","<p>Create a new DRbUnknown object.\n<p><code>buf</code> is a string containing a marshalled object that could not\nbe unmarshalled. ...\n"],["new","DRb::DRbUnknownError","DRb/DRbUnknownError.html#method-c-new","(unknown)","<p>Create a new DRbUnknownError for the DRb::DRbUnknown object\n<code>unknown</code>\n"],["new","DRb::ExtServ","DRb/ExtServ.html#method-c-new","(there, name, server=nil)",""],["new","DRb::ExtServManager","DRb/ExtServManager.html#method-c-new","()",""],["new","DRb::GW","DRb/GW.html#method-c-new","()",""],["new","DRb::TimerIdConv","DRb/TimerIdConv.html#method-c-new","(timeout=600)",""],["new","DRb::TimerIdConv::TimerHolder2","DRb/TimerIdConv/TimerHolder2.html#method-c-new","(timeout=600)",""],["new","Foo","Foo.html#method-c-new","(str)",""],["new_with","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with","(uri, ref)",""],["new_with","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with","(uri, ref)",""],["new_with_uri","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["new_with_uri","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["notify_observers","DRb::DRbObservable","DRb/DRbObservable.html#method-i-notify_observers","(*arg)",""],["open","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-open","(uri, config, first=true)","<p>Open a client connection to <code>uri</code> with the configuration\n<code>config</code>.\n<p>The DRbProtocol module asks each registered …\n"],["open","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-open","(uri, config)",""],["open","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-c-open","(uri, config)","<p>Open a client connection to <code>uri</code> using configuration\n<code>config</code>.\n"],["open","DRb::DRbUNIXSocket","DRb/DRbUNIXSocket.html#method-c-open","(uri, config)",""],["open_server","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-open_server","(uri, config, first=true)","<p>Open a server listening for connections at <code>uri</code> with\nconfiguration <code>config</code>.\n<p>The DRbProtocol module asks …\n"],["open_server","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-open_server","(uri, config)",""],["open_server","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-c-open_server","(uri, config)","<p>Open a server listening for connections at <code>uri</code> using\nconfiguration <code>config</code>.\n"],["open_server","DRb::DRbUNIXSocket","DRb/DRbUNIXSocket.html#method-c-open_server","(uri, config)",""],["open_server_inaddr_any","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-c-open_server_inaddr_any","(host, port)",""],["parse_uri","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-parse_uri","(uri)",""],["parse_uri","DRb::DRbUNIXSocket","DRb/DRbUNIXSocket.html#method-c-parse_uri","(uri)",""],["peek","DRb::TimerIdConv::TimerHolder2","DRb/TimerIdConv/TimerHolder2.html#method-i-peek","(key)",""],["peeraddr","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-i-peeraddr","()","<p>Get the address of our TCP peer (the other end of the socket we are bound\nto.\n"],["perform_with_block","DRb::DRbServer::InvokeMethod18Mixin","DRb/DRbServer/InvokeMethod18Mixin.html#method-i-perform_with_block","()",""],["prepare_backtrace","DRb::DRbObject","DRb/DRbObject.html#method-c-prepare_backtrace","(uri, result)",""],["prepare_backtrace","DRb::DRbObject","DRb/DRbObject.html#method-c-prepare_backtrace","(uri, result)",""],["recv_reply","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-i-recv_reply","()","<p>On the client side, receive a reply from the server.\n"],["recv_request","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-i-recv_request","()","<p>On the server side, receive a request from the client.\n"],["regist","DRb::ExtServManager","DRb/ExtServManager.html#method-i-regist","(name, ro)",""],["regist_server","DRb","DRb.html#method-c-regist_server","(server)",""],["reload","DRb::DRbUnknown","DRb/DRbUnknown.html#method-i-reload","()","<p>Attempt to load the wrapped marshalled object again.\n<p>If the class of the object is now known locally, …\n"],["remove_server","DRb","DRb.html#method-c-remove_server","(server)",""],["respond_to?","DRb::DRbObject","DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)",""],["respond_to?","DRb::DRbObject","DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)",""],["send_reply","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-i-send_reply","(succ, result)","<p>On the server side, send a reply to the client.\n"],["send_request","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-i-send_request","(ref, msg_id, arg, b)","<p>On the client side, send a request to the server.\n"],["service","DRb::ExtServManager","DRb/ExtServManager.html#method-i-service","(name)",""],["set_sockopt","DRb::DRbUNIXSocket","DRb/DRbUNIXSocket.html#method-i-set_sockopt","(soc)",""],["setup_certificate","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_certificate","()",""],["setup_ssl_context","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_ssl_context","()",""],["start_service","DRb","DRb.html#method-c-start_service","(uri=nil, front=nil, config=nil)","<p>Start a dRuby server locally.\n<p>The new dRuby server will become the primary server, even if another server\n…\n"],["stop_service","DRb","DRb.html#method-c-stop_service","()","<p>Stop the local dRuby server.\n<p>This operates on the primary server.  If there is no primary server\ncurrently …\n"],["stop_service","DRb::DRbServer","DRb/DRbServer.html#method-i-stop_service","()","<p>Stop this server.\n"],["stop_service","DRb::ExtServ","DRb/ExtServ.html#method-i-stop_service","()",""],["stream","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-i-stream","()",""],["stream","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-i-stream","()","<p>Get the socket.\n"],["thread","DRb","DRb.html#method-c-thread","()","<p>Get the thread of the primary server.\n<p>This returns nil if there is no primary server.  See #primary_server …\n"],["to_id","DRb","DRb.html#method-c-to_id","(obj)","<p>Get a reference id for an object using the current server.\n<p>This raises a DRbServerNotFound error if there …\n"],["to_id","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object’s __id__ in the local object …\n"],["to_id","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object’s __id__ in the local object …\n"],["to_id","DRb::DRbServer","DRb/DRbServer.html#method-i-to_id","(obj)","<p>Convert a local object to a dRuby reference.\n"],["to_id","DRb::TimerIdConv","DRb/TimerIdConv.html#method-i-to_id","(obj)",""],["to_obj","DRb","DRb.html#method-c-to_obj","(ref)","<p>Convert a reference into an object using the current server.\n<p>This raises a DRbServerNotFound error if …\n"],["to_obj","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbServer","DRb/DRbServer.html#method-i-to_obj","(ref)","<p>Convert a dRuby reference to the local object it refers to.\n"],["to_obj","DRb::GWIdConv","DRb/GWIdConv.html#method-i-to_obj","(ref)",""],["to_obj","DRb::TimerIdConv","DRb/TimerIdConv.html#method-i-to_obj","(ref)",""],["to_s","Foo","Foo.html#method-i-to_s","()",""],["unregist","DRb::ExtServManager","DRb/ExtServManager.html#method-i-unregist","(name)",""],["uri","DRb","DRb.html#method-c-uri","()","<p>Get the URI defining the local dRuby space.\n<p>This is the URI of the current server.  See #current_server …\n"],["uri_option","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-uri_option","(uri, config, first=true)","<p>Parse <code>uri</code> into a [uri, option] pair.\n<p>The DRbProtocol module asks each registered protocol in turn to try …\n"],["uri_option","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-uri_option","(uri, config)",""],["uri_option","DRb::DRbTCPSocket","DRb/DRbTCPSocket.html#method-c-uri_option","(uri, config)","<p>Parse <code>uri</code> into a [uri, option] pair.\n"],["uri_option","DRb::DRbUNIXSocket","DRb/DRbUNIXSocket.html#method-c-uri_option","(uri, config)",""],["verbose","DRb::DRbServer","DRb/DRbServer.html#method-c-verbose","()","<p>Get the default value of the :verbose option.\n"],["verbose","DRb::DRbServer","DRb/DRbServer.html#method-i-verbose","()","<p>Get whether the server is in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose=","DRb::DRbServer","DRb/DRbServer.html#method-c-verbose-3D","(on)","<p>Set the default value of the :verbose option.\n<p>See #new().  The initial default value is false.\n"],["verbose=","DRb::DRbServer","DRb/DRbServer.html#method-i-verbose-3D","(v)","<p>Set whether to operate in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["with_friend","DRb::DRbObject","DRb/DRbObject.html#method-c-with_friend","(uri)",""],["with_friend","DRb::DRbObject","DRb/DRbObject.html#method-c-with_friend","(uri)",""]]}}