var search_data = {"index":{"searchIndex":["fiddle","closure","blockcaller","function","call()","call()","last_error()","last_error=()","new()","new()","new()","to_i()","win32_last_error()","win32_last_error=()"],"longSearchIndex":["fiddle","fiddle::closure","fiddle::closure::blockcaller","fiddle::function","fiddle::closure::blockcaller#call()","fiddle::function#call()","fiddle::last_error()","fiddle::last_error=()","fiddle::closure::new()","fiddle::closure::blockcaller::new()","fiddle::function::new()","fiddle::closure#to_i()","fiddle::win32_last_error()","fiddle::win32_last_error=()"],"info":[["Fiddle","","Fiddle.html","","<p>Description\n<p>A libffi wrapper.\n"],["Fiddle::Closure","","Fiddle/Closure.html","","<p>Description\n<p>An FFI closure wrapper, for handling callbacks.\n<p>Example\n"],["Fiddle::Closure::BlockCaller","","Fiddle/Closure/BlockCaller.html","","<p>Extends Fiddle::Closure to allow for building the closure in a block\n"],["Fiddle::Function","","Fiddle/Function.html","","<p>Description\n<p>A representation of a C function\n<p>Examples\n"],["call","Fiddle::Closure::BlockCaller","Fiddle/Closure/BlockCaller.html#method-i-call","(*args)","<p>Calls the constructed BlockCaller, with <code>args</code>\n<p>For an example see Fiddle::Closure::BlockCaller.new\n"],["call","Fiddle::Function","Fiddle/Function.html#method-i-call","(*args)","<p>Calls the constructed Function, with <code>args</code>\n<p>For an example see Fiddle::Function\n"],["last_error","Fiddle","Fiddle.html#method-c-last_error","()","<p>Returns the last <code>Error</code> of the current executing\n<code>Thread</code> or nil if none\n"],["last_error=","Fiddle","Fiddle.html#method-c-last_error-3D","(error)","<p>Sets the last <code>Error</code> of the current executing\n<code>Thread</code> to <code>error</code>\n"],["new","Fiddle::Closure","Fiddle/Closure.html#method-c-new","(p1, p2, p3 = v3)","<p>Construct a new Closure object.\n<p><code>ret</code> is the C type to be returned\n<p><code>args</code> are passed the callback\n"],["new","Fiddle::Closure::BlockCaller","Fiddle/Closure/BlockCaller.html#method-c-new","(ctype, args, abi = Fiddle::Function::DEFAULT, &block)","<p>Description\n<p>Construct a new BlockCaller object.\n<p><code>ctype</code> is the C type to be returned\n"],["new","Fiddle::Function","Fiddle/Function.html#method-c-new","(p1, p2, p3, p4 = v4)","<p>Constructs a Function object.\n<p><code>ptr</code> is a referenced function, of a DL::Handle\n<p><code>args</code> is an Array of arguments, ...\n"],["to_i","Fiddle::Closure","Fiddle/Closure.html#method-i-to_i","()","<p>Returns the memory address for this closure\n"],["win32_last_error","Fiddle","Fiddle.html#method-c-win32_last_error","()","<p>Returns the last win32 <code>Error</code> of the current executing\n<code>Thread</code> or nil if none\n"],["win32_last_error=","Fiddle","Fiddle.html#method-c-win32_last_error-3D","(error)","<p>Sets the last win32 <code>Error</code> of the current executing\n<code>Thread</code> to <code>error</code>\n"]]}}