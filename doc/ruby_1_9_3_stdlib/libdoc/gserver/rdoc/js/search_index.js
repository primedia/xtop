var search_data = {"index":{"searchIndex":["gserver","connecting()","connections()","disconnecting()","error()","in_service?()","join()","log()","new()","serve()","shutdown()","start()","starting()","stop()","stop()","stopped?()","stopping()"],"longSearchIndex":["gserver","gserver#connecting()","gserver#connections()","gserver#disconnecting()","gserver#error()","gserver::in_service?()","gserver#join()","gserver#log()","gserver::new()","gserver#serve()","gserver#shutdown()","gserver#start()","gserver#starting()","gserver#stop()","gserver::stop()","gserver#stopped?()","gserver#stopping()"],"info":[["GServer","","GServer.html","","<p>GServer implements a generic server, featuring thread pool management,\nsimple logging, and multi-server …\n"],["connecting","GServer","GServer.html#method-i-connecting","(client)","<p>Called when a client connects, if auditing is enabled.\n<p>client &mdash; a TCPSocket instances representing the client …\n\n"],["connections","GServer","GServer.html#method-i-connections","()","<p>Return the current number of connected clients\n"],["disconnecting","GServer","GServer.html#method-i-disconnecting","(clientPort)","<p>Called when a client disconnects, if audition is enabled.\n<p>clientPort &mdash; the port of the client that is connecting …\n\n"],["error","GServer","GServer.html#method-i-error","(detail)","<p>Called if #debug is true whenever an unhandled exception is raised. This\nimplementation simply logs the …\n"],["in_service?","GServer","GServer.html#method-c-in_service-3F","(port, host = DEFAULT_HOST)","<p>Check if a server is running on the given port and host\n<p>port &mdash; port, as a FixNum, of the server to check …\n"],["join","GServer","GServer.html#method-i-join","()","<p>Join with the server thread\n"],["log","GServer","GServer.html#method-i-log","(msg)","<p>Log a message to #stdlog, if it’s defined.  This implementation outputs the\ntimestamp and message to …\n"],["new","GServer","GServer.html#method-c-new","(port, host = DEFAULT_HOST, maxConnections = 4, stdlog = $stderr, audit = false, debug = false)","<p>Create a new server\n<p>port &mdash; the port, as a FixNum, on which to listen.\n<p>host &mdash; the host to bind to\n"],["serve","GServer","GServer.html#method-i-serve","(io)",""],["shutdown","GServer","GServer.html#method-i-shutdown","()","<p>Schedule a shutdown for the server\n"],["start","GServer","GServer.html#method-i-start","(maxConnections = -1)","<p>Start the server if it isn’t already running\n<p>maxConnections &mdash; override <code>maxConnections</code> given to the constructor. …\n\n"],["starting","GServer","GServer.html#method-i-starting","()","<p>Called when the server is starting up, if auditing is enabled.\n"],["stop","GServer","GServer.html#method-i-stop","()","<p>Stop the server\n"],["stop","GServer","GServer.html#method-c-stop","(port, host = DEFAULT_HOST)","<p>Stop the server running on the given port, bound to the given host\n<p>port &mdash; port, as a FixNum, of the server …\n"],["stopped?","GServer","GServer.html#method-i-stopped-3F","()","<p>Returns true if the server has stopped.\n"],["stopping","GServer","GServer.html#method-i-stopping","()","<p>Called when the server is shutting down, if auditing is enabled.\n"]]}}