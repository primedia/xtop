var search_data = {"index":{"searchIndex":["logger","application","formatter","logdevice","logdevicemutex","severity","<<()","add()","call()","close()","close()","datetime_format()","datetime_format=()","debug()","debug?()","error()","error?()","fatal()","fatal?()","info()","info?()","level=()","log()","log()","log=()","logger()","logger=()","new()","new()","new()","new()","set_log()","start()","unknown()","warn()","warn?()","write()"],"longSearchIndex":["logger","logger::application","logger::formatter","logger::logdevice","logger::logdevice::logdevicemutex","logger::severity","logger#<<()","logger#add()","logger::formatter#call()","logger#close()","logger::logdevice#close()","logger#datetime_format()","logger#datetime_format=()","logger#debug()","logger#debug?()","logger#error()","logger#error?()","logger#fatal()","logger#fatal?()","logger#info()","logger#info?()","logger::application#level=()","logger#log()","logger::application#log()","logger::application#log=()","logger::application#logger()","logger::application#logger=()","logger::new()","logger::application::new()","logger::formatter::new()","logger::logdevice::new()","logger::application#set_log()","logger::application#start()","logger#unknown()","logger#warn()","logger#warn?()","logger::logdevice#write()"],"info":[["Logger","","Logger.html","","<p>Description\n<p>The Logger class provides a simple but sophisticated logging utility that\nyou can use to output …\n"],["Logger::Application","","Logger/Application.html","","<p>Description\n<p>Application – Add logging support to your application.\n<p>Usage\n"],["Logger::Formatter","","Logger/Formatter.html","","<p>Default formatter for log messages\n"],["Logger::LogDevice","","Logger/LogDevice.html","","<p>Device used for logging messages.\n"],["Logger::LogDevice::LogDeviceMutex","","Logger/LogDevice/LogDeviceMutex.html","",""],["Logger::Severity","","Logger/Severity.html","","<p>Logging severity.\n"],["<<","Logger","Logger.html#method-i-3C-3C","(msg)","<p>Dump given message to the log device without any formatting.  If no log\ndevice exists, return <code>nil</code>.\n"],["add","Logger","Logger.html#method-i-add","(severity, message = nil, progname = nil, &block)","<p>Synopsis\n\n<pre>Logger#add(severity, message = nil, progname = nil) { ... }</pre>\n<p>Args\n"],["call","Logger::Formatter","Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["close","Logger","Logger.html#method-i-close","()","<p>Close the logging device.\n"],["close","Logger::LogDevice","Logger/LogDevice.html#method-i-close","()",""],["datetime_format","Logger","Logger.html#method-i-datetime_format","()","<p>Returns the date format being used.  See #datetime_format=\n"],["datetime_format=","Logger","Logger.html#method-i-datetime_format-3D","(datetime_format)","<p>Set date-time format.\n<p>datetime_format &mdash; A string suitable for passing to <code>strftime</code>.\n\n"],["debug","Logger","Logger.html#method-i-debug","(progname = nil, &block)","<p>Log a <code>DEBUG</code> message.\n<p>See #info for more information.\n"],["debug?","Logger","Logger.html#method-i-debug-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>DEBUG</code> messages.\n"],["error","Logger","Logger.html#method-i-error","(progname = nil, &block)","<p>Log an <code>ERROR</code> message.\n<p>See #info for more information.\n"],["error?","Logger","Logger.html#method-i-error-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>ERROR</code> messages.\n"],["fatal","Logger","Logger.html#method-i-fatal","(progname = nil, &block)","<p>Log a <code>FATAL</code> message.\n<p>See #info for more information.\n"],["fatal?","Logger","Logger.html#method-i-fatal-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>FATAL</code> messages.\n"],["info","Logger","Logger.html#method-i-info","(progname = nil, &block)","<p>Log an <code>INFO</code> message.\n<p>message &mdash; the message to log; does not need to be a String\n<p>progname &mdash; in the block form, …\n"],["info?","Logger","Logger.html#method-i-info-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>INFO</code> messages.\n"],["level=","Logger::Application","Logger/Application.html#method-i-level-3D","(level)","<p>Set the logging threshold, just like <code>Logger#level=</code>.\n"],["log","Logger","Logger.html#method-i-log","(severity, message = nil, progname = nil, &block)",""],["log","Logger::Application","Logger/Application.html#method-i-log","(severity, message = nil, &block)","<p>See Logger#add.  This application’s <code>appname</code> is used.\n"],["log=","Logger::Application","Logger/Application.html#method-i-log-3D","(logdev)",""],["logger","Logger::Application","Logger/Application.html#method-i-logger","()","<p>Logger for this application.  See the class Logger for an explanation.\n"],["logger=","Logger::Application","Logger/Application.html#method-i-logger-3D","(logger)","<p>Sets the logger for this application.  See the class Logger for an\nexplanation.\n"],["new","Logger","Logger.html#method-c-new","(logdev, shift_age = 0, shift_size = 1048576)","<p>Synopsis\n\n<pre>Logger.new(name, shift_age = 7, shift_size = 1048576)\nLogger.new(name, shift_age = 'weekly')</pre>\n"],["new","Logger::Application","Logger/Application.html#method-c-new","(appname = nil)","<p>Synopsis\n\n<pre>Application.new(appname = '')</pre>\n<p>Args\n"],["new","Logger::Formatter","Logger/Formatter.html#method-c-new","()",""],["new","Logger::LogDevice","Logger/LogDevice.html#method-c-new","(log = nil, opt = {})",""],["set_log","Logger::Application","Logger/Application.html#method-i-set_log","(logdev, shift_age = 0, shift_size = 1024000)","<p>Sets the log device for this application.  See <code>Logger.new</code> for\nan explanation of the arguments.\n"],["start","Logger::Application","Logger/Application.html#method-i-start","()","<p>Start the application.  Return the status code.\n"],["unknown","Logger","Logger.html#method-i-unknown","(progname = nil, &block)","<p>Log an <code>UNKNOWN</code> message.  This will be printed no matter what\nthe logger’s level.\n<p>See #info for more information. …\n"],["warn","Logger","Logger.html#method-i-warn","(progname = nil, &block)","<p>Log a <code>WARN</code> message.\n<p>See #info for more information.\n"],["warn?","Logger","Logger.html#method-i-warn-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>WARN</code> messages.\n"],["write","Logger::LogDevice","Logger/LogDevice.html#method-i-write","(message)",""]]}}