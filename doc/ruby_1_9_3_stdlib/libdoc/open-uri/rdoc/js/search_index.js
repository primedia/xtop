var search_data = {"index":{"searchIndex":["kernel","openuri","httperror","httpredirect","meta","openread","uri","ftp","generic","http","charset()","content_encoding()","content_type()","find_proxy()","last_modified()","new()","new()","open()","open()","open()","read()"],"longSearchIndex":["kernel","openuri","openuri::httperror","openuri::httpredirect","openuri::meta","openuri::openread","uri","uri::ftp","uri::generic","uri::http","openuri::meta#charset()","openuri::meta#content_encoding()","openuri::meta#content_type()","uri::generic#find_proxy()","openuri::meta#last_modified()","openuri::httperror::new()","openuri::httpredirect::new()","kernel::open()","kernel#open()","openuri::openread#open()","openuri::openread#read()"],"info":[["Kernel","","Kernel.html","",""],["OpenURI","","OpenURI.html","","\n<pre>OpenURI is an easy-to-use wrapper for net/http, net/https and net/ftp.</pre>\n<p>Example\n\n<pre>It is possible to open an ...</pre>\n"],["OpenURI::HTTPError","","OpenURI/HTTPError.html","",""],["OpenURI::HTTPRedirect","","OpenURI/HTTPRedirect.html","",""],["OpenURI::Meta","","OpenURI/Meta.html","","<p>Mixin for holding meta-information.\n"],["OpenURI::OpenRead","","OpenURI/OpenRead.html","","<p>Mixin for HTTP and FTP URIs.\n"],["URI","","URI.html","",""],["URI::FTP","","URI/FTP.html","",""],["URI::Generic","","URI/Generic.html","",""],["URI::HTTP","","URI/HTTP.html","",""],["charset","OpenURI::Meta","OpenURI/Meta.html#method-i-charset","()","<p>returns a charset parameter in Content-Type field. It is downcased for\ncanonicalization.\n<p>If charset parameter …\n"],["content_encoding","OpenURI::Meta","OpenURI/Meta.html#method-i-content_encoding","()","<p>Returns a list of encodings in Content-Encoding field as an array of\nstrings.\n<p>The encodings are downcased …\n"],["content_type","OpenURI::Meta","OpenURI/Meta.html#method-i-content_type","()","<p>returns “type/subtype” which is MIME Content-Type. It is downcased for\ncanonicalization. Content-Type …\n"],["find_proxy","URI::Generic","URI/Generic.html#method-i-find_proxy","()","<p>returns a proxy URI. The proxy URI is obtained from environment variables\nsuch as http_proxy, ftp_proxy …\n"],["last_modified","OpenURI::Meta","OpenURI/Meta.html#method-i-last_modified","()","<p>returns a Time that represents the Last-Modified field.\n"],["new","OpenURI::HTTPError","OpenURI/HTTPError.html#method-c-new","(message, io)",""],["new","OpenURI::HTTPRedirect","OpenURI/HTTPRedirect.html#method-c-new","(message, io, uri)",""],["open","Kernel","Kernel.html#method-c-open","(name, *rest, &block)","<p>Allows the opening of various resources including URIs.\n<p>If the first argument responds to the ‘open’ method, …\n"],["open","Kernel","Kernel.html#method-i-open","(name, *rest, &block)","<p>Allows the opening of various resources including URIs.\n<p>If the first argument responds to the ‘open’ method, …\n"],["open","OpenURI::OpenRead","OpenURI/OpenRead.html#method-i-open","(*rest, &block)","<p>OpenURI::OpenRead#open provides `open’ for URI::HTTP and URI::FTP.\n<p>OpenURI::OpenRead#open takes optional …\n"],["read","OpenURI::OpenRead","OpenURI/OpenRead.html#method-i-read","(options={})","<p>OpenURI::OpenRead#read() reads a content referenced by self and returns the\ncontent as string. The string …\n"]]}}