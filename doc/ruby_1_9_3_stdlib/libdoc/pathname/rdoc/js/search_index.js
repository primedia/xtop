var search_data = {"index":{"searchIndex":["kernel","pathname","file","+()","<=>()","==()","===()","pathname()","absolute?()","ascend()","atime()","basename()","binread()","blockdev?()","chardev?()","children()","chmod()","chown()","cleanpath()","ctime()","delete()","descend()","directory?()","dirname()","each_child()","each_entry()","each_filename()","each_line()","entries()","eql?()","executable?()","executable_real?()","exist?()","expand_path()","extname()","file?()","find()","fnmatch()","fnmatch?()","freeze()","ftype()","getwd()","glob()","grpowned?()","join()","lchmod()","lchown()","lstat()","make_link()","make_symlink()","mkdir()","mkpath()","mountpoint?()","mtime()","new()","open()","opendir()","owned?()","parent()","pipe?()","pwd()","read()","readable?()","readable_real?()","readlines()","readlink()","realdirpath()","realpath()","relative?()","relative_path_from()","rename()","rmdir()","rmtree()","root?()","setgid?()","setuid?()","size()","size?()","socket?()","split()","stat()","sticky?()","sub()","sub_ext()","symlink?()","sysopen()","taint()","to_path()","to_s()","truncate()","unlink()","untaint()","utime()","world_readable?()","world_writable?()","writable?()","writable_real?()","zero?()"],"longSearchIndex":["kernel","pathname","pathname::file","pathname#+()","pathname#<=>()","pathname#==()","pathname#===()","kernel#pathname()","pathname#absolute?()","pathname#ascend()","pathname#atime()","pathname#basename()","pathname#binread()","pathname#blockdev?()","pathname#chardev?()","pathname#children()","pathname#chmod()","pathname#chown()","pathname#cleanpath()","pathname#ctime()","pathname#delete()","pathname#descend()","pathname#directory?()","pathname#dirname()","pathname#each_child()","pathname#each_entry()","pathname#each_filename()","pathname#each_line()","pathname#entries()","pathname#eql?()","pathname#executable?()","pathname#executable_real?()","pathname#exist?()","pathname#expand_path()","pathname#extname()","pathname#file?()","pathname#find()","pathname#fnmatch()","pathname#fnmatch?()","pathname#freeze()","pathname#ftype()","pathname::getwd()","pathname::glob()","pathname#grpowned?()","pathname#join()","pathname#lchmod()","pathname#lchown()","pathname#lstat()","pathname#make_link()","pathname#make_symlink()","pathname#mkdir()","pathname#mkpath()","pathname#mountpoint?()","pathname#mtime()","pathname::new()","pathname#open()","pathname#opendir()","pathname#owned?()","pathname#parent()","pathname#pipe?()","pathname::pwd()","pathname#read()","pathname#readable?()","pathname#readable_real?()","pathname#readlines()","pathname#readlink()","pathname#realdirpath()","pathname#realpath()","pathname#relative?()","pathname#relative_path_from()","pathname#rename()","pathname#rmdir()","pathname#rmtree()","pathname#root?()","pathname#setgid?()","pathname#setuid?()","pathname#size()","pathname#size?()","pathname#socket?()","pathname#split()","pathname#stat()","pathname#sticky?()","pathname#sub()","pathname#sub_ext()","pathname#symlink?()","pathname#sysopen()","pathname#taint()","pathname#to_path()","pathname#to_s()","pathname#truncate()","pathname#unlink()","pathname#untaint()","pathname#utime()","pathname#world_readable?()","pathname#world_writable?()","pathname#writable?()","pathname#writable_real?()","pathname#zero?()"],"info":[["Kernel","","Kernel.html","",""],["Pathname","","Pathname.html","","<p>Pathname\n<p>Pathname represents a pathname which locates a file in a filesystem. The\npathname depends on …\n"],["Pathname::File","","Pathname/File.html","",""],["+","Pathname","Pathname.html#method-i-2B","(other)","<p>Pathname#+ appends a pathname fragment to this one to produce a new\nPathname object.\n\n<pre>p1 = Pathname.new(&quot;/usr&quot;) ...</pre>\n"],["<=>","Pathname","Pathname.html#method-i-3C-3D-3E","(p1)","<p>Provides for comparing pathnames, case-sensitively.\n"],["==","Pathname","Pathname.html#method-i-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["===","Pathname","Pathname.html#method-i-3D-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["Pathname","Kernel","Kernel.html#method-i-Pathname","(p1)","<p>create a pathname object.\n<p>This method is available since 1.8.5.\n"],["absolute?","Pathname","Pathname.html#method-i-absolute-3F","()","<p>Predicate method for testing whether a path is absolute. It returns\n<code>true</code> if the pathname begins with …\n"],["ascend","Pathname","Pathname.html#method-i-ascend","()","<p>Iterates over and yields a new Pathname object for each element in the\ngiven path in ascending order. …\n"],["atime","Pathname","Pathname.html#method-i-atime","()","<p>See <code>File.atime</code>.  Returns last access time.\n"],["basename","Pathname","Pathname.html#method-i-basename","(p1 = v1)","<p>See <code>File.basename</code>.  Returns the last component of the path.\n"],["binread","Pathname","Pathname.html#method-i-binread","(p1 = v1, p2 = v2)","<p>See <code>IO.binread</code>.  Returns all the bytes from the file, or the\nfirst <code>N</code> if specified.\n"],["blockdev?","Pathname","Pathname.html#method-i-blockdev-3F","()","<p>See <code>FileTest.blockdev?</code>.\n"],["chardev?","Pathname","Pathname.html#method-i-chardev-3F","()","<p>See <code>FileTest.chardev?</code>.\n"],["children","Pathname","Pathname.html#method-i-children","(with_directory=true)","<p>Returns the children of the directory (files and subdirectories, not\nrecursive) as an array of Pathname …\n"],["chmod","Pathname","Pathname.html#method-i-chmod","(p1)","<p>See <code>File.chmod</code>.  Changes permissions.\n"],["chown","Pathname","Pathname.html#method-i-chown","(p1, p2)","<p>See <code>File.chown</code>.  Change owner and group of file.\n"],["cleanpath","Pathname","Pathname.html#method-i-cleanpath","(consider_symlink=false)","<p>Returns clean pathname of <code>self</code> with consecutive slashes and\nuseless dots removed.  The filesystem is …\n"],["ctime","Pathname","Pathname.html#method-i-ctime","()","<p>See <code>File.ctime</code>.  Returns last (directory entry, not file)\nchange time.\n"],["delete","Pathname","Pathname.html#method-i-delete","()","<p>Removes a file or directory, using <code>File.unlink</code> or\n<code>Dir.unlink</code> as necessary.\n"],["descend","Pathname","Pathname.html#method-i-descend","()","<p>Iterates over and yields a new Pathname object for each element in the\ngiven path in descending order. …\n"],["directory?","Pathname","Pathname.html#method-i-directory-3F","()","<p>See <code>FileTest.directory?</code>.\n"],["dirname","Pathname","Pathname.html#method-i-dirname","()","<p>See <code>File.dirname</code>.  Returns all but the last component of the\npath.\n"],["each_child","Pathname","Pathname.html#method-i-each_child","(with_directory=true, &b)","<p>Iterates over the children of the directory (files and subdirectories, not\nrecursive). It yields Pathname …\n"],["each_entry","Pathname","Pathname.html#method-i-each_entry","()","<p>Iterates over the entries (files and subdirectories) in the directory.  It\nyields a Pathname object for …\n"],["each_filename","Pathname","Pathname.html#method-i-each_filename","()","<p>Iterates over each component of the path.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/usr/bin/ruby&quot;</span>).<span class=\"ruby-identifier\">each_filename</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">filename</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_line","Pathname","Pathname.html#method-i-each_line","(p1 = v1, p2 = v2, p3 = v3)","<p>#each_line iterates over the line in the file.  It yields a String object\nfor each line.\n<p>This method is …\n"],["entries","Pathname","Pathname.html#method-i-entries","()","<p>Return the entries (files and subdirectories) in the directory, each as a\nPathname object.\n<p>The result …\n"],["eql?","Pathname","Pathname.html#method-i-eql-3F","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["executable?","Pathname","Pathname.html#method-i-executable-3F","()","<p>See <code>FileTest.executable?</code>.\n"],["executable_real?","Pathname","Pathname.html#method-i-executable_real-3F","()","<p>See <code>FileTest.executable_real?</code>.\n"],["exist?","Pathname","Pathname.html#method-i-exist-3F","()","<p>See <code>FileTest.exist?</code>.\n"],["expand_path","Pathname","Pathname.html#method-i-expand_path","(p1 = v1)","<p>See <code>File.expand_path</code>.\n"],["extname","Pathname","Pathname.html#method-i-extname","()","<p>See <code>File.extname</code>.  Returns the file’s extension.\n"],["file?","Pathname","Pathname.html#method-i-file-3F","()","<p>See <code>FileTest.file?</code>.\n"],["find","Pathname","Pathname.html#method-i-find","()","<p>Pathname#find is an iterator to traverse a directory tree in a depth first\nmanner.  It yields a Pathname …\n"],["fnmatch","Pathname","Pathname.html#method-i-fnmatch","(p1, p2 = v2)","<p>See <code>File.fnmatch</code>.  Return <code>true</code> if the receiver\nmatches the given pattern.\n"],["fnmatch?","Pathname","Pathname.html#method-i-fnmatch-3F","(p1, p2 = v2)","<p>See <code>File.fnmatch</code>.  Return <code>true</code> if the receiver\nmatches the given pattern.\n"],["freeze","Pathname","Pathname.html#method-i-freeze","()",""],["ftype","Pathname","Pathname.html#method-i-ftype","()","<p>See <code>File.ftype</code>.  Returns “type” of file (“file”, “directory”,\netc).\n"],["getwd","Pathname","Pathname.html#method-c-getwd","()","<p>See <code>Dir.getwd</code>.  Returns the current working directory as a\nPathname.\n"],["glob","Pathname","Pathname.html#method-c-glob","(p1, p2 = v2)","<p>See <code>Dir.glob</code>.  Returns or yields Pathname objects.\n"],["grpowned?","Pathname","Pathname.html#method-i-grpowned-3F","()","<p>See <code>FileTest.grpowned?</code>.\n"],["join","Pathname","Pathname.html#method-i-join","(*args)","<p>Pathname#join joins pathnames.\n<p><code>path0.join(path1, ..., pathN)</code> is the same as <code>path0 +\npath1 + ... + pathN</code> ...\n"],["lchmod","Pathname","Pathname.html#method-i-lchmod","(p1)","<p>See <code>File.lchmod</code>.\n"],["lchown","Pathname","Pathname.html#method-i-lchown","(p1, p2)","<p>See <code>File.lchown</code>.\n"],["lstat","Pathname","Pathname.html#method-i-lstat","()","<p>See <code>File.lstat</code>.\n"],["make_link","Pathname","Pathname.html#method-i-make_link","(p1)","<p>See <code>File.link</code>.  Creates a hard link at <em>pathname</em>.\n"],["make_symlink","Pathname","Pathname.html#method-i-make_symlink","(p1)","<p>See <code>File.symlink</code>.  Creates a symbolic link.\n"],["mkdir","Pathname","Pathname.html#method-i-mkdir","(p1 = v1)","<p>See <code>Dir.mkdir</code>.  Create the referenced directory.\n"],["mkpath","Pathname","Pathname.html#method-i-mkpath","()","<p>See <code>FileUtils.mkpath</code>.  Creates a full path, including any\nintermediate directories that don’t yet exist. …\n"],["mountpoint?","Pathname","Pathname.html#method-i-mountpoint-3F","()","<p>mountpoint? returns <code>true</code> if <code>self</code> points to a\nmountpoint.\n"],["mtime","Pathname","Pathname.html#method-i-mtime","()","<p>See <code>File.mtime</code>.  Returns last modification time.\n"],["new","Pathname","Pathname.html#method-c-new","(p1)","<p>Create a Pathname object from the given String (or String-like object). If\n<code>path</code> contains a NUL character …\n"],["open","Pathname","Pathname.html#method-i-open","(p1 = v1, p2 = v2, p3 = v3)","<p>See <code>File.open</code>.  Opens the file for reading or writing.\n"],["opendir","Pathname","Pathname.html#method-i-opendir","()","<p>See <code>Dir.open</code>.\n"],["owned?","Pathname","Pathname.html#method-i-owned-3F","()","<p>See <code>FileTest.owned?</code>.\n"],["parent","Pathname","Pathname.html#method-i-parent","()","<p>#parent returns the parent directory.\n<p>This is same as <code>self + '..'</code>.\n"],["pipe?","Pathname","Pathname.html#method-i-pipe-3F","()","<p>See <code>FileTest.pipe?</code>.\n"],["pwd","Pathname","Pathname.html#method-c-pwd","()","<p>See <code>Dir.getwd</code>.  Returns the current working directory as a\nPathname.\n"],["read","Pathname","Pathname.html#method-i-read","(p1 = v1, p2 = v2, p3 = v3)","<p>See <code>IO.read</code>.  Returns all data from the file, or the first\n<code>N</code> bytes if specified.\n"],["readable?","Pathname","Pathname.html#method-i-readable-3F","()","<p>See <code>FileTest.readable?</code>.\n"],["readable_real?","Pathname","Pathname.html#method-i-readable_real-3F","()","<p>See <code>FileTest.readable_real?</code>.\n"],["readlines","Pathname","Pathname.html#method-i-readlines","(p1 = v1, p2 = v2, p3 = v3)","<p>See <code>IO.readlines</code>.  Returns all the lines from the file.\n"],["readlink","Pathname","Pathname.html#method-i-readlink","()","<p>See <code>File.readlink</code>.  Read symbolic link.\n"],["realdirpath","Pathname","Pathname.html#method-i-realdirpath","(p1 = v1)","<p>Returns the real (absolute) pathname of <code>self</code> in the actual\nfilesystem. The real pathname doesn’t contain …\n"],["realpath","Pathname","Pathname.html#method-i-realpath","(p1 = v1)","<p>Returns the real (absolute) pathname of <code>self</code> in the actual\nfilesystem not containing symlinks or useless …\n"],["relative?","Pathname","Pathname.html#method-i-relative-3F","()","<p>The opposite of #absolute?\n"],["relative_path_from","Pathname","Pathname.html#method-i-relative_path_from","(base_directory)","<p>#relative_path_from returns a relative path from the argument to the\nreceiver.  If <code>self</code> is absolute, …\n"],["rename","Pathname","Pathname.html#method-i-rename","(p1)","<p>See <code>File.rename</code>.  Rename the file.\n"],["rmdir","Pathname","Pathname.html#method-i-rmdir","()","<p>See <code>Dir.rmdir</code>.  Remove the referenced directory.\n"],["rmtree","Pathname","Pathname.html#method-i-rmtree","()","<p>See <code>FileUtils.rm_r</code>.  Deletes a directory and all beneath it.\n"],["root?","Pathname","Pathname.html#method-i-root-3F","()","<p>#root? is a predicate for root directories.  I.e. it returns\n<code>true</code> if the pathname consists of consecutive …\n"],["setgid?","Pathname","Pathname.html#method-i-setgid-3F","()","<p>See <code>FileTest.setgid?</code>.\n"],["setuid?","Pathname","Pathname.html#method-i-setuid-3F","()","<p>See <code>FileTest.setuid?</code>.\n"],["size","Pathname","Pathname.html#method-i-size","()","<p>See <code>FileTest.size</code>.\n"],["size?","Pathname","Pathname.html#method-i-size-3F","()","<p>See <code>FileTest.size?</code>.\n"],["socket?","Pathname","Pathname.html#method-i-socket-3F","()","<p>See <code>FileTest.socket?</code>.\n"],["split","Pathname","Pathname.html#method-i-split","()","<p>See <code>File.split</code>.  Returns the #dirname and the #basename in an\nArray.\n"],["stat","Pathname","Pathname.html#method-i-stat","()","<p>See <code>File.stat</code>.  Returns a <code>File::Stat</code> object.\n"],["sticky?","Pathname","Pathname.html#method-i-sticky-3F","()","<p>See <code>FileTest.sticky?</code>.\n"],["sub","Pathname","Pathname.html#method-i-sub","(*args)","<p>Return a pathname which is substituted by String#sub.\n"],["sub_ext","Pathname","Pathname.html#method-i-sub_ext","(p1)","<p>Return a pathname which the extension of the basename is substituted by\n<em>repl</em>.\n<p>If self has no extension …\n"],["symlink?","Pathname","Pathname.html#method-i-symlink-3F","()","<p>See <code>FileTest.symlink?</code>.\n"],["sysopen","Pathname","Pathname.html#method-i-sysopen","(p1 = v1, p2 = v2)","<p>See <code>IO.sysopen</code>.\n"],["taint","Pathname","Pathname.html#method-i-taint","()",""],["to_path","Pathname","Pathname.html#method-i-to_path","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc.\n…\n"],["to_s","Pathname","Pathname.html#method-i-to_s","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc.\n…\n"],["truncate","Pathname","Pathname.html#method-i-truncate","(p1)","<p>See <code>File.truncate</code>.  Truncate the file to <code>length</code>\nbytes.\n"],["unlink","Pathname","Pathname.html#method-i-unlink","()","<p>Removes a file or directory, using <code>File.unlink</code> or\n<code>Dir.unlink</code> as necessary.\n"],["untaint","Pathname","Pathname.html#method-i-untaint","()",""],["utime","Pathname","Pathname.html#method-i-utime","(p1, p2)","<p>See <code>File.utime</code>.  Update the access and modification times.\n"],["world_readable?","Pathname","Pathname.html#method-i-world_readable-3F","()","<p>See <code>FileTest.world_readable?</code>.\n"],["world_writable?","Pathname","Pathname.html#method-i-world_writable-3F","()","<p>See <code>FileTest.world_writable?</code>.\n"],["writable?","Pathname","Pathname.html#method-i-writable-3F","()","<p>See <code>FileTest.writable?</code>.\n"],["writable_real?","Pathname","Pathname.html#method-i-writable_real-3F","()","<p>See <code>FileTest.writable_real?</code>.\n"],["zero?","Pathname","Pathname.html#method-i-zero-3F","()","<p>See <code>FileTest.zero?</code>.\n"]]}}