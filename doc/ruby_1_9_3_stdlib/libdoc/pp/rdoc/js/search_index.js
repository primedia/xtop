var search_data = {"index":{"searchIndex":["array","env","file","stat","hash","kernel","matchdata","object","pp","objectmixin","ppmethods","singleline","range","struct","check_inspect_key()","comma_breakable()","guard_inspect_key()","object_address_group()","object_group()","pop_inspect_key()","pp()","pp()","pp()","pp()","pp_hash()","pp_object()","pretty_inspect()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_inspect()","pretty_print_instance_variables()","push_inspect_key()","seplist()","singleline_pp()"],"longSearchIndex":["array","env","file","file::stat","hash","kernel","matchdata","object","pp","pp::objectmixin","pp::ppmethods","pp::singleline","range","struct","pp::ppmethods#check_inspect_key()","pp::ppmethods#comma_breakable()","pp::ppmethods#guard_inspect_key()","pp::ppmethods#object_address_group()","pp::ppmethods#object_group()","pp::ppmethods#pop_inspect_key()","kernel::pp()","kernel#pp()","pp::pp()","pp::ppmethods#pp()","pp::ppmethods#pp_hash()","pp::ppmethods#pp_object()","kernel#pretty_inspect()","array#pretty_print()","env#pretty_print()","file::stat#pretty_print()","hash#pretty_print()","matchdata#pretty_print()","object#pretty_print()","pp::objectmixin#pretty_print()","range#pretty_print()","struct#pretty_print()","array#pretty_print_cycle()","hash#pretty_print_cycle()","object#pretty_print_cycle()","pp::objectmixin#pretty_print_cycle()","struct#pretty_print_cycle()","pp::objectmixin#pretty_print_inspect()","pp::objectmixin#pretty_print_instance_variables()","pp::ppmethods#push_inspect_key()","pp::ppmethods#seplist()","pp::singleline_pp()"],"info":[["Array","","Array.html","",""],["ENV","","ENV.html","",""],["File","","File.html","",""],["File::Stat","","File/Stat.html","",""],["Hash","","Hash.html","",""],["Kernel","","Kernel.html","",""],["MatchData","","MatchData.html","",""],["Object","","Object.html","",""],["PP","","PP.html","",""],["PP::ObjectMixin","","PP/ObjectMixin.html","",""],["PP::PPMethods","","PP/PPMethods.html","",""],["PP::SingleLine","","PP/SingleLine.html","",""],["Range","","Range.html","",""],["Struct","","Struct.html","",""],["check_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-check_inspect_key","(id)",""],["comma_breakable","PP::PPMethods","PP/PPMethods.html#method-i-comma_breakable","()","<p>A convenience method which is same as follows:\n\n<pre>text ','\nbreakable</pre>\n"],["guard_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-guard_inspect_key","()",""],["object_address_group","PP::PPMethods","PP/PPMethods.html#method-i-object_address_group","(obj, &block)",""],["object_group","PP::PPMethods","PP/PPMethods.html#method-i-object_group","(obj)","<p>A convenience method which is same as follows:\n\n<pre>group(1, '#&lt;' + obj.class.name, '&gt;') { ... }</pre>\n"],["pop_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-pop_inspect_key","(id)",""],["pp","Kernel","Kernel.html#method-c-pp","(*objs)","<p>prints arguments in pretty form.\n<p>pp returns argument(s).\n"],["pp","Kernel","Kernel.html#method-i-pp","(*objs)","<p>prints arguments in pretty form.\n<p>pp returns argument(s).\n"],["pp","PP","PP.html#method-c-pp","(obj, out=$>, width=79)","<p>Outputs <code>obj</code> to <code>out</code> in pretty printed format of\n<code>width</code> columns in width.\n<p>If <code>out</code> is omitted, +$&gt;+ is assumed. …\n"],["pp","PP::PPMethods","PP/PPMethods.html#method-i-pp","(obj)","<p>Adds <code>obj</code> to the pretty printing buffer using\nObject#pretty_print or Object#pretty_print_cycle.\n<p>Object#pretty_print_cycle …\n"],["pp_hash","PP::PPMethods","PP/PPMethods.html#method-i-pp_hash","(obj)",""],["pp_object","PP::PPMethods","PP/PPMethods.html#method-i-pp_object","(obj)",""],["pretty_inspect","Kernel","Kernel.html#method-i-pretty_inspect","()","<p>returns a pretty printed object as a string.\n"],["pretty_print","Array","Array.html#method-i-pretty_print","(q)",""],["pretty_print","ENV","ENV.html#method-i-pretty_print","(q)",""],["pretty_print","File::Stat","File/Stat.html#method-i-pretty_print","(q)",""],["pretty_print","Hash","Hash.html#method-i-pretty_print","(q)",""],["pretty_print","MatchData","MatchData.html#method-i-pretty_print","(q)",""],["pretty_print","Object","Object.html#method-i-pretty_print","(q)",""],["pretty_print","PP::ObjectMixin","PP/ObjectMixin.html#method-i-pretty_print","(q)","<p>A default pretty printing method for general objects. It calls\n#pretty_print_instance_variables to list …\n"],["pretty_print","Range","Range.html#method-i-pretty_print","(q)",""],["pretty_print","Struct","Struct.html#method-i-pretty_print","(q)",""],["pretty_print_cycle","Array","Array.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_cycle","Hash","Hash.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_cycle","Object","Object.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_cycle","PP::ObjectMixin","PP/ObjectMixin.html#method-i-pretty_print_cycle","(q)","<p>A default pretty printing method for general objects that are detected as\npart of a cycle.\n"],["pretty_print_cycle","Struct","Struct.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_inspect","PP::ObjectMixin","PP/ObjectMixin.html#method-i-pretty_print_inspect","()","<p>Is #inspect implementation using #pretty_print. If you implement\n#pretty_print, it can be used as follows. …\n"],["pretty_print_instance_variables","PP::ObjectMixin","PP/ObjectMixin.html#method-i-pretty_print_instance_variables","()","<p>Returns a sorted array of instance variable names.\n<p>This method should return an array of names of instance …\n"],["push_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-push_inspect_key","(id)",""],["seplist","PP::PPMethods","PP/PPMethods.html#method-i-seplist","(list, sep=nil, iter_method=:each)","<p>Adds a separated list. The list is separated by comma with breakable space,\nby default.\n<p>#seplist iterates …\n"],["singleline_pp","PP","PP.html#method-c-singleline_pp","(obj, out=$>)","<p>Outputs <code>obj</code> to <code>out</code> like PP.pp but with no indent\nand newline.\n<p>PP.singleline_pp returns <code>out</code>.\n"]]}}