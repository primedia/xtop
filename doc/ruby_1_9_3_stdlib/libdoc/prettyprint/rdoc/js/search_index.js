var search_data = {"index":{"searchIndex":["prettyprint","breakable","group","groupqueue","singleline","text","add()","break()","break?()","break_outmost_groups()","breakable()","breakable()","current_group()","delete()","deq()","enq()","fill_breakable()","first?()","first?()","first?()","flush()","flush()","format()","group()","group()","group_sub()","nest()","nest()","new()","new()","new()","new()","new()","new()","output()","output()","singleline_format()","text()","text()"],"longSearchIndex":["prettyprint","prettyprint::breakable","prettyprint::group","prettyprint::groupqueue","prettyprint::singleline","prettyprint::text","prettyprint::text#add()","prettyprint::group#break()","prettyprint::group#break?()","prettyprint#break_outmost_groups()","prettyprint#breakable()","prettyprint::singleline#breakable()","prettyprint#current_group()","prettyprint::groupqueue#delete()","prettyprint::groupqueue#deq()","prettyprint::groupqueue#enq()","prettyprint#fill_breakable()","prettyprint#first?()","prettyprint::group#first?()","prettyprint::singleline#first?()","prettyprint#flush()","prettyprint::singleline#flush()","prettyprint::format()","prettyprint#group()","prettyprint::singleline#group()","prettyprint#group_sub()","prettyprint#nest()","prettyprint::singleline#nest()","prettyprint::new()","prettyprint::breakable::new()","prettyprint::group::new()","prettyprint::groupqueue::new()","prettyprint::singleline::new()","prettyprint::text::new()","prettyprint::breakable#output()","prettyprint::text#output()","prettyprint::singleline_format()","prettyprint#text()","prettyprint::singleline#text()"],"info":[["PrettyPrint","","PrettyPrint.html","","<p>This class implements a pretty printing algorithm. It finds line breaks and\nnice indentations for grouped …\n"],["PrettyPrint::Breakable","","PrettyPrint/Breakable.html","",""],["PrettyPrint::Group","","PrettyPrint/Group.html","",""],["PrettyPrint::GroupQueue","","PrettyPrint/GroupQueue.html","",""],["PrettyPrint::SingleLine","","PrettyPrint/SingleLine.html","",""],["PrettyPrint::Text","","PrettyPrint/Text.html","",""],["add","PrettyPrint::Text","PrettyPrint/Text.html#method-i-add","(obj, width)",""],["break","PrettyPrint::Group","PrettyPrint/Group.html#method-i-break","()",""],["break?","PrettyPrint::Group","PrettyPrint/Group.html#method-i-break-3F","()",""],["break_outmost_groups","PrettyPrint","PrettyPrint.html#method-i-break_outmost_groups","()","<p>Breaks the buffer into lines that are shorter than #maxwidth\n"],["breakable","PrettyPrint","PrettyPrint.html#method-i-breakable","(sep=' ', width=sep.length)","<p>This says “you can break a line here if necessary”, and a\n<code>width</code>-column text <code>sep</code> is inserted …\n"],["breakable","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-breakable","(sep=' ', width=nil)",""],["current_group","PrettyPrint","PrettyPrint.html#method-i-current_group","()","<p>Returns the group most recently added to the stack.\n"],["delete","PrettyPrint::GroupQueue","PrettyPrint/GroupQueue.html#method-i-delete","(group)",""],["deq","PrettyPrint::GroupQueue","PrettyPrint/GroupQueue.html#method-i-deq","()",""],["enq","PrettyPrint::GroupQueue","PrettyPrint/GroupQueue.html#method-i-enq","(group)",""],["fill_breakable","PrettyPrint","PrettyPrint.html#method-i-fill_breakable","(sep=' ', width=sep.length)","<p>This is similar to #breakable except the decision to break or not is\ndetermined individually.\n<p>Two #fill_breakable …\n"],["first?","PrettyPrint","PrettyPrint.html#method-i-first-3F","()","<p>first? is a predicate to test the call is a first call to first? with\ncurrent group.\n<p>It is useful to format …\n"],["first?","PrettyPrint::Group","PrettyPrint/Group.html#method-i-first-3F","()",""],["first?","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-first-3F","()",""],["flush","PrettyPrint","PrettyPrint.html#method-i-flush","()","<p>outputs buffered data.\n"],["flush","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-flush","()",""],["format","PrettyPrint","PrettyPrint.html#method-c-format","(output='', maxwidth=79, newline=\"\\n\", genspace=lambda {|n| ' ' * n})","<p>This is a convenience method which is same as follows:\n\n<pre>begin\n  q = PrettyPrint.new(output, maxwidth, newline, ...</pre>\n"],["group","PrettyPrint","PrettyPrint.html#method-i-group","(indent=0, open_obj='', close_obj='', open_width=open_obj.length, close_width=close_obj.length)","<p>Groups line break hints added in the block. The line break hints are all to\nbe used or not.\n<p>If <code>indent</code> …\n"],["group","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-group","(indent=nil, open_obj='', close_obj='', open_width=nil, close_width=nil)",""],["group_sub","PrettyPrint","PrettyPrint.html#method-i-group_sub","()",""],["nest","PrettyPrint","PrettyPrint.html#method-i-nest","(indent)","<p>Increases left margin after newline with <code>indent</code> for line\nbreaks added in the block.\n"],["nest","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-nest","(indent)",""],["new","PrettyPrint","PrettyPrint.html#method-c-new","(output='', maxwidth=79, newline=\"\\n\", &genspace)","<p>Creates a buffer for pretty printing.\n<p><code>output</code> is an output target. If it is not specified, \" is\nassumed. ...\n"],["new","PrettyPrint::Breakable","PrettyPrint/Breakable.html#method-c-new","(sep, width, q)",""],["new","PrettyPrint::Group","PrettyPrint/Group.html#method-c-new","(depth)",""],["new","PrettyPrint::GroupQueue","PrettyPrint/GroupQueue.html#method-c-new","(*groups)",""],["new","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-c-new","(output, maxwidth=nil, newline=nil)",""],["new","PrettyPrint::Text","PrettyPrint/Text.html#method-c-new","()",""],["output","PrettyPrint::Breakable","PrettyPrint/Breakable.html#method-i-output","(out, output_width)",""],["output","PrettyPrint::Text","PrettyPrint/Text.html#method-i-output","(out, output_width)",""],["singleline_format","PrettyPrint","PrettyPrint.html#method-c-singleline_format","(output='', maxwidth=nil, newline=nil, genspace=nil)","<p>This is similar to PrettyPrint::format but the result has no breaks.\n<p><code>maxwidth</code>, <code>newline</code> and <code>genspace</code> are\n...\n"],["text","PrettyPrint","PrettyPrint.html#method-i-text","(obj, width=obj.length)","<p>This adds <code>obj</code> as a text of <code>width</code> columns in\nwidth.\n<p>If <code>width</code> is not specified, obj.length is used.\n"],["text","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-text","(obj, width=nil)",""]]}}