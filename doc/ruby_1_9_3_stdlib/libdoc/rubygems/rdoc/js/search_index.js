var search_data = {"index":{"searchIndex":["cache","date","gem","builder","command","commandlineerror","commandmanager","commands","buildcommand","certcommand","checkcommand","cleanupcommand","contentscommand","dependencycommand","environmentcommand","fetchcommand","generateindexcommand","helpcommand","installcommand","listcommand","lockcommand","outdatedcommand","ownercommand","pristinecommand","pushcommand","querycommand","rdoccommand","searchcommand","servercommand","setupcommand","sourcescommand","specificationcommand","stalecommand","uninstallcommand","unpackcommand","updatecommand","whichcommand","configfile","consoleui","defaultuserinteraction","dependency","dependencyerror","dependencyinstaller","dependencylist","dependencyremovalexception","deprecate","docmanager","documenterror","endofyamlexception","errorreason","exception","ext","builder","configurebuilder","extconfbuilder","rakebuilder","fakefetcher","filepermissionerror","format","formatexception","gemnotfoundexception","gemnotinhomeexception","gempathsearcher","gemrunner","gemcutterutilities","indexer","installerror","installupdateoptions","installer","extensionbuilderror","installertestcase","invalidspecificationexception","loaderror","localremoteoptions","mockgemui","systemexitexception","tty","termerror","noaliasyamltree","oldformat","operationnotsupportederror","package","badchecksum","closedio","error","fsyncdir","formaterror","nonseekableio","tarheader","tarinput","tarinvaliderror","taroutput","tarreader","entry","unexpectedeof","tartestcase","tarwriter","boundedstream","fileoverflow","restrictedstream","toolongfilename","packagetask","pathsupport","platform","platformmismatch","rbconfig","remoteerror","remotefetcher","fetcherror","remoteinstallationcancelled","remoteinstallationskipped","remotesourceexception","requirepathsbuilder","requirement","ssl","security","exception","policy","signer","server","silentui","sourceindex","specfetcher","specification","streamui","silentdownloadreporter","silentprogressreporter","simpleprogressreporter","verbosedownloadreporter","verboseprogressreporter","systemexitexception","testcase","text","uninstaller","userinteraction","validator","verificationerror","versionoption","kernel","object","openssl","digest","x509","certificate","psych","privatetype","rbconfig","tempio","version","requirement","yaml","syck","defaultkey","<=>()","<=>()","==()","===()","===()","===()","=~()","=~()","=~()","=~()","asciiz()","marshal()","sp()","sp_z()","z()","[]()","[]()","[]=()","_dump()","_load()","abbreviate()","accept_uri_http()","activate()","activate()","activate_dependencies()","add()","add_bindir()","add_bulk_threshold_option()","add_clear_sources_option()","add_common_option()","add_date()","add_dependency()","add_development_dependency()","add_extra_args()","add_file()","add_file_simple()","add_found_dependencies()","add_gem_contents()","add_install_update_options()","add_key_option()","add_local_remote_options()","add_metadata()","add_option()","add_owners()","add_platform()","add_platform_option()","add_prerelease_option()","add_proxy_option()","add_rubygems_trusted_certs()","add_runtime_dependency()","add_self_to_load_path()","add_signatures()","add_source_option()","add_spec()","add_spec()","add_spec()","add_specific_extra_args()","add_specs()","add_specs()","add_specs()","add_trusted_cert()","add_update_sources_option()","add_version_option()","alert()","alert()","alert_error()","alert_error()","alert_warning()","alert_warning()","alien()","all()","all=()","all_gems()","all_gems()","all_load_paths()","all_names()","all_spec_names()","api_key()","app_script_text()","arguments()","array_attributes()","ask()","ask()","ask_for_password()","ask_for_password()","ask_for_password_on_unix()","ask_for_password_on_windows()","ask_if_ok()","ask_yes_no()","ask_yes_no()","assert_headers_equal()","assert_path_exists()","attribute_names()","author()","author=()","authors()","authors=()","available?()","backtrace()","base_dir()","begins?()","bin_dir()","bin_file()","bin_path()","binary_mode()","bindir()","both?()","build()","build()","build()","build()","build_args()","build_args=()","build_cert()","build_extensions()","build_indicies()","build_legacy_indicies()","build_marshal_gemspecs()","build_modern_index()","build_modern_indicies()","build_rake_in()","build_rss()","build_self_signed_cert()","bump()","bytes_read()","cache_dir()","cache_dir()","cache_dir()","cache_file()","cache_gem()","cache_gem()","calc_checksum()","check_closed()","check_ruby_version()","check_that_user_bin_dir_is_in_path()","choose_from_list()","choose_from_list()","class_name()","clear()","clear_paths()","close()","close()","close()","close()","close()","closed?()","closed?()","collect_specs()","command_names()","common_options()","compact_specs()","complain()","compress()","compress_indicies()","config_file()","config_file_name()","configuration()","configuration=()","configure_connection_for_https()","configured_args()","configured_args=()","conflicts()","connection_for()","contains_requirable_file?()","correct?()","correct_for_windows_path()","create()","create()","create()","create_tmpdir()","credentials_path()","datadir()","date()","date=()","debug()","default()","default()","default_bindir()","default_dir()","default_exec_format()","default_executable()","default_path()","default_rubygems_dirs()","default_sources()","default_system_source_cache_dir()","default_user_source_cache_dir()","default_value()","defaults_str()","defaults_str()","define()","deflate()","dep()","dependencies()","dependencies_ok?()","dependency_order()","dependent_gems()","dependent_specs()","deprecate()","description()","description=()","development_dependencies()","dir()","dir()","directory?()","dirs()","dirs=()","doc_dir()","done()","done()","done()","done()","done()","download()","download()","download_reporter()","download_reporter()","download_to_cache()","download_to_cache()","dump()","dump()","each()","each()","each()","each()","each()","each()","each()","each_entry()","email_to_name()","empty?()","empty?()","ensure_dependencies_met()","ensure_dependency()","ensure_gem_subdirectories()","ensure_required_ruby_version_met()","ensure_required_rubygems_version_met()","ensure_ssl_available()","eof?()","eql?()","eql?()","error()","escape()","exec_format()","executable()","executable=()","executables()","executables=()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","extensions()","extensions=()","extra_args()","extra_args=()","extra_rdoc_files()","extra_rdoc_files=()","extract_entry()","extract_files()","fetch()","fetch()","fetch()","fetch_file()","fetch_http()","fetch_https()","fetch_path()","fetch_path()","fetch_size()","fetch_size()","fetch_spec()","fetch_with_errors()","fetcher()","fetcher()","fetcher=()","file?()","file_name()","files()","files=()","find()","find_active()","find_all()","find_all_by_name()","find_by_name()","find_by_path()","find_command()","find_command_possibilities()","find_data()","find_files()","find_gems_with_sources()","find_in_cache()","find_in_unresolved()","find_in_unresolved()","find_in_unresolved_tree()","find_in_unresolved_tree()","find_matching()","find_matching_with_errors()","find_name()","find_name()","find_name()","find_paths()","find_reverse_dependencies()","find_spec_by_name_and_version()","find_spec_for_file()","flush()","for_cache()","format()","format_text()","formatted_program_filename()","formatted_program_filename()","from()","from_file_by_path()","from_file_by_path()","from_gems_in()","from_gems_in()","from_installed_gems()","from_installed_gems()","from_io()","from_io()","from_source_index()","from_specs()","from_yaml()","full_gem_path()","full_name()","full_name()","gather_dependencies()","gem()","gem_dir()","gem_dir()","gem_file_list()","gem_original_require()","gem_paths()","gem_signature()","gem_signature()","gems_dir()","generate_bin()","generate_bin_script()","generate_bin_symlink()","generate_default_dirs()","generate_index()","generate_rdoc()","generate_ri()","generate_windows_script()","get_all_gem_names()","get_metadata()","get_one_gem_name()","get_one_optional_argument()","get_path()","get_proxy_from_env()","getc()","gunzip()","gzip()","gzip()","handle_arguments()","handle_options()","handles?()","has_rdoc()","has_rdoc=()","has_rdoc?()","has_unit_tests?()","header()","host()","host=()","https?()","index_signature()","index_signature()","inflate()","init()","init_gemspecs()","initialize_copy()","input()","inspect()","install()","install()","install_executables()","install_gem()","install_gem_user()","install_indicies()","install_lib()","install_rdoc()","install_rdoc()","install_ri()","install_specs()","install_update_defaults_str()","installation_path()","installation_satisfies_dependency?()","installed_spec_directories()","installed_spec_directories()","instance()","invoke()","latest_load_paths()","latest_rubygems_version()","latest_spec_for()","latest_specs()","latest_specs()","latest_specs()","latest_specs()","latest_version_for()","launch()","length()","length()","levenshtein_distance()","lib_dirs_for()","lib_dirs_glob()","lib_files()","license()","license=()","licenses()","licenses=()","list()","listen()","load()","load_api_keys()","load_env_plugins()","load_file()","load_gems_in()","load_gems_in()","load_gemspec()","load_gemspec()","load_path_insert_index()","load_plugin_files()","load_plugins()","load_rdoc()","load_specification()","load_specification()","load_specs()","load_yaml()","loaded_from=()","loaded_path?()","local()","local?()","location_of_caller()","make()","make_command()","make_command()","make_destination_dirs()","make_temp_directories()","manage_owners()","map_gems_to_specs()","mark_version()","marshal_dump()","marshal_load()","marshal_version()","match()","match?()","matches_for_glob()","matches_spec?()","matching_file?()","matching_files()","matching_paths()","matching_specs()","merge()","merge_options()","mkdir()","mu_pp()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_spec()","nmake_found?()","noecho()","non_nil_attributes()","none?()","none?()","normalize()","normalize_uri()","normalize_yaml_input()","ok?()","ok_to_remove?()","open()","open()","open()","open_uri_or_path()","open_uri_or_path()","outdated()","outdated()","outdated()","output()","pack()","paranoid()","parse()","parse()","path()","path_ok?()","paths()","paths=()","platform()","platform=()","platforms()","platforms=()","pos()","post_build()","post_install()","post_reset()","post_uninstall()","pre_install()","pre_reset()","pre_uninstall()","prefix()","prerelease?()","prerelease?()","prerelease?()","prerelease?()","prerelease_gems()","prerelease_gems()","prerelease_specs()","prerelease_specs()","print_dependencies()","process_args()","process_based_port()","process_based_port()","process_options()","progress_reporter()","progress_reporter()","promote_load_path()","quick()","quick_gem()","quick_spec()","raise_if_conflicts()","rdoc()","rdoc_installed?()","rdoc_options()","rdoc_options=()","rdoc_version()","read()","read_binary()","read_binary()","read_cache()","really_verbose()","redirector()","refresh()","refresh!()","refresh!()","refute_path_exists()","register()","register_command()","release()","released_gems()","released_gems()","released_specs()","released_specs()","remote?()","remove()","remove_all()","remove_by_name()","remove_executables()","remove_leading_dot_dir()","remove_old_bin_files()","remove_option()","remove_owners()","remove_spec()","remove_spec()","remove_spec()","remove_specs_unsatisfied_by()","req()","request()","request()","require_path()","require_path=()","required_attribute?()","required_attributes()","required_location()","required_ruby_version=()","required_rubygems_version=()","requirement()","requirements()","requirements=()","requirements_list()","reset()","reset()","reset()","rewind()","rewind()","ri_dir()","ri_installed?()","root()","ruby()","ruby=()","ruby_engine()","ruby_version()","rubybin()","rubygems_api_key=()","rubygems_api_request()","run()","run()","run()","run()","run()","run_rdoc()","run_rdoc()","runtime_dependencies()","sanitize()","sanitize_string()","satisfied_by?()","satisfied_by?()","satisfies_requirement?()","say()","say()","search()","search()","searcher()","searcher=()","send_gem()","setup()","setup()","setup_rdoc()","shebang()","show_help()","show_lookup_failure()","show_owners()","show_rdoc_for_pattern()","sign()","sign_cert()","sign_in()","size()","size()","skip_during()","sort_obj()","source_index()","source_index=()","sources()","sources=()","spec()","spec()","spec_dir()","spec_file()","spec_name()","spec_path()","spec_predecessors()","specific?()","specific?()","specific?()","specific_extra_args()","specific_extra_args_hash()","specification()","specification()","specs()","spermy_recommendation()","ssl_available?()","string()","success()","suffix_pattern()","suffixes()","suggest_gems_from_name()","summary=()","tar_dir_header()","tar_file_header()","teardown()","terminate_interaction()","terminate_interaction()","terminate_interaction()","terminated?()","test_file()","test_file=()","test_files()","test_files=()","time()","to_a()","to_oct()","to_ruby()","to_ruby_for_cache()","to_s()","to_spec()","to_specs()","traverse()","trusted_cert_path()","try_activate()","tsort_each_child()","tsort_each_node()","tty?()","tty?()","type()","ui()","ui()","ui()","ui=()","ui=()","unescape()","uninstall()","uninstall_doc()","uninstall_gem()","uninstall_gem()","uninstall_old_gemcutter()","unpack()","unregister_command()","unresolved_deps()","update()","update()","update_checksum()","update_gem()","update_gems()","update_index()","update_ri_cache()","update_rubygems()","update_specs_index()","updated()","updated()","updated()","uri_escaper()","usage()","use_paths()","use_ui()","use_ui()","user_agent()","user_dir()","user_home()","util_build_gem()","util_clear_gems()","util_dir_entry()","util_entry()","util_gem()","util_gem_bindir()","util_gem_dir()","util_gzip()","util_inst_bindir()","util_installer()","util_make_exec()","util_make_gems()","util_set_arch()","util_setup_fake_fetcher()","util_setup_gem()","util_setup_spec_fetcher()","util_spec()","util_zip()","v()","validate()","vc_windows?()","vc_windows?()","verify_api_key()","verify_gem()","verify_gem()","verify_gem_file()","verify_gem_home()","verify_trust_dir()","version=()","visit_string()","when_invoked()","which_to_update()","why_not_ok?()","win_platform=()","win_platform?()","win_platform?()","win_platform?()","windows_stub_script()","with_response()","wordy()","wrap()","write()","write()","write()","write_file()","write_require_paths_file_if_needed()","write_spec()","yaml?()","yaml_initialize()","zipped_stream()"],"longSearchIndex":["cache","date","gem","gem::builder","gem::command","gem::commandlineerror","gem::commandmanager","gem::commands","gem::commands::buildcommand","gem::commands::certcommand","gem::commands::checkcommand","gem::commands::cleanupcommand","gem::commands::contentscommand","gem::commands::dependencycommand","gem::commands::environmentcommand","gem::commands::fetchcommand","gem::commands::generateindexcommand","gem::commands::helpcommand","gem::commands::installcommand","gem::commands::listcommand","gem::commands::lockcommand","gem::commands::outdatedcommand","gem::commands::ownercommand","gem::commands::pristinecommand","gem::commands::pushcommand","gem::commands::querycommand","gem::commands::rdoccommand","gem::commands::searchcommand","gem::commands::servercommand","gem::commands::setupcommand","gem::commands::sourcescommand","gem::commands::specificationcommand","gem::commands::stalecommand","gem::commands::uninstallcommand","gem::commands::unpackcommand","gem::commands::updatecommand","gem::commands::whichcommand","gem::configfile","gem::consoleui","gem::defaultuserinteraction","gem::dependency","gem::dependencyerror","gem::dependencyinstaller","gem::dependencylist","gem::dependencyremovalexception","gem::deprecate","gem::docmanager","gem::documenterror","gem::endofyamlexception","gem::errorreason","gem::exception","gem::ext","gem::ext::builder","gem::ext::configurebuilder","gem::ext::extconfbuilder","gem::ext::rakebuilder","gem::fakefetcher","gem::filepermissionerror","gem::format","gem::formatexception","gem::gemnotfoundexception","gem::gemnotinhomeexception","gem::gempathsearcher","gem::gemrunner","gem::gemcutterutilities","gem::indexer","gem::installerror","gem::installupdateoptions","gem::installer","gem::installer::extensionbuilderror","gem::installertestcase","gem::invalidspecificationexception","gem::loaderror","gem::localremoteoptions","gem::mockgemui","gem::mockgemui::systemexitexception","gem::mockgemui::tty","gem::mockgemui::termerror","gem::noaliasyamltree","gem::oldformat","gem::operationnotsupportederror","gem::package","gem::package::badchecksum","gem::package::closedio","gem::package::error","gem::package::fsyncdir","gem::package::formaterror","gem::package::nonseekableio","gem::package::tarheader","gem::package::tarinput","gem::package::tarinvaliderror","gem::package::taroutput","gem::package::tarreader","gem::package::tarreader::entry","gem::package::tarreader::unexpectedeof","gem::package::tartestcase","gem::package::tarwriter","gem::package::tarwriter::boundedstream","gem::package::tarwriter::fileoverflow","gem::package::tarwriter::restrictedstream","gem::package::toolongfilename","gem::packagetask","gem::pathsupport","gem::platform","gem::platformmismatch","gem::rbconfig","gem::remoteerror","gem::remotefetcher","gem::remotefetcher::fetcherror","gem::remoteinstallationcancelled","gem::remoteinstallationskipped","gem::remotesourceexception","gem::requirepathsbuilder","gem::requirement","gem::ssl","gem::security","gem::security::exception","gem::security::policy","gem::security::signer","gem::server","gem::silentui","gem::sourceindex","gem::specfetcher","gem::specification","gem::streamui","gem::streamui::silentdownloadreporter","gem::streamui::silentprogressreporter","gem::streamui::simpleprogressreporter","gem::streamui::verbosedownloadreporter","gem::streamui::verboseprogressreporter","gem::systemexitexception","gem::testcase","gem::text","gem::uninstaller","gem::userinteraction","gem::validator","gem::verificationerror","gem::versionoption","kernel","object","openssl","openssl::digest","openssl::x509","openssl::x509::certificate","psych","psych::privatetype","rbconfig","tempio","version","version::requirement","yaml","yaml::syck","yaml::syck::defaultkey","gem::dependency#<=>()","version#<=>()","gem::platform#==()","gem::platform#===()","gem::requirement#===()","gem::requirement#===()","gem::dependency#=~()","gem::platform#=~()","gem::requirement#=~()","gem::requirement#=~()","gem::package::tartestcase#asciiz()","gem::server#marshal()","gem::package::tartestcase#sp()","gem::package::tartestcase#sp_z()","gem::package::tartestcase#z()","gem::commandmanager#[]()","gem::configfile#[]()","gem::configfile#[]=()","gem::specification#_dump()","gem::specification::_load()","gem::indexer#abbreviate()","gem::localremoteoptions#accept_uri_http()","gem::activate()","gem::specification#activate()","gem::specification#activate_dependencies()","gem::dependencylist#add()","gem::specification#add_bindir()","gem::localremoteoptions#add_bulk_threshold_option()","gem::localremoteoptions#add_clear_sources_option()","gem::command::add_common_option()","gem::server#add_date()","gem::specification#add_dependency()","gem::specification#add_development_dependency()","gem::command#add_extra_args()","gem::package::tarwriter#add_file()","gem::package::tarwriter#add_file_simple()","gem::dependencyinstaller#add_found_dependencies()","gem::package::taroutput#add_gem_contents()","gem::installupdateoptions#add_install_update_options()","gem::gemcutterutilities#add_key_option()","gem::localremoteoptions#add_local_remote_options()","gem::package::taroutput#add_metadata()","gem::command#add_option()","gem::commands::ownercommand#add_owners()","gem::platformmismatch#add_platform()","gem::versionoption#add_platform_option()","gem::versionoption#add_prerelease_option()","gem::localremoteoptions#add_proxy_option()","gem::remotefetcher#add_rubygems_trusted_certs()","gem::specification#add_runtime_dependency()","gem::specification#add_self_to_load_path()","gem::package::taroutput#add_signatures()","gem::localremoteoptions#add_source_option()","gem::sourceindex#add_spec()","gem::sourceindex#add_spec()","gem::specification::add_spec()","gem::command::add_specific_extra_args()","gem::sourceindex#add_specs()","gem::sourceindex#add_specs()","gem::specification::add_specs()","gem::security::add_trusted_cert()","gem::localremoteoptions#add_update_sources_option()","gem::versionoption#add_version_option()","gem::streamui#alert()","gem::userinteraction#alert()","gem::streamui#alert_error()","gem::userinteraction#alert_error()","gem::streamui#alert_warning()","gem::userinteraction#alert_warning()","gem::validator#alien()","gem::specification::all()","gem::specification::all=()","gem::sourceindex#all_gems()","gem::sourceindex#all_gems()","gem::all_load_paths()","gem::specification::all_names()","gem::testcase#all_spec_names()","gem::gemcutterutilities#api_key()","gem::installer#app_script_text()","gem::command#arguments()","gem::specification::array_attributes()","gem::streamui#ask()","gem::userinteraction#ask()","gem::streamui#ask_for_password()","gem::userinteraction#ask_for_password()","gem::streamui#ask_for_password_on_unix()","gem::streamui#ask_for_password_on_windows()","gem::uninstaller#ask_if_ok()","gem::streamui#ask_yes_no()","gem::userinteraction#ask_yes_no()","gem::package::tartestcase#assert_headers_equal()","gem::testcase#assert_path_exists()","gem::specification::attribute_names()","gem::specification#author()","gem::specification#author=()","gem::specification#authors()","gem::specification#authors=()","gem::available?()","gem::configfile#backtrace()","gem::specification#base_dir()","gem::command#begins?()","gem::specification#bin_dir()","gem::specification#bin_file()","gem::bin_path()","gem::binary_mode()","gem::bindir()","gem::localremoteoptions#both?()","gem::builder#build()","gem::ext::configurebuilder::build()","gem::ext::extconfbuilder::build()","gem::ext::rakebuilder::build()","gem::command::build_args()","gem::command::build_args=()","gem::security::build_cert()","gem::installer#build_extensions()","gem::indexer#build_indicies()","gem::indexer#build_legacy_indicies()","gem::indexer#build_marshal_gemspecs()","gem::indexer#build_modern_index()","gem::indexer#build_modern_indicies()","gem::testcase#build_rake_in()","gem::indexer#build_rss()","gem::security::build_self_signed_cert()","version#bump()","gem::package::tarreader::entry#bytes_read()","gem::cache_dir()","gem::specfetcher#cache_dir()","gem::specification#cache_dir()","gem::specification#cache_file()","gem::cache_gem()","gem::specification#cache_gem()","gem::package::tartestcase#calc_checksum()","gem::package::tarwriter#check_closed()","gem::commands::setupcommand#check_ruby_version()","gem::installer#check_that_user_bin_dir_is_in_path()","gem::streamui#choose_from_list()","gem::userinteraction#choose_from_list()","gem::ext::builder::class_name()","gem::dependencylist#clear()","gem::clear_paths()","gem::package::tarinput#close()","gem::package::taroutput#close()","gem::package::tarreader#close()","gem::package::tarreader::entry#close()","gem::package::tarwriter#close()","gem::package::tarreader::entry#closed?()","gem::package::tarwriter#closed?()","gem::indexer#collect_specs()","gem::commandmanager#command_names()","gem::command::common_options()","gem::indexer#compact_specs()","gem::commands::lockcommand#complain()","gem::indexer#compress()","gem::indexer#compress_indicies()","gem::config_file()","gem::configfile#config_file_name()","gem::configuration()","gem::configuration=()","gem::remotefetcher#configure_connection_for_https()","gem::docmanager::configured_args()","gem::docmanager::configured_args=()","gem::specification#conflicts()","gem::remotefetcher#connection_for()","gem::specification#contains_requirable_file?()","version::correct?()","gem::remotefetcher#correct_for_windows_path()","gem::requirement::create()","gem::requirement::create()","version::create()","gem::testcase#create_tmpdir()","gem::configfile#credentials_path()","gem::datadir()","gem::specification#date()","gem::specification#date=()","gem::streamui#debug()","gem::requirement::default()","gem::requirement::default()","gem::default_bindir()","gem::default_dir()","gem::default_exec_format()","gem::specification#default_executable()","gem::default_path()","gem::default_rubygems_dirs()","gem::default_sources()","gem::default_system_source_cache_dir()","gem::default_user_source_cache_dir()","gem::specification#default_value()","gem::command#defaults_str()","gem::commands::sourcescommand#defaults_str()","gem::packagetask#define()","gem::deflate()","gem::testcase#dep()","gem::specification#dependencies()","gem::uninstaller#dependencies_ok?()","gem::dependencylist#dependency_order()","gem::specification#dependent_gems()","gem::specification#dependent_specs()","gem::deprecate::deprecate()","gem::command#description()","gem::specification#description=()","gem::specification#development_dependencies()","gem::dir()","gem::installer#dir()","gem::package::tarreader::entry#directory?()","gem::specification::dirs()","gem::specification::dirs=()","gem::specification#doc_dir()","gem::streamui::silentdownloadreporter#done()","gem::streamui::silentprogressreporter#done()","gem::streamui::simpleprogressreporter#done()","gem::streamui::verbosedownloadreporter#done()","gem::streamui::verboseprogressreporter#done()","gem::fakefetcher#download()","gem::remotefetcher#download()","gem::silentui#download_reporter()","gem::streamui#download_reporter()","gem::fakefetcher#download_to_cache()","gem::remotefetcher#download_to_cache()","gem::sourceindex#dump()","gem::sourceindex#dump()","gem::configfile#each()","gem::dependencylist#each()","gem::package::tarinput#each()","gem::package::tarreader#each()","gem::sourceindex#each()","gem::sourceindex#each()","gem::specification::each()","gem::package::tarreader#each_entry()","gem::security::email_to_name()","gem::package::tarheader#empty?()","gem::platform#empty?()","gem::installer#ensure_dependencies_met()","gem::installer#ensure_dependency()","gem::ensure_gem_subdirectories()","gem::installer#ensure_required_ruby_version_met()","gem::installer#ensure_required_rubygems_version_met()","gem#ensure_ssl_available()","gem::package::tarreader::entry#eof?()","gem::platform#eql?()","version#eql?()","gem::mockgemui#error()","gem::remotefetcher#escape()","gem::installer#exec_format()","gem::specification#executable()","gem::specification#executable=()","gem::specification#executables()","gem::specification#executables=()","gem::command#execute()","gem::commands::buildcommand#execute()","gem::commands::certcommand#execute()","gem::commands::checkcommand#execute()","gem::commands::cleanupcommand#execute()","gem::commands::contentscommand#execute()","gem::commands::dependencycommand#execute()","gem::commands::environmentcommand#execute()","gem::commands::fetchcommand#execute()","gem::commands::generateindexcommand#execute()","gem::commands::helpcommand#execute()","gem::commands::installcommand#execute()","gem::commands::listcommand#execute()","gem::commands::lockcommand#execute()","gem::commands::outdatedcommand#execute()","gem::commands::ownercommand#execute()","gem::commands::pristinecommand#execute()","gem::commands::pushcommand#execute()","gem::commands::querycommand#execute()","gem::commands::rdoccommand#execute()","gem::commands::searchcommand#execute()","gem::commands::servercommand#execute()","gem::commands::setupcommand#execute()","gem::commands::sourcescommand#execute()","gem::commands::specificationcommand#execute()","gem::commands::stalecommand#execute()","gem::commands::uninstallcommand#execute()","gem::commands::unpackcommand#execute()","gem::commands::updatecommand#execute()","gem::commands::whichcommand#execute()","gem::specification#extensions()","gem::specification#extensions=()","gem::command::extra_args()","gem::command::extra_args=()","gem::specification#extra_rdoc_files()","gem::specification#extra_rdoc_files=()","gem::package::tarinput#extract_entry()","gem::installer#extract_files()","gem::specfetcher#fetch()","gem::streamui::silentdownloadreporter#fetch()","gem::streamui::verbosedownloadreporter#fetch()","gem::remotefetcher#fetch_file()","gem::remotefetcher#fetch_http()","gem::remotefetcher#fetch_https()","gem::fakefetcher#fetch_path()","gem::remotefetcher#fetch_path()","gem::fakefetcher#fetch_size()","gem::remotefetcher#fetch_size()","gem::specfetcher#fetch_spec()","gem::specfetcher#fetch_with_errors()","gem::remotefetcher::fetcher()","gem::specfetcher::fetcher()","gem::remotefetcher::fetcher=()","gem::package::tarreader::entry#file?()","gem::specification#file_name()","gem::specification#files()","gem::specification#files=()","gem::gempathsearcher#find()","gem::gempathsearcher#find_active()","gem::gempathsearcher#find_all()","gem::specification::find_all_by_name()","gem::specification::find_by_name()","gem::specification::find_by_path()","gem::commandmanager#find_command()","gem::commandmanager#find_command_possibilities()","gem::fakefetcher#find_data()","gem::find_files()","gem::dependencyinstaller#find_gems_with_sources()","gem::commands::unpackcommand#find_in_cache()","gem::gempathsearcher#find_in_unresolved()","gem::specification::find_in_unresolved()","gem::gempathsearcher#find_in_unresolved_tree()","gem::specification::find_in_unresolved_tree()","gem::specfetcher#find_matching()","gem::specfetcher#find_matching_with_errors()","gem::dependencylist#find_name()","gem::sourceindex#find_name()","gem::sourceindex#find_name()","gem::commands::whichcommand#find_paths()","gem::commands::dependencycommand#find_reverse_dependencies()","gem::dependencyinstaller#find_spec_by_name_and_version()","gem::gempathsearcher#find_spec_for_file()","gem::package::tarwriter#flush()","gem::specification#for_cache()","gem::installer#format()","gem::text#format_text()","gem::installer#formatted_program_filename()","gem::uninstaller#formatted_program_filename()","gem::package::tarheader::from()","gem::format::from_file_by_path()","gem::oldformat::from_file_by_path()","gem::sourceindex::from_gems_in()","gem::sourceindex::from_gems_in()","gem::sourceindex::from_installed_gems()","gem::sourceindex::from_installed_gems()","gem::format::from_io()","gem::oldformat::from_io()","gem::dependencylist::from_source_index()","gem::dependencylist::from_specs()","gem::specification::from_yaml()","gem::specification#full_gem_path()","gem::package::tarreader::entry#full_name()","gem::specification#full_name()","gem::dependencyinstaller#gather_dependencies()","kernel#gem()","gem::installer#gem_dir()","gem::specification#gem_dir()","gem::indexer#gem_file_list()","kernel#gem_original_require()","gem::commands::whichcommand#gem_paths()","gem::sourceindex#gem_signature()","gem::sourceindex#gem_signature()","gem::specification#gems_dir()","gem::installer#generate_bin()","gem::installer#generate_bin_script()","gem::installer#generate_bin_symlink()","gem::commands::setupcommand#generate_default_dirs()","gem::indexer#generate_index()","gem::docmanager#generate_rdoc()","gem::docmanager#generate_ri()","gem::installer#generate_windows_script()","gem::command#get_all_gem_names()","gem::commands::unpackcommand#get_metadata()","gem::command#get_one_gem_name()","gem::command#get_one_optional_argument()","gem::commands::unpackcommand#get_path()","gem::remotefetcher#get_proxy_from_env()","gem::package::tarreader::entry#getc()","gem::gunzip()","gem::gzip()","gem::indexer#gzip()","gem::configfile#handle_arguments()","gem::command#handle_options()","gem::command#handles?()","gem::specification#has_rdoc()","gem::specification#has_rdoc=()","gem::specification#has_rdoc?()","gem::specification#has_unit_tests?()","gem::package::tartestcase#header()","gem::host()","gem::host=()","gem::remotefetcher#https?()","gem::sourceindex#index_signature()","gem::sourceindex#index_signature()","gem::inflate()","gem::packagetask#init()","gem::gempathsearcher#init_gemspecs()","gem::specification#initialize_copy()","gem::mockgemui#input()","gem::platform#inspect()","gem::dependencyinstaller#install()","gem::installer#install()","gem::commands::setupcommand#install_executables()","gem::testcase#install_gem()","gem::testcase#install_gem_user()","gem::indexer#install_indicies()","gem::commands::setupcommand#install_lib()","gem::commands::setupcommand#install_rdoc()","gem::docmanager#install_rdoc()","gem::docmanager#install_ri()","gem::testcase#install_specs()","gem::installupdateoptions#install_update_defaults_str()","gem::specification#installation_path()","gem::installer#installation_satisfies_dependency?()","gem::sourceindex::installed_spec_directories()","gem::sourceindex::installed_spec_directories()","gem::commandmanager::instance()","gem::command#invoke()","gem::latest_load_paths()","gem::latest_rubygems_version()","gem::latest_spec_for()","gem::server#latest_specs()","gem::sourceindex#latest_specs()","gem::sourceindex#latest_specs()","gem::specification::latest_specs()","gem::latest_version_for()","gem::server#launch()","gem::sourceindex#length()","gem::sourceindex#length()","gem::text#levenshtein_distance()","gem::gempathsearcher#lib_dirs_for()","gem::specification#lib_dirs_glob()","gem::specification#lib_files()","gem::specification#license()","gem::specification#license=()","gem::specification#licenses()","gem::specification#licenses=()","gem::specfetcher#list()","gem::server#listen()","gem::specification::load()","gem::configfile#load_api_keys()","gem::load_env_plugins()","gem::configfile#load_file()","gem::sourceindex#load_gems_in()","gem::sourceindex#load_gems_in()","gem::commands::buildcommand#load_gemspec()","gem::package::tarinput#load_gemspec()","gem::load_path_insert_index()","gem::load_plugin_files()","gem::load_plugins()","gem::docmanager::load_rdoc()","gem::sourceindex::load_specification()","gem::sourceindex::load_specification()","gem::specfetcher#load_specs()","gem::load_yaml()","gem::specification#loaded_from=()","gem::loaded_path?()","gem::platform::local()","gem::localremoteoptions#local?()","gem::location_of_caller()","gem::ext::builder::make()","gem::testcase#make_command()","gem::testcase::make_command()","gem::commands::setupcommand#make_destination_dirs()","gem::indexer#make_temp_directories()","gem::commands::ownercommand#manage_owners()","gem::indexer#map_gems_to_specs()","gem::specification#mark_version()","version#marshal_dump()","version#marshal_load()","gem::marshal_version()","gem::platform::match()","gem::dependency#match?()","gem::specification#matches_for_glob()","gem::dependency#matches_spec?()","gem::gempathsearcher#matching_file?()","gem::gempathsearcher#matching_files()","gem::gempathsearcher#matching_paths()","gem::dependency#matching_specs()","gem::dependency#merge()","gem::command#merge_options()","gem::package::tarwriter#mkdir()","gem::testcase#mu_pp()","gem::builder::new()","gem::command::new()","gem::commandmanager::new()","gem::commands::buildcommand::new()","gem::commands::certcommand::new()","gem::commands::checkcommand::new()","gem::commands::cleanupcommand::new()","gem::commands::contentscommand::new()","gem::commands::dependencycommand::new()","gem::commands::environmentcommand::new()","gem::commands::fetchcommand::new()","gem::commands::generateindexcommand::new()","gem::commands::helpcommand::new()","gem::commands::installcommand::new()","gem::commands::listcommand::new()","gem::commands::lockcommand::new()","gem::commands::outdatedcommand::new()","gem::commands::ownercommand::new()","gem::commands::pristinecommand::new()","gem::commands::pushcommand::new()","gem::commands::querycommand::new()","gem::commands::rdoccommand::new()","gem::commands::searchcommand::new()","gem::commands::servercommand::new()","gem::commands::setupcommand::new()","gem::commands::sourcescommand::new()","gem::commands::specificationcommand::new()","gem::commands::stalecommand::new()","gem::commands::uninstallcommand::new()","gem::commands::unpackcommand::new()","gem::commands::updatecommand::new()","gem::commands::whichcommand::new()","gem::configfile::new()","gem::consoleui::new()","gem::dependency::new()","gem::dependencyinstaller::new()","gem::dependencylist::new()","gem::docmanager::new()","gem::fakefetcher::new()","gem::filepermissionerror::new()","gem::format::new()","gem::gemnotfoundexception::new()","gem::gempathsearcher::new()","gem::gemrunner::new()","gem::indexer::new()","gem::installer::new()","gem::mockgemui::new()","gem::mockgemui::termerror::new()","gem::oldformat::new()","gem::package::formaterror::new()","gem::package::tarheader::new()","gem::package::tarinput::new()","gem::package::taroutput::new()","gem::package::tarreader::new()","gem::package::tarreader::new()","gem::package::tarreader::entry::new()","gem::package::tarwriter::new()","gem::package::tarwriter::new()","gem::package::tarwriter::boundedstream::new()","gem::package::tarwriter::restrictedstream::new()","gem::packagetask::new()","gem::pathsupport::new()","gem::platform::new()","gem::platformmismatch::new()","gem::remotefetcher::new()","gem::remotefetcher::fetcherror::new()","gem::requirement::new()","gem::requirement::new()","gem::security::policy::new()","gem::security::signer::new()","gem::server::new()","gem::silentui::new()","gem::sourceindex::new()","gem::sourceindex::new()","gem::specfetcher::new()","gem::specification::new()","gem::streamui::new()","gem::streamui::silentdownloadreporter::new()","gem::streamui::silentprogressreporter::new()","gem::streamui::simpleprogressreporter::new()","gem::streamui::verbosedownloadreporter::new()","gem::streamui::verboseprogressreporter::new()","gem::systemexitexception::new()","gem::uninstaller::new()","gem::validator::new()","tempio::new()","version::new()","gem::testcase#new_spec()","gem::testcase#nmake_found?()","gem::mockgemui::tty#noecho()","gem::specification::non_nil_attributes()","gem::requirement#none?()","gem::requirement#none?()","gem::specification#normalize()","gem::remotefetcher#normalize_uri()","gem::specification::normalize_yaml_input()","gem::dependencylist#ok?()","gem::dependencylist#ok_to_remove?()","gem::package::open()","gem::package::tarinput::open()","gem::package::taroutput::open()","gem::fakefetcher#open_uri_or_path()","gem::remotefetcher#open_uri_or_path()","gem::sourceindex#outdated()","gem::sourceindex#outdated()","gem::specification::outdated()","gem::mockgemui#output()","gem::package::pack()","gem::indexer#paranoid()","gem::requirement::parse()","gem::requirement::parse()","gem::path()","gem::uninstaller#path_ok?()","gem::paths()","gem::paths=()","gem::specification#platform()","gem::specification#platform=()","gem::platforms()","gem::platforms=()","gem::package::tarreader::entry#pos()","gem::post_build()","gem::post_install()","gem::post_reset()","gem::post_uninstall()","gem::pre_install()","gem::pre_reset()","gem::pre_uninstall()","gem::prefix()","gem::dependency#prerelease?()","gem::requirement#prerelease?()","gem::requirement#prerelease?()","version#prerelease?()","gem::sourceindex#prerelease_gems()","gem::sourceindex#prerelease_gems()","gem::sourceindex#prerelease_specs()","gem::sourceindex#prerelease_specs()","gem::commands::dependencycommand#print_dependencies()","gem::commandmanager#process_args()","gem::testcase#process_based_port()","gem::testcase::process_based_port()","gem::installer#process_options()","gem::silentui#progress_reporter()","gem::streamui#progress_reporter()","gem::promote_load_path()","gem::server#quick()","gem::testcase#quick_gem()","gem::testcase#quick_spec()","gem::specification#raise_if_conflicts()","gem::server#rdoc()","gem::docmanager#rdoc_installed?()","gem::specification#rdoc_options()","gem::specification#rdoc_options=()","gem::docmanager::rdoc_version()","gem::package::tarreader::entry#read()","gem::read_binary()","gem::testcase#read_binary()","gem::testcase#read_cache()","gem::configfile#really_verbose()","gem::ext::builder::redirector()","gem::refresh()","gem::sourceindex#refresh!()","gem::sourceindex#refresh!()","gem::testcase#refute_path_exists()","gem::noaliasyamltree#register()","gem::commandmanager#register_command()","version#release()","gem::sourceindex#released_gems()","gem::sourceindex#released_gems()","gem::sourceindex#released_specs()","gem::sourceindex#released_specs()","gem::localremoteoptions#remote?()","gem::uninstaller#remove()","gem::uninstaller#remove_all()","gem::dependencylist#remove_by_name()","gem::uninstaller#remove_executables()","gem::validator#remove_leading_dot_dir()","gem::commands::setupcommand#remove_old_bin_files()","gem::command#remove_option()","gem::commands::ownercommand#remove_owners()","gem::sourceindex#remove_spec()","gem::sourceindex#remove_spec()","gem::specification::remove_spec()","gem::dependencylist#remove_specs_unsatisfied_by()","gem::testcase#req()","gem::fakefetcher#request()","gem::remotefetcher#request()","gem::specification#require_path()","gem::specification#require_path=()","gem::specification::required_attribute?()","gem::specification::required_attributes()","gem::required_location()","gem::specification#required_ruby_version=()","gem::specification#required_rubygems_version=()","gem::dependency#requirement()","gem::specification#requirements()","gem::specification#requirements=()","gem::dependency#requirements_list()","gem::commandmanager::reset()","gem::remotefetcher#reset()","gem::specification::reset()","gem::package::tarreader#rewind()","gem::package::tarreader::entry#rewind()","gem::specification#ri_dir()","gem::docmanager#ri_installed?()","gem::server#root()","gem::ruby()","gem::ruby=()","gem::ruby_engine()","gem::ruby_version()","gem::testcase::rubybin()","gem::configfile#rubygems_api_key=()","gem::gemcutterutilities#rubygems_api_request()","gem::commandmanager#run()","gem::ext::builder::run()","gem::gemrunner#run()","gem::server#run()","gem::server::run()","gem::commands::setupcommand#run_rdoc()","gem::docmanager#run_rdoc()","gem::specification#runtime_dependencies()","gem::indexer#sanitize()","gem::indexer#sanitize_string()","gem::requirement#satisfied_by?()","gem::requirement#satisfied_by?()","gem::specification#satisfies_requirement?()","gem::streamui#say()","gem::userinteraction#say()","gem::sourceindex#search()","gem::sourceindex#search()","gem::searcher()","gem::searcher=()","gem::commands::pushcommand#send_gem()","gem::installertestcase#setup()","gem::testcase#setup()","gem::docmanager#setup_rdoc()","gem::installer#shebang()","gem::command#show_help()","gem::command#show_lookup_failure()","gem::commands::ownercommand#show_owners()","gem::server#show_rdoc_for_pattern()","gem::security::signer#sign()","gem::security::sign_cert()","gem::gemcutterutilities#sign_in()","gem::sourceindex#size()","gem::sourceindex#size()","gem::deprecate::skip_during()","gem::specification#sort_obj()","gem::source_index()","gem::source_index=()","gem::sources()","gem::sources=()","gem::installer#spec()","gem::testcase#spec()","gem::specification#spec_dir()","gem::specification#spec_file()","gem::specification#spec_name()","gem::commands::lockcommand#spec_path()","gem::dependencylist#spec_predecessors()","gem::dependency#specific?()","gem::requirement#specific?()","gem::requirement#specific?()","gem::command::specific_extra_args()","gem::command::specific_extra_args_hash()","gem::sourceindex#specification()","gem::sourceindex#specification()","gem::server#specs()","version#spermy_recommendation()","gem#ssl_available?()","tempio#string()","gem::builder#success()","gem::suffix_pattern()","gem::suffixes()","gem::specfetcher#suggest_gems_from_name()","gem::specification#summary=()","gem::package::tartestcase#tar_dir_header()","gem::package::tartestcase#tar_file_header()","gem::testcase#teardown()","gem::mockgemui#terminate_interaction()","gem::streamui#terminate_interaction()","gem::userinteraction#terminate_interaction()","gem::mockgemui#terminated?()","gem::specification#test_file()","gem::specification#test_file=()","gem::specification#test_files()","gem::specification#test_files=()","gem::time()","gem::platform#to_a()","gem::package::tartestcase#to_oct()","gem::specification#to_ruby()","gem::specification#to_ruby_for_cache()","gem::platform#to_s()","gem::dependency#to_spec()","gem::dependency#to_specs()","gem::specification#traverse()","gem::security::policy::trusted_cert_path()","gem::try_activate()","gem::dependencylist#tsort_each_child()","gem::dependencylist#tsort_each_node()","gem::mockgemui::tty#tty?()","gem::streamui#tty?()","gem::dependency#type()","gem::ui()","gem::defaultuserinteraction#ui()","gem::defaultuserinteraction::ui()","gem::defaultuserinteraction::ui=()","gem::defaultuserinteraction#ui=()","gem::remotefetcher#unescape()","gem::uninstaller#uninstall()","gem::docmanager#uninstall_doc()","gem::testcase#uninstall_gem()","gem::uninstaller#uninstall_gem()","gem::commands::setupcommand#uninstall_old_gemcutter()","gem::installer#unpack()","gem::commandmanager#unregister_command()","gem::unresolved_deps()","gem::streamui::silentdownloadreporter#update()","gem::streamui::verbosedownloadreporter#update()","gem::package::tarheader#update_checksum()","gem::commands::updatecommand#update_gem()","gem::commands::updatecommand#update_gems()","gem::indexer#update_index()","gem::docmanager::update_ri_cache()","gem::commands::updatecommand#update_rubygems()","gem::indexer#update_specs_index()","gem::streamui::silentprogressreporter#updated()","gem::streamui::simpleprogressreporter#updated()","gem::streamui::verboseprogressreporter#updated()","gem::remotefetcher#uri_escaper()","gem::command#usage()","gem::use_paths()","gem::defaultuserinteraction#use_ui()","gem::defaultuserinteraction::use_ui()","gem::remotefetcher#user_agent()","gem::user_dir()","gem::user_home()","gem::testcase#util_build_gem()","gem::testcase#util_clear_gems()","gem::package::tartestcase#util_dir_entry()","gem::package::tartestcase#util_entry()","gem::testcase#util_gem()","gem::installertestcase#util_gem_bindir()","gem::installertestcase#util_gem_dir()","gem::testcase#util_gzip()","gem::installertestcase#util_inst_bindir()","gem::installertestcase#util_installer()","gem::installertestcase#util_make_exec()","gem::testcase#util_make_gems()","gem::testcase#util_set_arch()","gem::testcase#util_setup_fake_fetcher()","gem::installertestcase#util_setup_gem()","gem::testcase#util_setup_spec_fetcher()","gem::testcase#util_spec()","gem::testcase#util_zip()","gem::testcase#v()","gem::specification#validate()","gem::testcase#vc_windows?()","gem::testcase::vc_windows?()","gem::gemcutterutilities#verify_api_key()","gem::security::policy#verify_gem()","gem::validator#verify_gem()","gem::validator#verify_gem_file()","gem::installer#verify_gem_home()","gem::security::verify_trust_dir()","gem::specification#version=()","gem::noaliasyamltree#visit_string()","gem::command#when_invoked()","gem::commands::updatecommand#which_to_update()","gem::dependencylist#why_not_ok?()","gem::win_platform=()","gem::win_platform?()","gem::testcase::win_platform?()","gem::testcase#win_platform?()","gem::installer#windows_stub_script()","gem::gemcutterutilities#with_response()","gem::platformmismatch#wordy()","gem::command#wrap()","gem::configfile#write()","gem::package::tarwriter::boundedstream#write()","gem::package::tarwriter::restrictedstream#write()","gem::testcase#write_file()","gem::requirepathsbuilder#write_require_paths_file_if_needed()","gem::installer#write_spec()","gem::commands::buildcommand#yaml?()","version#yaml_initialize()","gem::package::tarinput#zipped_stream()"],"info":[["Cache","","Cache.html","","<p>The SourceIndex object indexes all the gems available from a particular\nsource (e.g. a list of gem directories, …\n"],["Date","","Date.html","",""],["Gem","","Gem.html","","<p>Provides a single method <code>deprecate</code> to be used to declare when\nsomething is going away.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Legacy</span>\n  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Gem::Builder","","Gem/Builder.html","","<p>The Builder class processes RubyGem specification files to produce a .gem\nfile.\n"],["Gem::Command","","Gem/Command.html","","<p>Base class for all Gem commands.  When creating a new gem command, define\n#new, #execute, #arguments …\n"],["Gem::CommandLineError","","Gem/CommandLineError.html","",""],["Gem::CommandManager","","Gem/CommandManager.html","","<p>The command manager registers and installs all the individual sub-commands\nsupported by the gem command. …\n"],["Gem::Commands","","Gem/Commands.html","",""],["Gem::Commands::BuildCommand","","Gem/Commands/BuildCommand.html","",""],["Gem::Commands::CertCommand","","Gem/Commands/CertCommand.html","",""],["Gem::Commands::CheckCommand","","Gem/Commands/CheckCommand.html","",""],["Gem::Commands::CleanupCommand","","Gem/Commands/CleanupCommand.html","",""],["Gem::Commands::ContentsCommand","","Gem/Commands/ContentsCommand.html","",""],["Gem::Commands::DependencyCommand","","Gem/Commands/DependencyCommand.html","",""],["Gem::Commands::EnvironmentCommand","","Gem/Commands/EnvironmentCommand.html","",""],["Gem::Commands::FetchCommand","","Gem/Commands/FetchCommand.html","",""],["Gem::Commands::GenerateIndexCommand","","Gem/Commands/GenerateIndexCommand.html","","<p>Generates a index files for use as a gem server.\n<p>See `gem help generate_index`\n"],["Gem::Commands::HelpCommand","","Gem/Commands/HelpCommand.html","",""],["Gem::Commands::InstallCommand","","Gem/Commands/InstallCommand.html","","<p>Gem installer command line tool\n<p>See `gem help install`\n"],["Gem::Commands::ListCommand","","Gem/Commands/ListCommand.html","","<p>An alternate to Gem::Commands::QueryCommand that searches for gems starting\nwith the the supplied argument. …\n"],["Gem::Commands::LockCommand","","Gem/Commands/LockCommand.html","",""],["Gem::Commands::OutdatedCommand","","Gem/Commands/OutdatedCommand.html","",""],["Gem::Commands::OwnerCommand","","Gem/Commands/OwnerCommand.html","",""],["Gem::Commands::PristineCommand","","Gem/Commands/PristineCommand.html","",""],["Gem::Commands::PushCommand","","Gem/Commands/PushCommand.html","",""],["Gem::Commands::QueryCommand","","Gem/Commands/QueryCommand.html","",""],["Gem::Commands::RdocCommand","","Gem/Commands/RdocCommand.html","",""],["Gem::Commands::SearchCommand","","Gem/Commands/SearchCommand.html","",""],["Gem::Commands::ServerCommand","","Gem/Commands/ServerCommand.html","",""],["Gem::Commands::SetupCommand","","Gem/Commands/SetupCommand.html","","<p>Installs RubyGems itself.  This command is ordinarily only available from a\nRubyGems checkout or tarball. …\n"],["Gem::Commands::SourcesCommand","","Gem/Commands/SourcesCommand.html","",""],["Gem::Commands::SpecificationCommand","","Gem/Commands/SpecificationCommand.html","",""],["Gem::Commands::StaleCommand","","Gem/Commands/StaleCommand.html","",""],["Gem::Commands::UninstallCommand","","Gem/Commands/UninstallCommand.html","","<p>Gem uninstaller command line tool\n<p>See `gem help uninstall`\n"],["Gem::Commands::UnpackCommand","","Gem/Commands/UnpackCommand.html","",""],["Gem::Commands::UpdateCommand","","Gem/Commands/UpdateCommand.html","",""],["Gem::Commands::WhichCommand","","Gem/Commands/WhichCommand.html","",""],["Gem::ConfigFile","","Gem/ConfigFile.html","",""],["Gem::ConsoleUI","","Gem/ConsoleUI.html","","<p>Subclass of StreamUI that instantiates the user interaction using STDIN,\nSTDOUT, and STDERR.\n"],["Gem::DefaultUserInteraction","","Gem/DefaultUserInteraction.html","","<p>When rubygems/test_case is required the default user interaction is a\nMockGemUi.\n<p>Module that defines the …\n"],["Gem::Dependency","","Gem/Dependency.html","","<p>The Dependency class holds a Gem name and a Gem::Requirement.\n"],["Gem::DependencyError","","Gem/DependencyError.html","",""],["Gem::DependencyInstaller","","Gem/DependencyInstaller.html","","<p>Installs a gem along with all its dependencies from local and remote gems.\n"],["Gem::DependencyList","","Gem/DependencyList.html","","<p>Gem::DependencyList is used for installing and uninstalling gems in the\ncorrect order to avoid conflicts. …\n"],["Gem::DependencyRemovalException","","Gem/DependencyRemovalException.html","",""],["Gem::Deprecate","","Gem/Deprecate.html","",""],["Gem::DocManager","","Gem/DocManager.html","","<p>The documentation manager generates RDoc and RI for RubyGems.\n"],["Gem::DocumentError","","Gem/DocumentError.html","",""],["Gem::EndOfYAMLException","","Gem/EndOfYAMLException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::ErrorReason","","Gem/ErrorReason.html","",""],["Gem::Exception","","Gem/Exception.html","","<p>Base exception class for RubyGems.  All exception raised by RubyGems are a\nsubclass of this one.\n"],["Gem::Ext","","Gem/Ext.html","","<p>Classes for building C extensions live here.\n"],["Gem::Ext::Builder","","Gem/Ext/Builder.html","",""],["Gem::Ext::ConfigureBuilder","","Gem/Ext/ConfigureBuilder.html","",""],["Gem::Ext::ExtConfBuilder","","Gem/Ext/ExtConfBuilder.html","",""],["Gem::Ext::RakeBuilder","","Gem/Ext/RakeBuilder.html","",""],["Gem::FakeFetcher","","Gem/FakeFetcher.html","","<p>A fake Gem::RemoteFetcher for use in tests or to avoid real live HTTP\nrequests when testing code that …\n"],["Gem::FilePermissionError","","Gem/FilePermissionError.html","","<p>Signals that a file permission error is preventing the user from installing\nin the requested directories. …\n"],["Gem::Format","","Gem/Format.html","","<p>Gem::Format knows the guts of the RubyGem .gem file format and provides the\ncapability to read gem files …\n"],["Gem::FormatException","","Gem/FormatException.html","","<p>Used to raise parsing and loading errors\n"],["Gem::GemNotFoundException","","Gem/GemNotFoundException.html","",""],["Gem::GemNotInHomeException","","Gem/GemNotInHomeException.html","","<p>Raised when attempting to uninstall a gem that isn’t in GEM_HOME.\n"],["Gem::GemPathSearcher","","Gem/GemPathSearcher.html","","<p>GemPathSearcher has the capability to find loadable files inside gems.  It\ngenerates data up front to …\n"],["Gem::GemRunner","","Gem/GemRunner.html","","<p>Run an instance of the gem program.\n<p>Gem::GemRunner is only intended for internal use by RubyGems itself. …\n"],["Gem::GemcutterUtilities","","Gem/GemcutterUtilities.html","",""],["Gem::Indexer","","Gem/Indexer.html","","<p>Top level class for building the gem repository index.\n"],["Gem::InstallError","","Gem/InstallError.html","",""],["Gem::InstallUpdateOptions","","Gem/InstallUpdateOptions.html","","<p>Mixin methods for install and update options for Gem::Commands\n"],["Gem::Installer","","Gem/Installer.html","","<p>The installer class processes RubyGem .gem files and installs the files\ncontained in the .gem into the …\n"],["Gem::Installer::ExtensionBuildError","","Gem/Installer/ExtensionBuildError.html","","<p>Raised when there is an error while building extensions.\n"],["Gem::InstallerTestCase","","Gem/InstallerTestCase.html","","<p>A test case for Gem::Installer.\n"],["Gem::InvalidSpecificationException","","Gem/InvalidSpecificationException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::LoadError","","Gem/LoadError.html","",""],["Gem::LocalRemoteOptions","","Gem/LocalRemoteOptions.html","","<p>Mixin methods for local and remote Gem::Command options.\n"],["Gem::MockGemUi","","Gem/MockGemUi.html","","<p>This Gem::StreamUI subclass records input and output to StringIO for\nretrieval during tests.\n"],["Gem::MockGemUi::SystemExitException","","Gem/MockGemUi/SystemExitException.html","",""],["Gem::MockGemUi::TTY","","Gem/MockGemUi/TTY.html","",""],["Gem::MockGemUi::TermError","","Gem/MockGemUi/TermError.html","",""],["Gem::NoAliasYAMLTree","","Gem/NoAliasYAMLTree.html","",""],["Gem::OldFormat","","Gem/OldFormat.html","","<p>The format class knows the guts of the RubyGem .gem file format and\nprovides the capability to read gem …\n"],["Gem::OperationNotSupportedError","","Gem/OperationNotSupportedError.html","",""],["Gem::Package","","Gem/Package.html","",""],["Gem::Package::BadCheckSum","","Gem/Package/BadCheckSum.html","",""],["Gem::Package::ClosedIO","","Gem/Package/ClosedIO.html","",""],["Gem::Package::Error","","Gem/Package/Error.html","",""],["Gem::Package::FSyncDir","","Gem/Package/FSyncDir.html","",""],["Gem::Package::FormatError","","Gem/Package/FormatError.html","",""],["Gem::Package::NonSeekableIO","","Gem/Package/NonSeekableIO.html","",""],["Gem::Package::TarHeader","","Gem/Package/TarHeader.html","","<p>A header for a tar file\n"],["Gem::Package::TarInput","","Gem/Package/TarInput.html","",""],["Gem::Package::TarInvalidError","","Gem/Package/TarInvalidError.html","","<p>Raised when a tar file is corrupt\n"],["Gem::Package::TarOutput","","Gem/Package/TarOutput.html","","<p>TarOutput is a wrapper to TarWriter that builds gem-format tar file.\n<p>Gem-format tar files contain the …\n"],["Gem::Package::TarReader","","Gem/Package/TarReader.html","","<p>TarReader reads tar files and allows iteration over their items\n"],["Gem::Package::TarReader::Entry","","Gem/Package/TarReader/Entry.html","","<p>Class for reading entries out of a tar file\n"],["Gem::Package::TarReader::UnexpectedEOF","","Gem/Package/TarReader/UnexpectedEOF.html","","<p>Raised if the tar IO is not seekable\n"],["Gem::Package::TarTestCase","","Gem/Package/TarTestCase.html","","<p>A test case for Gem::Package::Tar* classes\n"],["Gem::Package::TarWriter","","Gem/Package/TarWriter.html","","<p>Allows writing of tar files\n"],["Gem::Package::TarWriter::BoundedStream","","Gem/Package/TarWriter/BoundedStream.html","","<p>IO wrapper that allows writing a limited amount of data\n"],["Gem::Package::TarWriter::FileOverflow","","Gem/Package/TarWriter/FileOverflow.html","",""],["Gem::Package::TarWriter::RestrictedStream","","Gem/Package/TarWriter/RestrictedStream.html","","<p>IO wrapper that provides only #write\n"],["Gem::Package::TooLongFileName","","Gem/Package/TooLongFileName.html","",""],["Gem::PackageTask","","Gem/PackageTask.html","","<p>Create a package based upon a Gem::Specification.  Gem packages, as well as\nzip files and tar/gzipped …\n"],["Gem::PathSupport","","Gem/PathSupport.html","","<p>Gem::PathSupport facilitates the GEM_HOME and GEM_PATH environment settings\nto the rest of RubyGems. …\n"],["Gem::Platform","","Gem/Platform.html","","<p>Available list of platforms for targeting Gem installations.\n"],["Gem::PlatformMismatch","","Gem/PlatformMismatch.html","","<p>Generated when trying to lookup a gem to indicate that the gem was found,\nbut that it isn’t usable on …\n"],["Gem::RbConfig","","Gem/RbConfig.html","",""],["Gem::RemoteError","","Gem/RemoteError.html","","<p>Signals that a remote operation cannot be conducted, probably due to not\nbeing connected (or just not …\n"],["Gem::RemoteFetcher","","Gem/RemoteFetcher.html","","<p>RemoteFetcher handles the details of fetching gems and gem information from\na remote source.\n"],["Gem::RemoteFetcher::FetchError","","Gem/RemoteFetcher/FetchError.html","","<p>A FetchError exception wraps up the various possible IO and HTTP failures\nthat could happen while downloading …\n"],["Gem::RemoteInstallationCancelled","","Gem/RemoteInstallationCancelled.html","",""],["Gem::RemoteInstallationSkipped","","Gem/RemoteInstallationSkipped.html","",""],["Gem::RemoteSourceException","","Gem/RemoteSourceException.html","","<p>Represents an error communicating via HTTP.\n"],["Gem::RequirePathsBuilder","","Gem/RequirePathsBuilder.html","","<p>TODO: remove after 1.9.1 dropped\n"],["Gem::Requirement","","Gem/Requirement.html","",""],["Gem::SSL","","Gem/SSL.html","",""],["Gem::Security","","Gem/Security.html","","<p>Signed Gems README\n<p>Table of Contents\n<p>Overview\n"],["Gem::Security::Exception","","Gem/Security/Exception.html","","<p>Gem::Security default exception type\n"],["Gem::Security::Policy","","Gem/Security/Policy.html","","<p>A Gem::Security::Policy object encapsulates the settings for verifying\nsigned gem files.  This is the …\n"],["Gem::Security::Signer","","Gem/Security/Signer.html","","<p>Basic OpenSSL-based package signing class.\n"],["Gem::Server","","Gem/Server.html","","<p>Gem::Server and allows users to serve gems for consumption by `gem\n–remote-install`.\n<p>gem_server starts …\n"],["Gem::SilentUI","","Gem/SilentUI.html","","<p>SilentUI is a UI choice that is absolutely silent.\n"],["Gem::SourceIndex","","Gem/SourceIndex.html","","<p>The SourceIndex object indexes all the gems available from a particular\nsource (e.g. a list of gem directories, …\n"],["Gem::SpecFetcher","","Gem/SpecFetcher.html","","<p>SpecFetcher handles metadata updates from remote gem repositories.\n"],["Gem::Specification","","Gem/Specification.html","","<p>The Specification class contains the metadata for a Gem.  Typically defined\nin a .gemspec file or a  …\n"],["Gem::StreamUI","","Gem/StreamUI.html","","<p>Gem::StreamUI implements a simple stream based user interface.\n"],["Gem::StreamUI::SilentDownloadReporter","","Gem/StreamUI/SilentDownloadReporter.html","","<p>An absolutely silent download reporter.\n"],["Gem::StreamUI::SilentProgressReporter","","Gem/StreamUI/SilentProgressReporter.html","","<p>An absolutely silent progress reporter.\n"],["Gem::StreamUI::SimpleProgressReporter","","Gem/StreamUI/SimpleProgressReporter.html","","<p>A basic dotted progress reporter.\n"],["Gem::StreamUI::VerboseDownloadReporter","","Gem/StreamUI/VerboseDownloadReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::StreamUI::VerboseProgressReporter","","Gem/StreamUI/VerboseProgressReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::SystemExitException","","Gem/SystemExitException.html","","<p>Raised to indicate that a system exit should occur with the specified\nexit_code\n"],["Gem::TestCase","","Gem/TestCase.html","","<p>RubyGemTestCase provides a variety of methods for testing rubygems and\ngem-related behavior in a sandbox. …\n"],["Gem::Text","","Gem/Text.html","","<p>A collection of text-wrangling methods\n"],["Gem::Uninstaller","","Gem/Uninstaller.html","","<p>An Uninstaller.\n<p>The uninstaller fires pre and post uninstall hooks.  Hooks can be added\neither through …\n"],["Gem::UserInteraction","","Gem/UserInteraction.html","","<p>Make the default UI accessible without the “ui.” prefix.  Classes including\nthis module may …\n"],["Gem::Validator","","Gem/Validator.html","","<p>Validator performs various gem file and gem database validation\n"],["Gem::VerificationError","","Gem/VerificationError.html","",""],["Gem::VersionOption","","Gem/VersionOption.html","","<p>Mixin methods for –version and –platform Gem::Command options.\n"],["Kernel","","Kernel.html","",""],["Object","","Object.html","",""],["OpenSSL","","OpenSSL.html","",""],["OpenSSL::Digest","","OpenSSL/Digest.html","",""],["OpenSSL::X509","","OpenSSL/X509.html","",""],["OpenSSL::X509::Certificate","","OpenSSL/X509/Certificate.html","",""],["Psych","","Psych.html","","<p>This exists just to satify bugs in marshal’d gemspecs that contain a\nreference to YAML::PrivateType. …\n"],["Psych::PrivateType","","Psych/PrivateType.html","",""],["RbConfig","","RbConfig.html","",""],["TempIO","","TempIO.html","","<p>A StringIO duck-typed class that uses Tempfile instead of String as the\nbacking store.\n<p>This is available …\n"],["Version","","Version.html","","<p>The Version class processes string versions into comparable values. A\nversion string should normally …\n"],["Version::Requirement","","Version/Requirement.html","",""],["YAML","","YAML.html","",""],["YAML::Syck","","YAML/Syck.html","",""],["YAML::Syck::DefaultKey","","YAML/Syck/DefaultKey.html","",""],["<=>","Gem::Dependency","Gem/Dependency.html#method-i-3C-3D-3E","(other)","<p>Dependencies are ordered by name.\n"],["<=>","Version","Version.html#method-i-3C-3D-3E","(other)","<p>Compares this version with <code>other</code> returning -1, 0, or 1 if the\nother version is larger, the same, or smaller …\n"],["==","Gem::Platform","Gem/Platform.html#method-i-3D-3D","(other)","<p>Is <code>other</code> equal to this platform?  Two platforms are equal if\nthey have the same CPU, OS and version. …\n"],["===","Gem::Platform","Gem/Platform.html#method-i-3D-3D-3D","(other)","<p>Does <code>other</code> match this platform?  Two platforms match if they\nhave the same CPU, or either has a CPU of …\n"],["===","Gem::Requirement","Gem/Requirement.html#method-i-3D-3D-3D","(version)",""],["===","Gem::Requirement","Gem/Requirement.html#method-i-3D-3D-3D","(version)",""],["=~","Gem::Dependency","Gem/Dependency.html#method-i-3D-7E","(other)","<p>Uses this dependency as a pattern to compare to <code>other</code>. This\ndependency will match if the name matches …\n"],["=~","Gem::Platform","Gem/Platform.html#method-i-3D-7E","(other)","<p>Does <code>other</code> match this platform?  If <code>other</code> is a\nString it will be converted to a Gem::Platform first. …\n"],["=~","Gem::Requirement","Gem/Requirement.html#method-i-3D-7E","(version)",""],["=~","Gem::Requirement","Gem/Requirement.html#method-i-3D-7E","(version)",""],["ASCIIZ","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-ASCIIZ","(str, length)",""],["Marshal","Gem::Server","Gem/Server.html#method-i-Marshal","(req, res)",""],["SP","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-SP","(s)",""],["SP_Z","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-SP_Z","(s)",""],["Z","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-Z","(s)",""],["[]","Gem::CommandManager","Gem/CommandManager.html#method-i-5B-5D","(command_name)","<p>Return the registered command from the command name.\n"],["[]","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D","(key)","<p>Return the configuration information for <code>key</code>.\n"],["[]=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D-3D","(key, value)","<p>Set configuration option <code>key</code> to <code>value</code>.\n"],["_dump","Gem::Specification","Gem/Specification.html#method-i-_dump","(limit)","<p>Dump only crucial instance variables.\n"],["_load","Gem::Specification","Gem/Specification.html#method-c-_load","(str)","<p>Load custom marshal format, re-initializing defaults as needed\n"],["abbreviate","Gem::Indexer","Gem/Indexer.html#method-i-abbreviate","(spec)","<p>Abbreviate the spec for downloading.  Abbreviated specs are only used for\nsearching, downloading and …\n"],["accept_uri_http","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-accept_uri_http","()","<p>Allows OptionParser to handle HTTP URIs.\n"],["activate","Gem","Gem.html#method-c-activate","(dep, *requirements)","<p>Activates an installed gem matching <code>dep</code>.  The gem must satisfy\n<code>requirements</code>.\n<p>Returns true if the gem is …\n"],["activate","Gem::Specification","Gem/Specification.html#method-i-activate","()","<p>Activate this spec, registering it as a loaded spec and adding it’s lib\npaths to $LOAD_PATH. Returns …\n"],["activate_dependencies","Gem::Specification","Gem/Specification.html#method-i-activate_dependencies","()","<p>Activate all unambiguously resolved runtime dependencies of this spec. Add\nany ambigous dependencies …\n"],["add","Gem::DependencyList","Gem/DependencyList.html#method-i-add","(*gemspecs)","<p>Adds <code>gemspecs</code> to the dependency list.\n"],["add_bindir","Gem::Specification","Gem/Specification.html#method-i-add_bindir","(executables)","<p>Returns an array with bindir attached to each executable in the\n<code>executables</code> list\n"],["add_bulk_threshold_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_bulk_threshold_option","()","<p>Add the –bulk-threshold option\n"],["add_clear_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_clear_sources_option","()","<p>Add the –clear-sources option\n"],["add_common_option","Gem::Command","Gem/Command.html#method-c-add_common_option","(*args, &handler)",""],["add_date","Gem::Server","Gem/Server.html#method-i-add_date","(res)",""],["add_dependency","Gem::Specification","Gem/Specification.html#method-i-add_dependency","(gem, *requirements)",""],["add_development_dependency","Gem::Specification","Gem/Specification.html#method-i-add_development_dependency","(gem, *requirements)","<p>Adds a development dependency named <code>gem</code> with\n<code>requirements</code> to this Gem.  For example:\n\n<pre>spec.add_development_dependency ...</pre>\n"],["add_extra_args","Gem::Command","Gem/Command.html#method-i-add_extra_args","(args)","<p>Adds extra args from ~/.gemrc\n"],["add_file","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file","(name, mode)","<p>Adds file <code>name</code> with permissions <code>mode</code>, and yields\nan IO for writing the file to\n"],["add_file_simple","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_simple","(name, mode, size)","<p>Add file <code>name</code> with permissions <code>mode</code>\n<code>size</code> bytes long.  Yields an IO to write the file to.\n"],["add_found_dependencies","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-add_found_dependencies","(to_do, dependency_list)",""],["add_gem_contents","Gem::Package::TarOutput","Gem/Package/TarOutput.html#method-i-add_gem_contents","()","<p>Yields a TarWriter for the data.tar.gz inside a gem-format tar file. The\nyielded TarWriter has been extended …\n"],["add_install_update_options","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-add_install_update_options","()","<p>Add the install/update options to the option parser.\n"],["add_key_option","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-add_key_option","()","<p>Add the –key option\n"],["add_local_remote_options","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_local_remote_options","()","<p>Add local/remote options to the command line parser.\n"],["add_metadata","Gem::Package::TarOutput","Gem/Package/TarOutput.html#method-i-add_metadata","()","<p>Adds metadata.gz to the gem-format tar file which was saved from a previous\n#add_gem_contents call.\n"],["add_option","Gem::Command","Gem/Command.html#method-i-add_option","(*opts)","<p>Add a command-line option and handler to the command.\n<p>See OptionParser#make_switch for an explanation …\n"],["add_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-add_owners","(name, owners)",""],["add_platform","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-add_platform","(platform)",""],["add_platform_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_platform_option","(task = command, *wrap)","<p>Add the –platform option to the option parser.\n"],["add_prerelease_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_prerelease_option","(*wrap)","<p>Add the –prerelease option to the option parser.\n"],["add_proxy_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_proxy_option","()","<p>Add the –http-proxy option\n"],["add_rubygems_trusted_certs","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-add_rubygems_trusted_certs","(store)",""],["add_runtime_dependency","Gem::Specification","Gem/Specification.html#method-i-add_runtime_dependency","(gem, *requirements)","<p>Adds a runtime dependency named <code>gem</code> with\n<code>requirements</code> to this Gem. For example:\n\n<pre>spec.add_runtime_dependency ...</pre>\n"],["add_self_to_load_path","Gem::Specification","Gem/Specification.html#method-i-add_self_to_load_path","()","<p>Adds this spec’s require paths to LOAD_PATH, in the proper location.\n"],["add_signatures","Gem::Package::TarOutput","Gem/Package/TarOutput.html#method-i-add_signatures","()","<p>Adds data.tar.gz.sig and metadata.gz.sig to the gem-format tar files if a\nGem::Security::Signer was sent …\n"],["add_source_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_source_option","()","<p>Add the –source option\n"],["add_spec","Gem::SourceIndex","Gem/SourceIndex.html#method-i-add_spec","(gem_spec, name = gem_spec.full_name)","<p>Add a gem specification to the source index.\n"],["add_spec","Gem::SourceIndex","Gem/SourceIndex.html#method-i-add_spec","(gem_spec, name = gem_spec.full_name)","<p>Add a gem specification to the source index.\n"],["add_spec","Gem::Specification","Gem/Specification.html#method-c-add_spec","(spec)","<p>Adds <code>spec</code> to the known specifications, keeping the collection\nproperly sorted.\n"],["add_specific_extra_args","Gem::Command","Gem/Command.html#method-c-add_specific_extra_args","(cmd,args)","<p>Add a list of extra arguments for the given command.  <code>args</code> may\nbe an array or a string to be split on …\n"],["add_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-add_specs","(*gem_specs)","<p>Add gem specifications to the source index.\n"],["add_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-add_specs","(*gem_specs)","<p>Add gem specifications to the source index.\n"],["add_specs","Gem::Specification","Gem/Specification.html#method-c-add_specs","(*specs)","<p>Adds multiple specs to the known specifications.\n"],["add_trusted_cert","Gem::Security","Gem/Security.html#method-c-add_trusted_cert","(cert, opt = {})","<p>Add certificate to trusted cert list.\n<p>Note: At the moment these are stored in OPT, although that directory …\n"],["add_update_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_update_sources_option","()","<p>Add the –update-sources option\n"],["add_version_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_version_option","(task = command, *wrap)","<p>Add the –version option to the option parser.\n"],["alert","Gem::StreamUI","Gem/StreamUI.html#method-i-alert","(statement, question=nil)","<p>Display an informational alert.  Will ask <code>question</code> if it is\nnot nil.\n"],["alert","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert","(*args)",""],["alert_error","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_error","(statement, question=nil)","<p>Display an error message in a location expected to get error messages. Will\nask <code>question</code> if it is not …\n"],["alert_error","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_error","(*args)",""],["alert_warning","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_warning","(statement, question=nil)","<p>Display a warning in a location expected to get error messages.  Will ask\n<code>question</code> if it is not nil. …\n"],["alert_warning","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_warning","(*args)",""],["alien","Gem::Validator","Gem/Validator.html#method-i-alien","(gems=[])","<p>Checks the gem directory for the following potential\ninconsistencies/problems:\n<p>Checksum gem itself\n<p>For …\n"],["all","Gem::Specification","Gem/Specification.html#method-c-all","()","<p>Returns all specifications. This method is discouraged from use. You\nprobably want to use one of the …\n"],["all=","Gem::Specification","Gem/Specification.html#method-c-all-3D","(specs)","<p>Sets the known specs to <code>specs</code>. Not guaranteed to work for you\nin the future. Use at your own risk. Caveat …\n"],["all_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-i-all_gems","()",""],["all_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-i-all_gems","()",""],["all_load_paths","Gem","Gem.html#method-c-all_load_paths","()","<p>An Array of all possible load paths for all versions of all gems in the Gem\ninstallation.\n"],["all_names","Gem::Specification","Gem/Specification.html#method-c-all_names","()","<p>Return full names of all specs in sorted order.\n"],["all_spec_names","Gem::TestCase","Gem/TestCase.html#method-i-all_spec_names","()",""],["api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-api_key","()",""],["app_script_text","Gem::Installer","Gem/Installer.html#method-i-app_script_text","(bin_file_name)","<p>Return the text for an application file.\n"],["arguments","Gem::Command","Gem/Command.html#method-i-arguments","()","<p>Override to provide details of the arguments a command takes.  It should\nreturn a left-justified string, …\n"],["array_attributes","Gem::Specification","Gem/Specification.html#method-c-array_attributes","()","<p>Return the list of all array-oriented instance variables.\n"],["ask","Gem::StreamUI","Gem/StreamUI.html#method-i-ask","(question)","<p>Ask a question.  Returns an answer if connected to a tty, nil otherwise.\n"],["ask","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask","(*args)",""],["ask_for_password","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_for_password","(question)","<p>Ask for a password. Does not echo response to terminal.\n"],["ask_for_password","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_for_password","(*args)",""],["ask_for_password_on_unix","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_for_password_on_unix","()","<p>Asks for a password that works on unix\n"],["ask_for_password_on_windows","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_for_password_on_windows","()","<p>Asks for a password that works on windows. Ripped from the Heroku gem.\n"],["ask_if_ok","Gem::Uninstaller","Gem/Uninstaller.html#method-i-ask_if_ok","(spec)",""],["ask_yes_no","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_yes_no","(question, default=nil)","<p>Ask a question.  Returns a true for yes, false for no.  If not connected to\na tty, raises an exception …\n"],["ask_yes_no","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_yes_no","(*args)",""],["assert_headers_equal","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-assert_headers_equal","(expected, actual)",""],["assert_path_exists","Gem::TestCase","Gem/TestCase.html#method-i-assert_path_exists","(path, msg = nil)","<p>TODO: move to minitest\n"],["attribute_names","Gem::Specification","Gem/Specification.html#method-c-attribute_names","()","<p>Return the list of all instance variables.\n"],["author","Gem::Specification","Gem/Specification.html#method-i-author","()","<p>Singular reader for #authors\n"],["author=","Gem::Specification","Gem/Specification.html#method-i-author-3D","(o)","<p>Singular writer for #authors\n"],["authors","Gem::Specification","Gem/Specification.html#method-i-authors","()","<p>The list of author names who wrote this gem.\n<p>If you are providing multiple authors and multiple emails …\n"],["authors=","Gem::Specification","Gem/Specification.html#method-i-authors-3D","(value)","<p>Sets the list of authors, ensuring it is an array.\n"],["available?","Gem","Gem.html#method-c-available-3F","(dep, *requirements)","<p>See if a given gem is available.\n"],["backtrace","Gem::ConfigFile","Gem/ConfigFile.html#method-i-backtrace","()","<p>True if the backtrace option has been specified, or debug is on.\n"],["base_dir","Gem::Specification","Gem/Specification.html#method-i-base_dir","()","<p>Returns the full path to the base gem directory.\n<p>eg: /usr/local/lib/ruby/gems/1.8\n"],["begins?","Gem::Command","Gem/Command.html#method-i-begins-3F","(long, short)","<p>True if <code>long</code> begins with the characters from\n<code>short</code>.\n"],["bin_dir","Gem::Specification","Gem/Specification.html#method-i-bin_dir","()","<p>Returns the full path to installed gem’s bin directory.\n<p>NOTE: do not confuse this with <code>bindir</code>, which is …\n"],["bin_file","Gem::Specification","Gem/Specification.html#method-i-bin_file","(name)","<p>Returns the full path to an executable named <code>name</code> in this gem.\n"],["bin_path","Gem","Gem.html#method-c-bin_path","(name, exec_name = nil, *requirements)","<p>Find the full path to the executable for gem <code>name</code>.  If the\n<code>exec_name</code> is not given, the gem’s default_executable …\n"],["binary_mode","Gem","Gem.html#method-c-binary_mode","()","<p>The mode needed to read a file as straight binary.\n"],["bindir","Gem","Gem.html#method-c-bindir","(install_dir=Gem.dir)","<p>The path where gem executables are to be installed.\n"],["both?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-both-3F","()","<p>Is fetching of local and remote information enabled?\n"],["build","Gem::Builder","Gem/Builder.html#method-i-build","(skip_validation=false)","<p>Builds the gem from the specification.  Returns the name of the file\nwritten.\n"],["build","Gem::Ext::ConfigureBuilder","Gem/Ext/ConfigureBuilder.html#method-c-build","(extension, directory, dest_path, results)",""],["build","Gem::Ext::ExtConfBuilder","Gem/Ext/ExtConfBuilder.html#method-c-build","(extension, directory, dest_path, results)",""],["build","Gem::Ext::RakeBuilder","Gem/Ext/RakeBuilder.html#method-c-build","(extension, directory, dest_path, results)",""],["build_args","Gem::Command","Gem/Command.html#method-c-build_args","()","<p>Arguments used when building gems\n"],["build_args=","Gem::Command","Gem/Command.html#method-c-build_args-3D","(value)",""],["build_cert","Gem::Security","Gem/Security.html#method-c-build_cert","(name, key, opt = {})","<p>Build a certificate from the given DN and private key.\n"],["build_extensions","Gem::Installer","Gem/Installer.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files,\nconfigure scripts and rakefiles or …\n"],["build_indicies","Gem::Indexer","Gem/Indexer.html#method-i-build_indicies","()","<p>Build various indicies\n"],["build_legacy_indicies","Gem::Indexer","Gem/Indexer.html#method-i-build_legacy_indicies","()","<p>Builds indicies for RubyGems older than 1.2.x\n"],["build_marshal_gemspecs","Gem::Indexer","Gem/Indexer.html#method-i-build_marshal_gemspecs","()","<p>Builds Marshal quick index gemspecs.\n"],["build_modern_index","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_index","(index, file, name)","<p>Build a single index for RubyGems 1.2 and newer\n"],["build_modern_indicies","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_indicies","()","<p>Builds indicies for RubyGems 1.2 and newer. Handles full, latest,\nprerelease\n"],["build_rake_in","Gem::TestCase","Gem/TestCase.html#method-i-build_rake_in","()","<p>Allows the proper version of <code>rake</code> to be used for the test.\n"],["build_rss","Gem::Indexer","Gem/Indexer.html#method-i-build_rss","()","<p>Builds an RSS feed for past two days gem releases according to the gem’s\ndate.\n"],["build_self_signed_cert","Gem::Security","Gem/Security.html#method-c-build_self_signed_cert","(email_addr, opt = {})","<p>Build a self-signed certificate for the given email address.\n"],["bump","Version","Version.html#method-i-bump","()","<p>Return a new version object where the next to the last revision number is\none greater (e.g., 5.3.1 =&gt; …\n"],["bytes_read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-bytes_read","()","<p>Number of bytes read out of the tar entry\n"],["cache_dir","Gem","Gem.html#method-c-cache_dir","(custom_dir=false)","<p>Get the appropriate cache path.\n<p>Pass a string to use a different base path, or nil/false (default) for …\n"],["cache_dir","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-cache_dir","(uri)","<p>Returns the local directory to write <code>uri</code> to.\n"],["cache_dir","Gem::Specification","Gem/Specification.html#method-i-cache_dir","()","<p>Returns the full path to the cache directory containing this spec’s cached\ngem.\n"],["cache_file","Gem::Specification","Gem/Specification.html#method-i-cache_file","()","<p>Returns the full path to the cached gem for this spec.\n"],["cache_gem","Gem","Gem.html#method-c-cache_gem","(filename, user_dir=false)","<p>Given a gem path, find the gem in cache.\n<p>Pass a string as the second argument to use a different base …\n"],["cache_gem","Gem::Specification","Gem/Specification.html#method-i-cache_gem","()",""],["calc_checksum","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-calc_checksum","(header)",""],["check_closed","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-check_closed","()","<p>Raises IOError if the TarWriter is closed\n"],["check_ruby_version","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-check_ruby_version","()",""],["check_that_user_bin_dir_is_in_path","Gem::Installer","Gem/Installer.html#method-i-check_that_user_bin_dir_is_in_path","()",""],["choose_from_list","Gem::StreamUI","Gem/StreamUI.html#method-i-choose_from_list","(question, list)","<p>Choose from a list of options.  <code>question</code> is a prompt displayed\nabove the list.  <code>list</code> is a list of option …\n"],["choose_from_list","Gem::UserInteraction","Gem/UserInteraction.html#method-i-choose_from_list","(*args)",""],["class_name","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-class_name","()",""],["clear","Gem::DependencyList","Gem/DependencyList.html#method-i-clear","()",""],["clear_paths","Gem","Gem.html#method-c-clear_paths","()","<p>Reset the <code>dir</code> and <code>path</code> values.  The next time\n<code>dir</code> or <code>path</code> is requested, the values will be\ncalculated …\n"],["close","Gem::Package::TarInput","Gem/Package/TarInput.html#method-i-close","()",""],["close","Gem::Package::TarOutput","Gem/Package/TarOutput.html#method-i-close","()","<p>Closes the TarOutput.\n"],["close","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-close","()","<p>Close the tar file\n"],["close","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-close","()","<p>Closes the tar entry\n"],["close","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-close","()","<p>Closes the TarWriter\n"],["closed?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-closed-3F","()","<p>Is the tar entry closed?\n"],["closed?","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-closed-3F","()","<p>Is the TarWriter closed?\n"],["collect_specs","Gem::Indexer","Gem/Indexer.html#method-i-collect_specs","(gems = gem_file_list)","<p>Collect specifications from .gem files from the gem directory.\n"],["command_names","Gem::CommandManager","Gem/CommandManager.html#method-i-command_names","()","<p>Return a sorted list of all command names (as strings).\n"],["common_options","Gem::Command","Gem/Command.html#method-c-common_options","()",""],["compact_specs","Gem::Indexer","Gem/Indexer.html#method-i-compact_specs","(specs)","<p>Compacts Marshal output for the specs index data source by using identical\nobjects as much as possible. …\n"],["complain","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-complain","(message)",""],["compress","Gem::Indexer","Gem/Indexer.html#method-i-compress","(filename, extension)","<p>Compress <code>filename</code> with <code>extension</code>.\n"],["compress_indicies","Gem::Indexer","Gem/Indexer.html#method-i-compress_indicies","()","<p>Compresses indicies on disk\n"],["config_file","Gem","Gem.html#method-c-config_file","()","<p>The path to standard location of the user’s .gemrc file.\n"],["config_file_name","Gem::ConfigFile","Gem/ConfigFile.html#method-i-config_file_name","()","<p>The name of the configuration file.\n"],["configuration","Gem","Gem.html#method-c-configuration","()","<p>The standard configuration object for gems.\n"],["configuration=","Gem","Gem.html#method-c-configuration-3D","(config)","<p>Use the given configuration object (which implements the ConfigFile\nprotocol) as the standard configuration …\n"],["configure_connection_for_https","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-configure_connection_for_https","(connection)",""],["configured_args","Gem::DocManager","Gem/DocManager.html#method-c-configured_args","()",""],["configured_args=","Gem::DocManager","Gem/DocManager.html#method-c-configured_args-3D","(args)",""],["conflicts","Gem::Specification","Gem/Specification.html#method-i-conflicts","()","<p>Return any possible conflicts against the currently loaded specs.\n"],["connection_for","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-connection_for","(uri)","<p>Creates or an HTTP connection based on <code>uri</code>, or retrieves an\nexisting connection, using a proxy if needed. …\n"],["contains_requirable_file?","Gem::Specification","Gem/Specification.html#method-i-contains_requirable_file-3F","(file)","<p>Return true if this spec can require <code>file</code>.\n"],["correct?","Version","Version.html#method-c-correct-3F","(version)","<p>True if the <code>version</code> string matches RubyGems’ requirements.\n"],["correct_for_windows_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-correct_for_windows_path","(path)",""],["create","Gem::Requirement","Gem/Requirement.html#method-c-create","(input)","<p>Factory method to create a Gem::Requirement object.  Input may be a\nVersion, a String, or nil.  Intended …\n"],["create","Gem::Requirement","Gem/Requirement.html#method-c-create","(input)","<p>Factory method to create a Gem::Requirement object.  Input may be a\nVersion, a String, or nil.  Intended …\n"],["create","Version","Version.html#method-c-create","(input)","<p>Factory method to create a Version object. Input may be a Version or a\nString. Intended to simplify client …\n"],["create_tmpdir","Gem::TestCase","Gem/TestCase.html#method-i-create_tmpdir","()","<p>creates a temporary directory with hax\n"],["credentials_path","Gem::ConfigFile","Gem/ConfigFile.html#method-i-credentials_path","()","<p>Location of RubyGems.org credentials\n"],["datadir","Gem","Gem.html#method-c-datadir","(gem_name)","<p>The path the the data directory specified by the gem name.  If the package\nis not available as a gem, …\n"],["date","Gem::Specification","Gem/Specification.html#method-i-date","()","<p>The date this gem was created. Lazily defaults to TODAY.\n"],["date=","Gem::Specification","Gem/Specification.html#method-i-date-3D","(date)","<p>The date this gem was created\n<p>Do not set this, it is set automatically when the gem is packaged.\n"],["debug","Gem::StreamUI","Gem/StreamUI.html#method-i-debug","(statement)","<p>Display a debug message on the same location as error messages.\n"],["default","Gem::Requirement","Gem/Requirement.html#method-c-default","()","<p>A default “version requirement” can surely <em>only</em> be ‘&gt;= 0’.\n"],["default","Gem::Requirement","Gem/Requirement.html#method-c-default","()","<p>A default “version requirement” can surely <em>only</em> be ‘&gt;= 0’.\n"],["default_bindir","Gem","Gem.html#method-c-default_bindir","()","<p>The default directory for binaries\n"],["default_dir","Gem","Gem.html#method-c-default_dir","()","<p>Default home directory path to be used if an alternate value is not\nspecified in the environment\n"],["default_exec_format","Gem","Gem.html#method-c-default_exec_format","()","<p>Deduce Ruby’s –program-prefix and –program-suffix from its install name\n"],["default_executable","Gem::Specification","Gem/Specification.html#method-i-default_executable","()","<p>The default executable for this gem.\n<p>Deprecated: The name of the gem is assumed to be the name of the …\n"],["default_path","Gem","Gem.html#method-c-default_path","()","<p>Default gem load path\n"],["default_rubygems_dirs","Gem","Gem.html#method-c-default_rubygems_dirs","()","<p>Paths where RubyGems’ .rb files and bin files are installed\n"],["default_sources","Gem","Gem.html#method-c-default_sources","()","<p>An Array of the default sources that come with RubyGems\n"],["default_system_source_cache_dir","Gem","Gem.html#method-c-default_system_source_cache_dir","()","<p>The default system-wide source info cache directory\n"],["default_user_source_cache_dir","Gem","Gem.html#method-c-default_user_source_cache_dir","()","<p>The default user-specific source info cache directory\n"],["default_value","Gem::Specification","Gem/Specification.html#method-i-default_value","(name)","<p>The default value for specification attribute <code>name</code>\n"],["defaults_str","Gem::Command","Gem/Command.html#method-i-defaults_str","()","<p>Override to display the default values of the command options. (similar to\n<code>arguments</code>, but displays the …\n"],["defaults_str","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-i-defaults_str","()",""],["define","Gem::PackageTask","Gem/PackageTask.html#method-i-define","()","<p>Create the Rake tasks and actions specified by this Gem::PackageTask.\n(<code>define</code> is automatically called …\n"],["deflate","Gem","Gem.html#method-c-deflate","(data)","<p>A Zlib::Deflate.deflate wrapper\n"],["dep","Gem::TestCase","Gem/TestCase.html#method-i-dep","(name, *requirements)","<p>Construct a new Gem::Dependency.\n"],["dependencies","Gem::Specification","Gem/Specification.html#method-i-dependencies","()","<p>A list of Gem::Dependency objects this gem depends on.\n<p>Use #add_dependency or #add_development_dependency …\n"],["dependencies_ok?","Gem::Uninstaller","Gem/Uninstaller.html#method-i-dependencies_ok-3F","(spec)",""],["dependency_order","Gem::DependencyList","Gem/DependencyList.html#method-i-dependency_order","()","<p>Return a list of the gem specifications in the dependency list, sorted in\norder so that no gemspec in …\n"],["dependent_gems","Gem::Specification","Gem/Specification.html#method-i-dependent_gems","()","<p>Return a list of all gems that have a dependency on this gemspec.  The list\nis structured with entries …\n"],["dependent_specs","Gem::Specification","Gem/Specification.html#method-i-dependent_specs","()","<p>Returns all specs that matches this spec’s runtime dependencies.\n"],["deprecate","Gem::Deprecate","Gem/Deprecate.html#method-c-deprecate","(name, repl, year, month)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it\nup in a dummy method. It warns on each …\n"],["description","Gem::Command","Gem/Command.html#method-i-description","()","<p>Override to display a longer description of what this command does.\n"],["description=","Gem::Specification","Gem/Specification.html#method-i-description-3D","(str)","<p>A long description of this gem\n"],["development_dependencies","Gem::Specification","Gem/Specification.html#method-i-development_dependencies","()","<p>List of dependencies that are used for development\n"],["dir","Gem","Gem.html#method-c-dir","()","<p>The path where gems are to be installed.\n"],["dir","Gem::Installer","Gem/Installer.html#method-i-dir","()","<p>Return the target directory where the gem is to be installed. This\ndirectory is not guaranteed to be …\n"],["directory?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-directory-3F","()","<p>Is this tar entry a directory?\n"],["dirs","Gem::Specification","Gem/Specification.html#method-c-dirs","()","<p>Return the directories that Specification uses to find specs.\n"],["dirs=","Gem::Specification","Gem/Specification.html#method-c-dirs-3D","(dirs)","<p>Set the directories that Specification uses to find specs. Setting this\nresets the list of known specs. …\n"],["doc_dir","Gem::Specification","Gem/Specification.html#method-i-doc_dir","()","<p>Returns the full path to this spec’s documentation directory.\n"],["done","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-done","()",""],["done","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-done","()",""],["done","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-i-done","()",""],["done","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["download","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-download","(spec, source_uri, install_dir = Gem.dir)",""],["download","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download","(spec, source_uri, install_dir = Gem.dir)","<p>Moves the gem <code>spec</code> from <code>source_uri</code> to the cache\ndir unless it is already there.  If the source_uri is …\n"],["download_reporter","Gem::SilentUI","Gem/SilentUI.html#method-i-download_reporter","(*args)",""],["download_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-download_reporter","(*args)","<p>Return a download reporter object chosen from the current verbosity\n"],["download_to_cache","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-download_to_cache","(dependency)",""],["download_to_cache","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download_to_cache","(dependency)","<p>Given a name and requirement, downloads this gem into cache and returns the\nfilename. Returns nil if …\n"],["dump","Gem::SourceIndex","Gem/SourceIndex.html#method-i-dump","()",""],["dump","Gem::SourceIndex","Gem/SourceIndex.html#method-i-dump","()",""],["each","Gem::ConfigFile","Gem/ConfigFile.html#method-i-each","(&block)","<p>Delegates to @hash\n"],["each","Gem::DependencyList","Gem/DependencyList.html#method-i-each","(&block)","<p>Iterator over dependency_order\n"],["each","Gem::Package::TarInput","Gem/Package/TarInput.html#method-i-each","(&block)",""],["each","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each","()","<p>Iterates over files in the tarball yielding each entry\n"],["each","Gem::SourceIndex","Gem/SourceIndex.html#method-i-each","()","<p>Iterate over the specifications in the source index.\n"],["each","Gem::SourceIndex","Gem/SourceIndex.html#method-i-each","()","<p>Iterate over the specifications in the source index.\n"],["each","Gem::Specification","Gem/Specification.html#method-c-each","()","<p>Enumerate every known spec.  See ::dirs= and ::add_spec to set the list of\nspecs.\n"],["each_entry","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each_entry","()",""],["email_to_name","Gem::Security","Gem/Security.html#method-c-email_to_name","(email_address, munge_re)","<p>Turns <code>email_address</code> into an OpenSSL::X509::Name\n"],["empty?","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-empty-3F","()","<p>Is the tar entry empty?\n"],["empty?","Gem::Platform","Gem/Platform.html#method-i-empty-3F","()",""],["ensure_dependencies_met","Gem::Installer","Gem/Installer.html#method-i-ensure_dependencies_met","()",""],["ensure_dependency","Gem::Installer","Gem/Installer.html#method-i-ensure_dependency","(spec, dependency)","<p>Ensure that the dependency is satisfied by the current installation of gem.\nIf it is not an exception …\n"],["ensure_gem_subdirectories","Gem","Gem.html#method-c-ensure_gem_subdirectories","(dir = Gem.dir)","<p>Quietly ensure the named Gem directory contains all the proper\nsubdirectories.  If we can’t create a …\n"],["ensure_required_ruby_version_met","Gem::Installer","Gem/Installer.html#method-i-ensure_required_ruby_version_met","()",""],["ensure_required_rubygems_version_met","Gem::Installer","Gem/Installer.html#method-i-ensure_required_rubygems_version_met","()",""],["ensure_ssl_available","Gem","Gem.html#method-i-ensure_ssl_available","()","<p>Ensure that SSL is available.  Throw an exception if it is not.\n"],["eof?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-eof-3F","()","<p>Are we at the end of the tar entry?\n"],["eql?","Gem::Platform","Gem/Platform.html#method-i-eql-3F","(other)",""],["eql?","Version","Version.html#method-i-eql-3F","(other)","<p>A Version is only eql? to another version if it’s specified to the same\nprecision. Version “1.0” …\n"],["error","Gem::MockGemUi","Gem/MockGemUi.html#method-i-error","()",""],["escape","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-escape","(str)",""],["exec_format","Gem::Installer","Gem/Installer.html#method-i-exec_format","()","<p>Defaults to use Ruby’s program prefix and suffix.\n"],["executable","Gem::Specification","Gem/Specification.html#method-i-executable","()","<p>Singular accessor for #executables\n"],["executable=","Gem::Specification","Gem/Specification.html#method-i-executable-3D","(o)","<p>Singular accessor for #executables\n"],["executables","Gem::Specification","Gem/Specification.html#method-i-executables","()","<p>Executables included in the gem.\n"],["executables=","Gem::Specification","Gem/Specification.html#method-i-executables-3D","(value)","<p>Sets executables to <code>value</code>, ensuring it is an array. Don’t use\nthis, push onto the array instead.\n"],["execute","Gem::Command","Gem/Command.html#method-i-execute","()","<p>Override to provide command handling.\n<p>#options will be filled in with your parsed options, unparsed options …\n"],["execute","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-execute","()",""],["execute","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-execute","()",""],["execute","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-execute","()",""],["execute","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-i-execute","()",""],["execute","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-i-execute","()",""],["execute","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-i-execute","()",""],["execute","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ListCommand","Gem/Commands/ListCommand.html#method-i-execute","()",""],["execute","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-execute","()",""],["execute","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-execute","()",""],["execute","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SearchCommand","Gem/Commands/SearchCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-i-execute","()",""],["execute","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-execute","()",""],["execute","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-execute","()",""],["extensions","Gem::Specification","Gem/Specification.html#method-i-extensions","()","<p>Extensions to build when installing the gem.  See\nGem::Installer#build_extensions for valid values.\n"],["extensions=","Gem::Specification","Gem/Specification.html#method-i-extensions-3D","(extensions)","<p>Sets extensions to <code>extensions</code>, ensuring it is an array. Don’t\nuse this, push onto the array instead. …\n"],["extra_args","Gem::Command","Gem/Command.html#method-c-extra_args","()",""],["extra_args=","Gem::Command","Gem/Command.html#method-c-extra_args-3D","(value)",""],["extra_rdoc_files","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files","()","<p>Extra files to add to RDoc such as README or doc/examples.txt\n"],["extra_rdoc_files=","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files-3D","(files)","<p>Sets extra_rdoc_files to <code>files</code>, ensuring it is an array. Don’t\nuse this, push onto the array instead. …\n"],["extract_entry","Gem::Package::TarInput","Gem/Package/TarInput.html#method-i-extract_entry","(destdir, entry, expected_md5sum = nil)",""],["extract_files","Gem::Installer","Gem/Installer.html#method-i-extract_files","()","<p>Reads the file index and extracts each file into the gem directory.\n<p>Ensures that files can’t be installed …\n"],["fetch","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-fetch","(*args)",""],["fetch","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-fetch","(filename, filesize)",""],["fetch","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-i-fetch","(file_name, total_bytes)",""],["fetch_file","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_file","(uri, *_)","<p>File Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_http","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_http","(uri, last_modified = nil, head = false, depth = 0)","<p>HTTP Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_https","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_https","(uri, last_modified = nil, head = false, depth = 0)",""],["fetch_path","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-fetch_path","(path, mtime = nil)",""],["fetch_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_path","(uri, mtime = nil, head = false)","<p>Downloads <code>uri</code> and returns it as a String.\n"],["fetch_size","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-fetch_size","(path)",""],["fetch_size","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_size","(uri)","<p>Returns the size of <code>uri</code> in bytes.\n"],["fetch_spec","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-fetch_spec","(spec, source_uri)",""],["fetch_with_errors","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-fetch_with_errors","(dependency, all = false, matching_platform = true, prerelease = false)","<p>Fetch specs matching <code>dependency</code>.  If <code>all</code> is true,\nall matching (released) versions are returned.  If …\n"],["fetcher","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-fetcher","()","<p>Cached RemoteFetcher instance.\n"],["fetcher","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-fetcher","()",""],["fetcher=","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-fetcher-3D","(fetcher)",""],["file?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-file-3F","()","<p>Is this tar entry a file?\n"],["file_name","Gem::Specification","Gem/Specification.html#method-i-file_name","()","<p>The default (generated) file name of the gem.  See also #spec_name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">file_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gem&quot;</span>\n</pre>\n"],["files","Gem::Specification","Gem/Specification.html#method-i-files","()","<p>Files included in this gem.  You cannot append to this accessor, you must\nassign to it.\n<p>Only add files …\n"],["files=","Gem::Specification","Gem/Specification.html#method-i-files-3D","(files)","<p>Sets files to <code>files</code>, ensuring it is an array.\n"],["find","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-find","(glob)","<p>Look in all the installed gems until a matching <code>glob</code> is found.\nReturn the <em>gemspec</em> of the gem where it …\n"],["find_active","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-find_active","(glob)",""],["find_all","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-find_all","(glob)","<p>Works like #find, but finds all gemspecs matching <code>glob</code>.\n"],["find_all_by_name","Gem::Specification","Gem/Specification.html#method-c-find_all_by_name","(name, *requirements)","<p>Returns every spec that matches <code>name</code> and optional\n<code>requirements</code>.\n"],["find_by_name","Gem::Specification","Gem/Specification.html#method-c-find_by_name","(name, *requirements)","<p>Find the best specification matching a <code>name</code> and\n<code>requirements</code>. Raises if the dependency doesn’t resolve …\n"],["find_by_path","Gem::Specification","Gem/Specification.html#method-c-find_by_path","(path)","<p>Return the best specification that contains the file matching\n<code>path</code>.\n"],["find_command","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command","(cmd_name)",""],["find_command_possibilities","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command_possibilities","(cmd_name)",""],["find_data","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-find_data","(path)",""],["find_files","Gem","Gem.html#method-c-find_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> that can be used by a\ngem to pick up features from other gems. …\n"],["find_gems_with_sources","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-find_gems_with_sources","(dep)","<p>Returns a list of pairs of gemspecs and source_uris that match\nGem::Dependency <code>dep</code> from both local (Dir.pwd) …\n"],["find_in_cache","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-find_in_cache","(filename)","<p>Find cached filename in Gem.path. Returns nil if the file cannot be found.\n"],["find_in_unresolved","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-find_in_unresolved","(glob)",""],["find_in_unresolved","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved","(path)","<p>Return currently unresolved specs that contain the file matching\n<code>path</code>.\n"],["find_in_unresolved_tree","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-find_in_unresolved_tree","(glob)",""],["find_in_unresolved_tree","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved_tree","(path)","<p>Search through all unresolved deps and sub-dependencies and return specs\nthat contain the file matching …\n"],["find_matching","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-find_matching","(*args)",""],["find_matching_with_errors","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-find_matching_with_errors","(dependency, all = false, matching_platform = true, prerelease = false)","<p>Find spec names that match <code>dependency</code>.  If <code>all</code> is\ntrue, all matching released versions are returned. …\n"],["find_name","Gem::DependencyList","Gem/DependencyList.html#method-i-find_name","(full_name)",""],["find_name","Gem::SourceIndex","Gem/SourceIndex.html#method-i-find_name","(gem_name, requirement = Gem::Requirement.default)","<p>Find a gem by an exact match on the short name.\n"],["find_name","Gem::SourceIndex","Gem/SourceIndex.html#method-i-find_name","(gem_name, requirement = Gem::Requirement.default)","<p>Find a gem by an exact match on the short name.\n"],["find_paths","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-find_paths","(package_name, dirs)",""],["find_reverse_dependencies","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-find_reverse_dependencies","(spec)","<p>Returns an Array of [specification, dep] that are satisfied by\n<code>spec</code>.\n"],["find_spec_by_name_and_version","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-find_spec_by_name_and_version","(gem_name, version = Gem::Requirement.default, prerelease = false)","<p>Finds a spec and the source_uri it came from for gem <code>gem_name</code>\nand <code>version</code>.  Returns an Array of specs …\n"],["find_spec_for_file","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-find_spec_for_file","(file)","<p>Looks through the available gemspecs and finds the first one that contains\n<code>file</code> as a requirable file. …\n"],["flush","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-flush","()","<p>Flushes the TarWriter’s IO\n"],["for_cache","Gem::Specification","Gem/Specification.html#method-i-for_cache","()","<p>Creates a duplicate spec without large blobs that aren’t used at runtime.\n"],["format","Gem::Installer","Gem/Installer.html#method-i-format","()","<p>Lazy accessor for the installer’s Gem::Format instance.\n"],["format_text","Gem::Text","Gem/Text.html#method-i-format_text","(text, wrap, indent=0)","<p>Wraps <code>text</code> to <code>wrap</code> characters and optionally\nindents by <code>indent</code> characters\n"],["formatted_program_filename","Gem::Installer","Gem/Installer.html#method-i-formatted_program_filename","(filename)","<p>Prefix and suffix the program filename the same as ruby.\n"],["formatted_program_filename","Gem::Uninstaller","Gem/Uninstaller.html#method-i-formatted_program_filename","(filename)",""],["from","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-from","(stream)","<p>Creates a tar header from IO <code>stream</code>\n"],["from_file_by_path","Gem::Format","Gem/Format.html#method-c-from_file_by_path","(file_path, security_policy = nil)","<p>Reads the gem <code>file_path</code> using <code>security_policy</code> and\nreturns a Format representing the data in the gem\n"],["from_file_by_path","Gem::OldFormat","Gem/OldFormat.html#method-c-from_file_by_path","(file_path)","<p>Reads the named gem file and returns a Format object, representing the data\nfrom the gem file\n<p>file_path … &mdash; "],["from_gems_in","Gem::SourceIndex","Gem/SourceIndex.html#method-c-from_gems_in","(*spec_dirs)","<p>Creates a new SourceIndex from the ruby format gem specifications in\n<code>spec_dirs</code>.\n"],["from_gems_in","Gem::SourceIndex","Gem/SourceIndex.html#method-c-from_gems_in","(*spec_dirs)","<p>Creates a new SourceIndex from the ruby format gem specifications in\n<code>spec_dirs</code>.\n"],["from_installed_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-c-from_installed_gems","(*deprecated)","<p>Factory method to construct a source index instance for a given path.\n<p>deprecated &mdash; If supplied, from_installed_gems …\n"],["from_installed_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-c-from_installed_gems","(*deprecated)","<p>Factory method to construct a source index instance for a given path.\n<p>deprecated &mdash; If supplied, from_installed_gems …\n"],["from_io","Gem::Format","Gem/Format.html#method-c-from_io","(io, gem_path=\"(io)\", security_policy = nil)","<p>Reads a gem from <code>io</code> at <code>gem_path</code> using\n<code>security_policy</code> and returns a Format representing the data\nfrom …\n"],["from_io","Gem::OldFormat","Gem/OldFormat.html#method-c-from_io","(io, gem_path=\"(io)\")","<p>Reads a gem from an io stream and returns a Format object, representing the\ndata from the gem file\n<p>io … &mdash; "],["from_source_index","Gem::DependencyList","Gem/DependencyList.html#method-c-from_source_index","(ignored=nil)","<p>Creates a DependencyList from a Gem::SourceIndex <code>source_index</code>\n"],["from_specs","Gem::DependencyList","Gem/DependencyList.html#method-c-from_specs","()","<p>Creates a DependencyList from the current specs.\n"],["from_yaml","Gem::Specification","Gem/Specification.html#method-c-from_yaml","(input)","<p>Special loader for YAML files.  When a Specification object is loaded from\na YAML file, it bypasses the …\n"],["full_gem_path","Gem::Specification","Gem/Specification.html#method-i-full_gem_path","()","<p>The full path to the gem (install path + full name).\n"],["full_name","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-full_name","()","<p>Full name of the tar entry\n"],["full_name","Gem::Specification","Gem/Specification.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is\nincluded (name-version-platform) …\n"],["gather_dependencies","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-gather_dependencies","()","<p>Gathers all dependencies necessary for the installation from local and\nremote sources unless the ignore_dependencies …\n"],["gem","Kernel","Kernel.html#method-i-gem","(gem_name, *requirements)","<p>Use Kernel#gem to activate a specific version of <code>gem_name</code>.\n<p><code>requirements</code> is a list of version requirements ...\n"],["gem_dir","Gem::Installer","Gem/Installer.html#method-i-gem_dir","()","<p>Lazy accessor for the spec’s gem directory.\n"],["gem_dir","Gem::Specification","Gem/Specification.html#method-i-gem_dir","()","<p>Returns the full path to this spec’s gem directory. eg:\n/usr/local/lib/ruby/1.8/gems/mygem-1.0\n"],["gem_file_list","Gem::Indexer","Gem/Indexer.html#method-i-gem_file_list","()","<p>List of gem file names to index.\n"],["gem_original_require","Kernel","Kernel.html#method-i-gem_original_require","(path)","<p>The Kernel#require from before RubyGems was loaded.\n"],["gem_paths","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-gem_paths","(spec)",""],["gem_signature","Gem::SourceIndex","Gem/SourceIndex.html#method-i-gem_signature","(gem_full_name)","<p>The signature for the given gem specification.\n"],["gem_signature","Gem::SourceIndex","Gem/SourceIndex.html#method-i-gem_signature","(gem_full_name)","<p>The signature for the given gem specification.\n"],["gems_dir","Gem::Specification","Gem/Specification.html#method-i-gems_dir","()","<p>Returns the full path to the gems directory containing this spec’s gem\ndirectory. eg: /usr/local/lib/ruby/1.8/gems …\n"],["generate_bin","Gem::Installer","Gem/Installer.html#method-i-generate_bin","()",""],["generate_bin_script","Gem::Installer","Gem/Installer.html#method-i-generate_bin_script","(filename, bindir)","<p>Creates the scripts to run the applications in the gem.\n"],["generate_bin_symlink","Gem::Installer","Gem/Installer.html#method-i-generate_bin_symlink","(filename, bindir)","<p>Creates the symlinks to run the applications in the gem.  Moves the symlink\nif the gem being installed …\n"],["generate_default_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-generate_default_dirs","(install_destdir)",""],["generate_index","Gem::Indexer","Gem/Indexer.html#method-i-generate_index","()","<p>Builds and installs indicies.\n"],["generate_rdoc","Gem::DocManager","Gem/DocManager.html#method-i-generate_rdoc","()","<p>Generate the RDoc documents for this gem spec.\n<p>Note that if both RI and RDoc documents are generated from …\n"],["generate_ri","Gem::DocManager","Gem/DocManager.html#method-i-generate_ri","()","<p>Generate the RI documents for this gem spec.\n<p>Note that if both RI and RDoc documents are generated from …\n"],["generate_windows_script","Gem::Installer","Gem/Installer.html#method-i-generate_windows_script","(filename, bindir)","<p>Creates windows .bat files for easy running of commands\n"],["get_all_gem_names","Gem::Command","Gem/Command.html#method-i-get_all_gem_names","()","<p>Get all gem names from the command line.\n"],["get_metadata","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-get_metadata","(path)","<p>Extracts the Gem::Specification and raw metadata from the .gem file at\n<code>path</code>.\n"],["get_one_gem_name","Gem::Command","Gem/Command.html#method-i-get_one_gem_name","()","<p>Get a single gem name from the command line.  Fail if there is no gem name\nor if there is more than one …\n"],["get_one_optional_argument","Gem::Command","Gem/Command.html#method-i-get_one_optional_argument","()","<p>Get a single optional argument from the command line.  If more than one\nargument is given, return only …\n"],["get_path","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-get_path","(dependency)","<p>Return the full path to the cached gem file matching the given name and\nversion requirement.  Returns …\n"],["get_proxy_from_env","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-get_proxy_from_env","()","<p>Returns an HTTP proxy URI if one is set in the environment variables.\n"],["getc","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-getc","()","<p>Read one byte from the tar entry\n"],["gunzip","Gem","Gem.html#method-c-gunzip","(data)","<p>Zlib::GzipReader wrapper that unzips <code>data</code>.\n"],["gzip","Gem","Gem.html#method-c-gzip","(data)","<p>Zlib::GzipWriter wrapper that zips <code>data</code>.\n"],["gzip","Gem::Indexer","Gem/Indexer.html#method-i-gzip","(filename)","<p>Zlib::GzipWriter wrapper that gzips <code>filename</code> on disk.\n"],["handle_arguments","Gem::ConfigFile","Gem/ConfigFile.html#method-i-handle_arguments","(arg_list)","<p>Handle the command arguments.\n"],["handle_options","Gem::Command","Gem/Command.html#method-i-handle_options","(args)","<p>Handle the given list of arguments by parsing them and recording the\nresults.\n"],["handles?","Gem::Command","Gem/Command.html#method-i-handles-3F","(args)","<p>True if the command handles the given argument list.\n"],["has_rdoc","Gem::Specification","Gem/Specification.html#method-i-has_rdoc","()","<p>Deprecated and ignored, defaults to true.\n<p>Formerly used to indicate this gem was RDoc-capable.\n"],["has_rdoc=","Gem::Specification","Gem/Specification.html#method-i-has_rdoc-3D","(ignored)","<p>Deprecated and ignored.\n<p>Formerly used to indicate this gem was RDoc-capable.\n"],["has_rdoc?","Gem::Specification","Gem/Specification.html#method-i-has_rdoc-3F","()",""],["has_unit_tests?","Gem::Specification","Gem/Specification.html#method-i-has_unit_tests-3F","()","<p>True if this gem has files in test_files\n"],["header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-header","(type, fname, dname, length, mode, checksum = nil)",""],["host","Gem","Gem.html#method-c-host","()","<p>Get the default RubyGems API host. This is normally\n<code>https://rubygems.org</code>.\n"],["host=","Gem","Gem.html#method-c-host-3D","(host)","<p>Set the default RubyGems API host.\n"],["https?","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-https-3F","(uri)",""],["index_signature","Gem::SourceIndex","Gem/SourceIndex.html#method-i-index_signature","()","<p>The signature for the source index.  Changes in the signature indicate a\nchange in the index.\n"],["index_signature","Gem::SourceIndex","Gem/SourceIndex.html#method-i-index_signature","()","<p>The signature for the source index.  Changes in the signature indicate a\nchange in the index.\n"],["inflate","Gem","Gem.html#method-c-inflate","(data)","<p>A Zlib::Inflate#inflate wrapper\n"],["init","Gem::PackageTask","Gem/PackageTask.html#method-i-init","(gem)","<p>Initialization tasks without the “yield self” or define operations.\n"],["init_gemspecs","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-init_gemspecs","()","<p>Return a list of all installed gemspecs, sorted by alphabetical order and\nin reverse version order.  …\n"],["initialize_copy","Gem::Specification","Gem/Specification.html#method-i-initialize_copy","(other_spec)","<p>Duplicates array_attributes from <code>other_spec</code> so state isn’t\nshared.\n"],["input","Gem::MockGemUi","Gem/MockGemUi.html#method-i-input","()",""],["inspect","Gem::Platform","Gem/Platform.html#method-i-inspect","()",""],["install","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-install","(dep_or_name, version = Gem::Requirement.default)","<p>Installs the gem <code>dep_or_name</code> and all its dependencies. \nReturns an Array of installed gem specifications. …\n"],["install","Gem::Installer","Gem/Installer.html#method-i-install","()","<p>Installs the gem and returns a loaded Gem::Specification for the installed\ngem.\n<p>The gem will be installed …\n"],["install_executables","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_executables","(bin_dir)",""],["install_gem","Gem::TestCase","Gem/TestCase.html#method-i-install_gem","(spec, options = {})","<p>Builds and installs the Gem::Specification <code>spec</code>\n"],["install_gem_user","Gem::TestCase","Gem/TestCase.html#method-i-install_gem_user","(spec)","<p>Builds and installs the Gem::Specification <code>spec</code> into the user\ndir\n"],["install_indicies","Gem::Indexer","Gem/Indexer.html#method-i-install_indicies","()","<p>Install generated indicies into the destination directory.\n"],["install_lib","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_lib","(lib_dir)",""],["install_rdoc","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_rdoc","()",""],["install_rdoc","Gem::DocManager","Gem/DocManager.html#method-i-install_rdoc","()","<p>Generate and install RDoc into the documentation directory\n"],["install_ri","Gem::DocManager","Gem/DocManager.html#method-i-install_ri","()","<p>Generate and install RI into the documentation directory\n"],["install_specs","Gem::TestCase","Gem/TestCase.html#method-i-install_specs","(*specs)","<p>Install the provided specs\n"],["install_update_defaults_str","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-install_update_defaults_str","()","<p>Default options for the gem install command.\n"],["installation_path","Gem::Specification","Gem/Specification.html#method-i-installation_path","()","<p>The directory that this gem was installed into. TODO: rename - horrible.\nthis is the base_dir for a gem …\n"],["installation_satisfies_dependency?","Gem::Installer","Gem/Installer.html#method-i-installation_satisfies_dependency-3F","(dependency)","<p>True if the gems in the source_index satisfy <code>dependency</code>.\n"],["installed_spec_directories","Gem::SourceIndex","Gem/SourceIndex.html#method-c-installed_spec_directories","()","<p>Returns a list of directories from Gem.path that contain specifications.\n"],["installed_spec_directories","Gem::SourceIndex","Gem/SourceIndex.html#method-c-installed_spec_directories","()","<p>Returns a list of directories from Gem.path that contain specifications.\n"],["instance","Gem::CommandManager","Gem/CommandManager.html#method-c-instance","()","<p>Return the authoritative instance of the command manager.\n"],["invoke","Gem::Command","Gem/Command.html#method-i-invoke","(*args)","<p>Invoke the command with the given list of arguments.\n"],["latest_load_paths","Gem","Gem.html#method-c-latest_load_paths","()","<p>Return a list of all possible load paths for the latest version for all\ngems in the Gem installation. …\n"],["latest_rubygems_version","Gem","Gem.html#method-c-latest_rubygems_version","()",""],["latest_spec_for","Gem","Gem.html#method-c-latest_spec_for","(name)",""],["latest_specs","Gem::Server","Gem/Server.html#method-i-latest_specs","(req, res)",""],["latest_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-latest_specs","(include_prerelease=false)","<p>Returns an Array specifications for the latest released versions of each\ngem in this index.\n"],["latest_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-latest_specs","(include_prerelease=false)","<p>Returns an Array specifications for the latest released versions of each\ngem in this index.\n"],["latest_specs","Gem::Specification","Gem/Specification.html#method-c-latest_specs","(prerelease = false)","<p>Return the latest specs, optionally including prerelease specs if\n<code>prerelease</code> is true.\n"],["latest_version_for","Gem","Gem.html#method-c-latest_version_for","(name)",""],["launch","Gem::Server","Gem/Server.html#method-i-launch","()",""],["length","Gem::SourceIndex","Gem/SourceIndex.html#method-i-length","()",""],["length","Gem::SourceIndex","Gem/SourceIndex.html#method-i-length","()",""],["levenshtein_distance","Gem::Text","Gem/Text.html#method-i-levenshtein_distance","(str1, str2)","<p>This code is based directly on the Text gem implementation Returns a value\nrepresenting the “cost” …\n"],["lib_dirs_for","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-lib_dirs_for","(spec)","<p>Returns library directories glob for a gemspec.  For example,\n\n<pre>'/usr/local/lib/ruby/gems/1.8/gems/foobar-1.0/{lib,ext}'</pre>\n"],["lib_dirs_glob","Gem::Specification","Gem/Specification.html#method-i-lib_dirs_glob","()","<p>Returns a string usable in Dir.glob to match all requirable paths for this\nspec.\n"],["lib_files","Gem::Specification","Gem/Specification.html#method-i-lib_files","()","<p>Files in the Gem under one of the require_paths\n"],["license","Gem::Specification","Gem/Specification.html#method-i-license","()","<p>Singular accessor for #licenses\n"],["license=","Gem::Specification","Gem/Specification.html#method-i-license-3D","(o)","<p>Singular accessor for #licenses\n"],["licenses","Gem::Specification","Gem/Specification.html#method-i-licenses","()","<p>The license(s) for the library.  Each license must be a short name, no more\nthan 64 characters.\n"],["licenses=","Gem::Specification","Gem/Specification.html#method-i-licenses-3D","(licenses)","<p>Set licenses to <code>licenses</code>, ensuring it is an array.\n"],["list","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-list","(all = false, prerelease = false)","<p>Returns a list of gems available for each source in Gem::sources.  If\n<code>all</code> is true, all released versions …\n"],["listen","Gem::Server","Gem/Server.html#method-i-listen","(addresses = @addresses)","<p>Creates server sockets based on the addresses option.  If no addresses were\ngiven a server socket for …\n"],["load","Gem::Specification","Gem/Specification.html#method-c-load","(file)","<p>Loads Ruby format gemspec from <code>file</code>.\n"],["load_api_keys","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_api_keys","()",""],["load_env_plugins","Gem","Gem.html#method-c-load_env_plugins","()","<p>Find all ‘rubygems_plugin’ files in $LOAD_PATH and load them\n"],["load_file","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_file","(filename)",""],["load_gems_in","Gem::SourceIndex","Gem/SourceIndex.html#method-i-load_gems_in","(*spec_dirs)","<p>Reconstruct the source index from the specifications in\n<code>spec_dirs</code>.\n"],["load_gems_in","Gem::SourceIndex","Gem/SourceIndex.html#method-i-load_gems_in","(*spec_dirs)","<p>Reconstruct the source index from the specifications in\n<code>spec_dirs</code>.\n"],["load_gemspec","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-load_gemspec","(filename)",""],["load_gemspec","Gem::Package::TarInput","Gem/Package/TarInput.html#method-i-load_gemspec","(io)","<p>Attempt to YAML-load a gemspec from the given <em>io</em> parameter. \nReturn nil if it fails.\n"],["load_path_insert_index","Gem","Gem.html#method-c-load_path_insert_index","()","<p>The index to insert activated gem paths into the $LOAD_PATH.\n<p>Defaults to the site lib directory unless …\n"],["load_plugin_files","Gem","Gem.html#method-c-load_plugin_files","(plugins)","<p>Load <code>plugins</code> as ruby files\n"],["load_plugins","Gem","Gem.html#method-c-load_plugins","()","<p>Find all ‘rubygems_plugin’ files in installed gems and load them\n"],["load_rdoc","Gem::DocManager","Gem/DocManager.html#method-c-load_rdoc","()","<p>Load RDoc from a gem if it is available, otherwise from Ruby’s stdlib\n"],["load_specification","Gem::SourceIndex","Gem/SourceIndex.html#method-c-load_specification","(file_name)","<p>Loads a ruby-format specification from <code>file_name</code> and returns\nthe loaded spec.\n"],["load_specification","Gem::SourceIndex","Gem/SourceIndex.html#method-c-load_specification","(file_name)","<p>Loads a ruby-format specification from <code>file_name</code> and returns\nthe loaded spec.\n"],["load_specs","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-load_specs","(source_uri, file)","<p>Loads specs in <code>file</code>, fetching from <code>source_uri</code> if\nthe on-disk cache is out of date.\n"],["load_yaml","Gem","Gem.html#method-c-load_yaml","()","<p>Loads YAML, preferring Psych\n"],["loaded_from=","Gem::Specification","Gem/Specification.html#method-i-loaded_from-3D","(path)","<p>Set the location a Specification was loaded from. <code>obj</code> is\nconverted to a String.\n"],["loaded_path?","Gem","Gem.html#method-c-loaded_path-3F","(path)",""],["local","Gem::Platform","Gem/Platform.html#method-c-local","()",""],["local?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-local-3F","()","<p>Is local fetching enabled?\n"],["location_of_caller","Gem","Gem.html#method-c-location_of_caller","()","<p>The file name and line number of the caller of the caller of this method.\n"],["make","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-make","(dest_path, results)",""],["make_command","Gem::TestCase","Gem/TestCase.html#method-i-make_command","()","<p>Returns the make command for the current platform. For versions of Ruby\nbuilt on MS Windows with VC++ …\n"],["make_command","Gem::TestCase","Gem/TestCase.html#method-c-make_command","()","<p>Returns the make command for the current platform. For versions of Ruby\nbuilt on MS Windows with VC++ …\n"],["make_destination_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-make_destination_dirs","(install_destdir)",""],["make_temp_directories","Gem::Indexer","Gem/Indexer.html#method-i-make_temp_directories","()","<p>Make directories for index generation\n"],["manage_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-manage_owners","(method, name, owners)",""],["map_gems_to_specs","Gem::Indexer","Gem/Indexer.html#method-i-map_gems_to_specs","(gems)",""],["mark_version","Gem::Specification","Gem/Specification.html#method-i-mark_version","()","<p>Sets the rubygems_version to the current RubyGems version.\n"],["marshal_dump","Version","Version.html#method-i-marshal_dump","()","<p>Dump only the raw version string, not the complete object. It’s a string\nfor backwards (RubyGems 1.3.5 …\n"],["marshal_load","Version","Version.html#method-i-marshal_load","(array)","<p>Load custom marshal format. It’s a string for backwards (RubyGems 1.3.5 and\nearlier) compatibility.\n"],["marshal_version","Gem","Gem.html#method-c-marshal_version","()","<p>The version of the Marshal format for your Ruby.\n"],["match","Gem::Platform","Gem/Platform.html#method-c-match","(platform)",""],["match?","Gem::Dependency","Gem/Dependency.html#method-i-match-3F","(name, version)",""],["matches_for_glob","Gem::Specification","Gem/Specification.html#method-i-matches_for_glob","(glob)","<p>Return all files in this gem that match for <code>glob</code>.\n"],["matches_spec?","Gem::Dependency","Gem/Dependency.html#method-i-matches_spec-3F","(spec)",""],["matching_file?","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-matching_file-3F","(spec, path)","<p>Attempts to find a matching path using the require_paths of the given\n<code>spec</code>.\n"],["matching_files","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-matching_files","(spec, path)","<p>Returns files matching <code>path</code> in <code>spec</code>.\n"],["matching_paths","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-i-matching_paths","(spec, path)",""],["matching_specs","Gem::Dependency","Gem/Dependency.html#method-i-matching_specs","(platform_only = false)",""],["merge","Gem::Dependency","Gem/Dependency.html#method-i-merge","(other)","<p>Merges the requirements of <code>other</code> into this dependency\n"],["merge_options","Gem::Command","Gem/Command.html#method-i-merge_options","(new_options)","<p>Merge a set of command options with the set of default options (without\nmodifying the default option …\n"],["mkdir","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-mkdir","(name, mode)","<p>Creates a new directory in the tar file <code>name</code> with\n<code>mode</code>\n"],["mu_pp","Gem::TestCase","Gem/TestCase.html#method-i-mu_pp","(obj)","<p>Enables pretty-print for all tests\n"],["new","Gem::Builder","Gem/Builder.html#method-c-new","(spec)","<p>Constructs a builder instance for the provided specification\n<p>spec &mdash; <p>Gem::Specification &mdash; The specification …\n\n\n"],["new","Gem::Command","Gem/Command.html#method-c-new","(command, summary=nil, defaults={})","<p>Initializes a generic gem command named <code>command</code>. \n<code>summary</code> is a short description displayed in `gem help …\n"],["new","Gem::CommandManager","Gem/CommandManager.html#method-c-new","()","<p>Register all the subcommands supported by the gem command.\n"],["new","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-c-new","()",""],["new","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-c-new","()",""],["new","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-c-new","()",""],["new","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-c-new","()",""],["new","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-c-new","()",""],["new","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-c-new","()",""],["new","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-c-new","()",""],["new","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-c-new","()",""],["new","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-c-new","()",""],["new","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-c-new","()",""],["new","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-c-new","()",""],["new","Gem::Commands::ListCommand","Gem/Commands/ListCommand.html#method-c-new","()",""],["new","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-c-new","()",""],["new","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-c-new","()",""],["new","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-c-new","()",""],["new","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-c-new","()",""],["new","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-c-new","()",""],["new","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-c-new","(name = 'query', summary = 'Query gem information in local or remote repositories')",""],["new","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-c-new","()",""],["new","Gem::Commands::SearchCommand","Gem/Commands/SearchCommand.html#method-c-new","()",""],["new","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-c-new","()",""],["new","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-c-new","()",""],["new","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-c-new","()",""],["new","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-c-new","()",""],["new","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-c-new","()",""],["new","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-c-new","()",""],["new","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-c-new","()",""],["new","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-c-new","()",""],["new","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-c-new","()",""],["new","Gem::ConfigFile","Gem/ConfigFile.html#method-c-new","(arg_list)","<p>Create the config file object.  <code>args</code> is the list of arguments\nfrom the command line.\n<p>The following command …\n"],["new","Gem::ConsoleUI","Gem/ConsoleUI.html#method-c-new","()",""],["new","Gem::Dependency","Gem/Dependency.html#method-c-new","(name, *requirements)","<p>Constructs a dependency with <code>name</code> and\n<code>requirements</code>. The last argument can optionally be the\ndependency …\n"],["new","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-c-new","(options = {})","<p>Creates a new installer instance.\n<p>Options are:\n<p>:cache_dir &mdash; Alternate repository path to store .gem files …\n"],["new","Gem::DependencyList","Gem/DependencyList.html#method-c-new","(development = false)","<p>Creates a new DependencyList.  If <code>development</code> is true,\ndevelopment dependencies will be included.\n"],["new","Gem::DocManager","Gem/DocManager.html#method-c-new","(spec, rdoc_args=\"\")","<p>Create a document manager for <code>spec</code>. <code>rdoc_args</code>\ncontains arguments for RDoc (template etc.) as a String …\n"],["new","Gem::FakeFetcher","Gem/FakeFetcher.html#method-c-new","()",""],["new","Gem::FilePermissionError","Gem/FilePermissionError.html#method-c-new","(path)",""],["new","Gem::Format","Gem/Format.html#method-c-new","(gem_path)","<p>Constructs a Format representing the gem’s data which came from\n<code>gem_path</code>\n"],["new","Gem::GemNotFoundException","Gem/GemNotFoundException.html#method-c-new","(msg, name=nil, version=nil, errors=nil)",""],["new","Gem::GemPathSearcher","Gem/GemPathSearcher.html#method-c-new","()","<p>Initialise the data we need to make searches later.\n"],["new","Gem::GemRunner","Gem/GemRunner.html#method-c-new","(options={})",""],["new","Gem::Indexer","Gem/Indexer.html#method-c-new","(directory, options = {})","<p>Create an indexer that will index the gems in <code>directory</code>.\n"],["new","Gem::Installer","Gem/Installer.html#method-c-new","(gem, options={})","<p>Constructs an Installer instance that will install the gem located at\n<code>gem</code>.  <code>options</code> is a Hash with the …\n"],["new","Gem::MockGemUi","Gem/MockGemUi.html#method-c-new","(input = \"\")",""],["new","Gem::MockGemUi::TermError","Gem/MockGemUi/TermError.html#method-c-new","(exit_code)",""],["new","Gem::OldFormat","Gem/OldFormat.html#method-c-new","(gem_path)","<p>Constructs an instance of a Format object, representing the gem’s data\nstructure.\n<p>gem &mdash; <p>String &mdash; The file …\n\n\n"],["new","Gem::Package::FormatError","Gem/Package/FormatError.html#method-c-new","(message, path = nil)",""],["new","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-new","(vals)","<p>Creates a new TarHeader using <code>vals</code>\n"],["new","Gem::Package::TarInput","Gem/Package/TarInput.html#method-c-new","(io, security_policy = nil)",""],["new","Gem::Package::TarOutput","Gem/Package/TarOutput.html#method-c-new","(io, signer)","<p>Creates a new TarOutput that will write a gem-format tar file to\n<code>io</code>.  If <code>signer</code> is given, the data.tar.gz …\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new tar file reader on <code>io</code> which needs to respond to\n#pos, #eof?, #read, #getc and #pos=\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new TarReader on <code>io</code> and yields it to the block, if\ngiven.\n"],["new","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-c-new","(header, io)","<p>Creates a new tar entry for <code>header</code> that will be read from\n<code>io</code>\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter, yielding it if a block is given\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter that will write to <code>io</code>\n"],["new","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-c-new","(io, limit)","<p>Wraps <code>io</code> and allows up to <code>limit</code> bytes to be\nwritten\n"],["new","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-c-new","(io)","<p>Creates a new RestrictedStream wrapping <code>io</code>\n"],["new","Gem::PackageTask","Gem/PackageTask.html#method-c-new","(gem_spec)","<p>Create a Gem Package task library.  Automatically define the gem if a block\nis given.  If no block is …\n"],["new","Gem::PathSupport","Gem/PathSupport.html#method-c-new","(env=ENV)","<p>Constructor. Takes a single argument which is to be treated like a\nhashtable, or defaults to ENV, the …\n"],["new","Gem::Platform","Gem/Platform.html#method-c-new","(arch)",""],["new","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-c-new","(name, version)",""],["new","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-new","(proxy = nil)","<p>Initialize a remote fetcher using the source URI and possible proxy\ninformation.\n<p><code>proxy</code>\n<p>[String]: explicit …\n"],["new","Gem::RemoteFetcher::FetchError","Gem/RemoteFetcher/FetchError.html#method-c-new","(message, uri)",""],["new","Gem::Requirement","Gem/Requirement.html#method-c-new","(*requirements)","<p>Constructs a requirement from <code>requirements</code>. Requirements can\nbe Strings, Gem::Versions, or Arrays of …\n"],["new","Gem::Requirement","Gem/Requirement.html#method-c-new","(*requirements)","<p>Constructs a requirement from <code>requirements</code>. Requirements can\nbe Strings, Gem::Versions, or Arrays of …\n"],["new","Gem::Security::Policy","Gem/Security/Policy.html#method-c-new","(policy = {}, opt = {})","<p>Create a new Gem::Security::Policy object with the given mode and options.\n"],["new","Gem::Security::Signer","Gem/Security/Signer.html#method-c-new","(key, cert_chain)",""],["new","Gem::Server","Gem/Server.html#method-c-new","(gem_dirs, port, daemon, launch = nil, addresses = nil)","<p>Only the first directory in gem_dirs is used for serving gems\n"],["new","Gem::SilentUI","Gem/SilentUI.html#method-c-new","()",""],["new","Gem::SourceIndex","Gem/SourceIndex.html#method-c-new","(specs_or_dirs = [])","<p>Constructs a source index instance from the provided specifications, which\nis a Hash of gem full names …\n"],["new","Gem::SourceIndex","Gem/SourceIndex.html#method-c-new","(specs_or_dirs = [])","<p>Constructs a source index instance from the provided specifications, which\nis a Hash of gem full names …\n"],["new","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-new","()",""],["new","Gem::Specification","Gem/Specification.html#method-c-new","(name = nil, version = nil)","<p>Specification constructor. Assigns the default values to the attributes and\nyields itself for further …\n"],["new","Gem::StreamUI","Gem/StreamUI.html#method-c-new","(in_stream, out_stream, err_stream=STDERR, usetty=true)",""],["new","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-c-new","(out_stream, *args)",""],["new","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = nil)",""],["new","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = \"complete\")",""],["new","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-c-new","(out_stream, *args)",""],["new","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = 'complete')",""],["new","Gem::SystemExitException","Gem/SystemExitException.html#method-c-new","(exit_code)",""],["new","Gem::Uninstaller","Gem/Uninstaller.html#method-c-new","(gem, options = {})","<p>Constructs an uninstaller that will uninstall <code>gem</code>\n"],["new","Gem::Validator","Gem/Validator.html#method-c-new","()",""],["new","TempIO","TempIO.html#method-c-new","(string = '')",""],["new","Version","Version.html#method-c-new","(version)","<p>Constructs a Version from the <code>version</code> string.  A version\nstring is a series of digits or ASCII letters …\n"],["new_spec","Gem::TestCase","Gem/TestCase.html#method-i-new_spec","(name, version, deps = nil, *files)","<p>Create a new spec (or gem if passed an array of files) and set it up\nproperly. Use this instead of util_spec …\n"],["nmake_found?","Gem::TestCase","Gem/TestCase.html#method-i-nmake_found-3F","()","<p>Returns whether or not the nmake command could be found.\n"],["noecho","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-noecho","()",""],["non_nil_attributes","Gem::Specification","Gem/Specification.html#method-c-non_nil_attributes","()","<p>Specification attributes that must be non-nil\n"],["none?","Gem::Requirement","Gem/Requirement.html#method-i-none-3F","()",""],["none?","Gem::Requirement","Gem/Requirement.html#method-i-none-3F","()",""],["normalize","Gem::Specification","Gem/Specification.html#method-i-normalize","()","<p>Normalize the list of files so that:\n<p>All file lists have redundancies removed.\n<p>Files referenced in the …\n"],["normalize_uri","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-normalize_uri","(uri)","<p>Normalize the URI by adding “http://” if it is missing.\n"],["normalize_yaml_input","Gem::Specification","Gem/Specification.html#method-c-normalize_yaml_input","(input)","<p>Make sure the YAML specification is properly formatted with dashes\n"],["ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok-3F","()","<p>Are all the dependencies in the list satisfied?\n"],["ok_to_remove?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok_to_remove-3F","(full_name)","<p>Is is ok to remove a gemspec from the dependency list?\n<p>If removing the gemspec creates breaks a currently …\n"],["open","Gem::Package","Gem/Package.html#method-c-open","(io, mode = \"r\", signer = nil, &block)","<p>FIX: zenspider said: does it really take an IO? passed to a method called\nopen?!? that seems stupid. …\n"],["open","Gem::Package::TarInput","Gem/Package/TarInput.html#method-c-open","(io, security_policy = nil, &block)",""],["open","Gem::Package::TarOutput","Gem/Package/TarOutput.html#method-c-open","(io, signer = nil)","<p>Creates a new TarOutput which will yield a TarWriter object for the\ndata.tar.gz portion of a gem-format …\n"],["open_uri_or_path","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-open_uri_or_path","(path)","<p>Thanks, FakeWeb!\n"],["open_uri_or_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-open_uri_or_path","(uri, last_modified = nil, head = false, depth = 0)","<p>Read the data from the (source based) URI, but if it is a file:// URI, read\nfrom the filesystem instead. …\n"],["outdated","Gem::SourceIndex","Gem/SourceIndex.html#method-i-outdated","()","<p>Returns an Array of Gem::Specifications that are not up to date.\n"],["outdated","Gem::SourceIndex","Gem/SourceIndex.html#method-i-outdated","()","<p>Returns an Array of Gem::Specifications that are not up to date.\n"],["outdated","Gem::Specification","Gem/Specification.html#method-c-outdated","()","<p>Return a list of all outdated specifications. This method is HEAVY as it\nmust go fetch specifications …\n"],["output","Gem::MockGemUi","Gem/MockGemUi.html#method-i-output","()",""],["pack","Gem::Package","Gem/Package.html#method-c-pack","(src, destname, signer = nil)",""],["paranoid","Gem::Indexer","Gem/Indexer.html#method-i-paranoid","(path, extension)","<p>Ensure <code>path</code> and path with <code>extension</code> are\nidentical.\n"],["parse","Gem::Requirement","Gem/Requirement.html#method-c-parse","(obj)","<p>Parse <code>obj</code>, returning an <code>[op, version]</code> pair.\n<code>obj</code> can be a String or a Gem::Version.\n<p>If <code>obj</code> is a String …\n"],["parse","Gem::Requirement","Gem/Requirement.html#method-c-parse","(obj)","<p>Parse <code>obj</code>, returning an <code>[op, version]</code> pair.\n<code>obj</code> can be a String or a Gem::Version.\n<p>If <code>obj</code> is a String …\n"],["path","Gem","Gem.html#method-c-path","()",""],["path_ok?","Gem::Uninstaller","Gem/Uninstaller.html#method-i-path_ok-3F","(gem_dir, spec)","<p>Is <code>spec</code> in <code>gem_dir</code>?\n"],["paths","Gem","Gem.html#method-c-paths","()",""],["paths=","Gem","Gem.html#method-c-paths-3D","(env)",""],["platform","Gem::Specification","Gem/Specification.html#method-i-platform","()","<p>The platform this gem runs on.  See Gem::Platform for details.\n"],["platform=","Gem::Specification","Gem/Specification.html#method-i-platform-3D","(platform)","<p>The platform this gem runs on.  See Gem::Platform for details.\n<p>Setting this to any value other than Gem::Platform::RUBY …\n"],["platforms","Gem","Gem.html#method-c-platforms","()","<p>Array of platforms this RubyGems supports.\n"],["platforms=","Gem","Gem.html#method-c-platforms-3D","(platforms)","<p>Set array of platforms this RubyGems supports (primarily for testing).\n"],["pos","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-pos","()","<p>The position in the tar entry\n"],["post_build","Gem","Gem.html#method-c-post_build","(&hook)","<p>Adds a post-build hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["post_install","Gem","Gem.html#method-c-post_install","(&hook)","<p>Adds a post-install hook that will be passed an Gem::Installer instance\nwhen Gem::Installer#install is …\n"],["post_reset","Gem","Gem.html#method-c-post_reset","(&hook)","<p>Adds a hook that will get run after Gem::Specification.reset is run.\n"],["post_uninstall","Gem","Gem.html#method-c-post_uninstall","(&hook)","<p>Adds a post-uninstall hook that will be passed a Gem::Uninstaller instance\nand the spec that was uninstalled …\n"],["pre_install","Gem","Gem.html#method-c-pre_install","(&hook)","<p>Adds a pre-install hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["pre_reset","Gem","Gem.html#method-c-pre_reset","(&hook)","<p>Adds a hook that will get run before Gem::Specification.reset is run.\n"],["pre_uninstall","Gem","Gem.html#method-c-pre_uninstall","(&hook)","<p>Adds a pre-uninstall hook that will be passed an Gem::Uninstaller instance\nand the spec that will be …\n"],["prefix","Gem","Gem.html#method-c-prefix","()","<p>The directory prefix this RubyGems was installed at. If your prefix is in a\nstandard location (ie, rubygems …\n"],["prerelease?","Gem::Dependency","Gem/Dependency.html#method-i-prerelease-3F","()","<p>Does this dependency require a prerelease?\n"],["prerelease?","Gem::Requirement","Gem/Requirement.html#method-i-prerelease-3F","()",""],["prerelease?","Gem::Requirement","Gem/Requirement.html#method-i-prerelease-3F","()",""],["prerelease?","Version","Version.html#method-i-prerelease-3F","()","<p>A version is considered a prerelease if it contains a letter.\n"],["prerelease_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-i-prerelease_gems","()",""],["prerelease_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-i-prerelease_gems","()",""],["prerelease_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-prerelease_specs","()","<p>An array including only the prerelease gemspecs\n"],["prerelease_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-prerelease_specs","()","<p>An array including only the prerelease gemspecs\n"],["print_dependencies","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-print_dependencies","(spec, level = 0)",""],["process_args","Gem::CommandManager","Gem/CommandManager.html#method-i-process_args","(args)",""],["process_based_port","Gem::TestCase","Gem/TestCase.html#method-i-process_based_port","()","<p>See ::process_based_port\n"],["process_based_port","Gem::TestCase","Gem/TestCase.html#method-c-process_based_port","()","<p>Allows tests to use a random (but controlled) port number instead of a\nhardcoded one. This helps CI tools …\n"],["process_options","Gem::Installer","Gem/Installer.html#method-i-process_options","()",""],["progress_reporter","Gem::SilentUI","Gem/SilentUI.html#method-i-progress_reporter","(*args)",""],["progress_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-progress_reporter","(*args)","<p>Return a progress reporter object chosen from the current verbosity.\n"],["promote_load_path","Gem","Gem.html#method-c-promote_load_path","(gem_name, over_name)","<p>Promotes the load paths of the <code>gem_name</code> over the load paths of\n<code>over_name</code>.  Useful for allowing one gem …\n"],["quick","Gem::Server","Gem/Server.html#method-i-quick","(req, res)",""],["quick_gem","Gem::TestCase","Gem/TestCase.html#method-i-quick_gem","(name, version='2')","<p>Creates a Gem::Specification with a minimum of extra work. \n<code>name</code> and <code>version</code> are the gem’s name and version,\n…\n"],["quick_spec","Gem::TestCase","Gem/TestCase.html#method-i-quick_spec","(name, version = '2')",""],["raise_if_conflicts","Gem::Specification","Gem/Specification.html#method-i-raise_if_conflicts","()","<p>Check the spec for possible conflicts and freak out if there are any.\n"],["rdoc","Gem::Server","Gem/Server.html#method-i-rdoc","(req, res)","<p>Can be used for quick navigation to the rdoc documentation.  You can then\ndefine a search shortcut for …\n"],["rdoc_installed?","Gem::DocManager","Gem/DocManager.html#method-i-rdoc_installed-3F","()","<p>Is the RDoc documentation installed?\n"],["rdoc_options","Gem::Specification","Gem/Specification.html#method-i-rdoc_options","()","<p>An ARGV style array of options to RDoc\n"],["rdoc_options=","Gem::Specification","Gem/Specification.html#method-i-rdoc_options-3D","(options)","<p>Sets rdoc_options to <code>value</code>, ensuring it is an array. Don’t use\nthis, push onto the array instead.\n"],["rdoc_version","Gem::DocManager","Gem/DocManager.html#method-c-rdoc_version","()",""],["read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-read","(len = nil)","<p>Reads <code>len</code> bytes from the tar file entry, or the rest of the\nentry if nil\n"],["read_binary","Gem","Gem.html#method-c-read_binary","(path)","<p>Safely read a file in binary mode on all platforms.\n"],["read_binary","Gem::TestCase","Gem/TestCase.html#method-i-read_binary","(path)","<p>Reads a binary file at <code>path</code>\n"],["read_cache","Gem::TestCase","Gem/TestCase.html#method-i-read_cache","(path)","<p>Reads a Marshal file at <code>path</code>\n"],["really_verbose","Gem::ConfigFile","Gem/ConfigFile.html#method-i-really_verbose","()","<p>Really verbose mode gives you extra output.\n"],["redirector","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-redirector","()",""],["refresh","Gem","Gem.html#method-c-refresh","()","<p>Refresh source_index from disk and clear searcher.\n"],["refresh!","Gem::SourceIndex","Gem/SourceIndex.html#method-i-refresh-21","()","<p>Replaces the gems in the source index from specifications in the\ndirectories this source index was created …\n"],["refresh!","Gem::SourceIndex","Gem/SourceIndex.html#method-i-refresh-21","()","<p>Replaces the gems in the source index from specifications in the\ndirectories this source index was created …\n"],["refute_path_exists","Gem::TestCase","Gem/TestCase.html#method-i-refute_path_exists","(path, msg = nil)","<p>TODO: move to minitest\n"],["register","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-register","(target, obj)","<p>Noop this out so there are no anchors\n"],["register_command","Gem::CommandManager","Gem/CommandManager.html#method-i-register_command","(command)","<p>Register the Symbol <code>command</code> as a gem command.\n"],["release","Version","Version.html#method-i-release","()","<p>The release for this version (e.g. 1.2.0.a -&gt; 1.2.0). Non-prerelease\nversions return themselves.\n"],["released_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-i-released_gems","()",""],["released_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-i-released_gems","()",""],["released_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-released_specs","()","<p>An array including only the released gemspecs\n"],["released_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-released_specs","()","<p>An array including only the released gemspecs\n"],["remote?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-remote-3F","()","<p>Is remote fetching enabled?\n"],["remove","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove","(spec)","<p>spec &mdash; the spec of the gem to be uninstalled\n<p>list &mdash; the list of all such gems\n\n<p>Warning: this method modifies …\n"],["remove_all","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_all","(list)","<p>Removes all gems in <code>list</code>.\n<p>NOTE: removes uninstalled gems from <code>list</code>.\n"],["remove_by_name","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_by_name","(full_name)","<p>Removes the gemspec matching <code>full_name</code> from the dependency\nlist\n"],["remove_executables","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_executables","(spec)","<p>Removes installed executables and batch files (windows only) for\n<code>gemspec</code>.\n"],["remove_leading_dot_dir","Gem::Validator","Gem/Validator.html#method-i-remove_leading_dot_dir","(path)",""],["remove_old_bin_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_bin_files","(bin_dir)",""],["remove_option","Gem::Command","Gem/Command.html#method-i-remove_option","(name)","<p>Remove previously defined command-line argument <code>name</code>.\n"],["remove_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-remove_owners","(name, owners)",""],["remove_spec","Gem::SourceIndex","Gem/SourceIndex.html#method-i-remove_spec","(full_name)","<p>Remove a gem specification named <code>full_name</code>.\n"],["remove_spec","Gem::SourceIndex","Gem/SourceIndex.html#method-i-remove_spec","(full_name)","<p>Remove a gem specification named <code>full_name</code>.\n"],["remove_spec","Gem::Specification","Gem/Specification.html#method-c-remove_spec","(spec)","<p>Removes <code>spec</code> from the known specs.\n"],["remove_specs_unsatisfied_by","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_specs_unsatisfied_by","(dependencies)","<p>Remove everything in the DependencyList that matches but doesn’t satisfy\nitems in <code>dependencies</code> (a hash …\n"],["req","Gem::TestCase","Gem/TestCase.html#method-i-req","(*requirements)","<p>Constructs a new Gem::Requirement.\n"],["request","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-request","(uri, request_class, last_modified = nil)",""],["request","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-request","(uri, request_class, last_modified = nil)","<p>Performs a Net::HTTP request of type <code>request_class</code> on\n<code>uri</code> returning a Net::HTTP response object.  request …\n"],["require_path","Gem::Specification","Gem/Specification.html#method-i-require_path","()","<p>Singular accessor for #require_paths\n"],["require_path=","Gem::Specification","Gem/Specification.html#method-i-require_path-3D","(path)","<p>Singular accessor for #require_paths\n"],["required_attribute?","Gem::Specification","Gem/Specification.html#method-c-required_attribute-3F","(name)","<p>Is <code>name</code> a required attribute?\n"],["required_attributes","Gem::Specification","Gem/Specification.html#method-c-required_attributes","()","<p>Required specification attributes\n"],["required_location","Gem","Gem.html#method-c-required_location","(gemname, libfile, *requirements)","<p>Full path to <code>libfile</code> in <code>gemname</code>.  Searches for\nthe latest gem unless <code>requirements</code> is given.\n"],["required_ruby_version=","Gem::Specification","Gem/Specification.html#method-i-required_ruby_version-3D","(req)","<p>The version of ruby required by this gem\n"],["required_rubygems_version=","Gem::Specification","Gem/Specification.html#method-i-required_rubygems_version-3D","(req)","<p>The RubyGems version required by this gem\n"],["requirement","Gem::Dependency","Gem/Dependency.html#method-i-requirement","()","<p>What does this dependency require?\n"],["requirements","Gem::Specification","Gem/Specification.html#method-i-requirements","()","<p>An array or things required by this gem.  Not used by anything presently.\n"],["requirements=","Gem::Specification","Gem/Specification.html#method-i-requirements-3D","(req)","<p>Set requirements to <code>req</code>, ensuring it is an array. Don’t use\nthis, push onto the array instead.\n"],["requirements_list","Gem::Dependency","Gem/Dependency.html#method-i-requirements_list","()",""],["reset","Gem::CommandManager","Gem/CommandManager.html#method-c-reset","()","<p>Reset the authoritative instance of the command manager.\n"],["reset","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-reset","(connection)","<p>Resets HTTP connection <code>connection</code>.\n"],["reset","Gem::Specification","Gem/Specification.html#method-c-reset","()","<p>Reset the list of known specs, running pre and post reset hooks registered\nin Gem.\n"],["rewind","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-rewind","()","<p>NOTE: Do not call #rewind during #each\n"],["rewind","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-rewind","()","<p>Rewinds to the beginning of the tar file entry\n"],["ri_dir","Gem::Specification","Gem/Specification.html#method-i-ri_dir","()","<p>Returns the full path to this spec’s ri directory.\n"],["ri_installed?","Gem::DocManager","Gem/DocManager.html#method-i-ri_installed-3F","()","<p>Is the RI documentation installed?\n"],["root","Gem::Server","Gem/Server.html#method-i-root","(req, res)",""],["ruby","Gem","Gem.html#method-c-ruby","()","<p>The path to the running Ruby interpreter.\n"],["ruby=","Gem","Gem.html#method-c-ruby-3D","(ruby)","<p>Allows setting path to ruby.  This method is available when requiring\n‘rubygems/test_case’\n"],["ruby_engine","Gem","Gem.html#method-c-ruby_engine","()","<p>A wrapper around RUBY_ENGINE const that may not be defined\n"],["ruby_version","Gem","Gem.html#method-c-ruby_version","()","<p>A Gem::Version for the currently running ruby.\n"],["rubybin","Gem::TestCase","Gem/TestCase.html#method-c-rubybin","()","<p>Finds the path to the ruby executable\n"],["rubygems_api_key=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-rubygems_api_key-3D","(api_key)",""],["rubygems_api_request","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-rubygems_api_request","(method, path, host = Gem.host, &block)",""],["run","Gem::CommandManager","Gem/CommandManager.html#method-i-run","(args)","<p>Run the config specified by <code>args</code>.\n"],["run","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-run","(command, results)",""],["run","Gem::GemRunner","Gem/GemRunner.html#method-i-run","(args)","<p>Run the gem command with the following arguments.\n"],["run","Gem::Server","Gem/Server.html#method-i-run","()",""],["run","Gem::Server","Gem/Server.html#method-c-run","(options)",""],["run_rdoc","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-run_rdoc","(*args)",""],["run_rdoc","Gem::DocManager","Gem/DocManager.html#method-i-run_rdoc","(*args)","<p>Run RDoc with <code>args</code>, which is an ARGV style argument list\n"],["runtime_dependencies","Gem::Specification","Gem/Specification.html#method-i-runtime_dependencies","()","<p>List of dependencies that will automatically be activated at runtime.\n"],["sanitize","Gem::Indexer","Gem/Indexer.html#method-i-sanitize","(spec)","<p>Sanitize the descriptive fields in the spec.  Sometimes non-ASCII\ncharacters will garble the site index. …\n"],["sanitize_string","Gem::Indexer","Gem/Indexer.html#method-i-sanitize_string","(string)","<p>Sanitize a single string.\n"],["satisfied_by?","Gem::Requirement","Gem/Requirement.html#method-i-satisfied_by-3F","(version)","<p>True if <code>version</code> satisfies this Requirement.\n"],["satisfied_by?","Gem::Requirement","Gem/Requirement.html#method-i-satisfied_by-3F","(version)","<p>True if <code>version</code> satisfies this Requirement.\n"],["satisfies_requirement?","Gem::Specification","Gem/Specification.html#method-i-satisfies_requirement-3F","(dependency)","<p>Checks if this specification meets the requirement of\n<code>dependency</code>.\n"],["say","Gem::StreamUI","Gem/StreamUI.html#method-i-say","(statement=\"\")","<p>Display a statement.\n"],["say","Gem::UserInteraction","Gem/UserInteraction.html#method-i-say","(*args)",""],["search","Gem::SourceIndex","Gem/SourceIndex.html#method-i-search","(gem_pattern, platform_or_requirement = false)","<p>Search for a gem by Gem::Dependency <code>gem_pattern</code>.  If\n<code>only_platform</code> is true, only gems matching Gem::Platform.local\n…\n"],["search","Gem::SourceIndex","Gem/SourceIndex.html#method-i-search","(gem_pattern, platform_or_requirement = false)","<p>Search for a gem by Gem::Dependency <code>gem_pattern</code>.  If\n<code>only_platform</code> is true, only gems matching Gem::Platform.local\n…\n"],["searcher","Gem","Gem.html#method-c-searcher","()","<p>The GemPathSearcher object used to search for matching installed gems.\n"],["searcher=","Gem","Gem.html#method-c-searcher-3D","(searcher)","<p>Allows setting the gem path searcher.  This method is available when\nrequiring ‘rubygems/test_case’\n"],["send_gem","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-send_gem","(name)",""],["setup","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-setup","()",""],["setup","Gem::TestCase","Gem/TestCase.html#method-i-setup","()","<p>#setup prepares a sandboxed location to install gems.  All installs are\ndirected to a temporary directory. …\n"],["setup_rdoc","Gem::DocManager","Gem/DocManager.html#method-i-setup_rdoc","()",""],["shebang","Gem::Installer","Gem/Installer.html#method-i-shebang","(bin_file_name)","<p>Generates a #! line for <code>bin_file_name</code>‘s wrapper copying\narguments if necessary.\n"],["show_help","Gem::Command","Gem/Command.html#method-i-show_help","()","<p>Display the help message for the command.\n"],["show_lookup_failure","Gem::Command","Gem/Command.html#method-i-show_lookup_failure","(gem_name, version, errors, domain)","<p>Display to the user that a gem couldn’t be found and reasons why\n"],["show_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-show_owners","(name)",""],["show_rdoc_for_pattern","Gem::Server","Gem/Server.html#method-i-show_rdoc_for_pattern","(pattern, res)","<p>Returns true and prepares http response, if rdoc for the requested gem name\npattern was found.\n<p>The search …\n"],["sign","Gem::Security::Signer","Gem/Security/Signer.html#method-i-sign","(data)","<p>Sign data with given digest algorithm\n"],["sign_cert","Gem::Security","Gem/Security.html#method-c-sign_cert","(cert, signing_key, signing_cert, opt = {})","<p>Sign the cert cert with @signing_key and @signing_cert, using the digest\nalgorithm opt. Returns the newly …\n"],["sign_in","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-sign_in","()",""],["size","Gem::SourceIndex","Gem/SourceIndex.html#method-i-size","()",""],["size","Gem::SourceIndex","Gem/SourceIndex.html#method-i-size","()",""],["skip_during","Gem::Deprecate","Gem/Deprecate.html#method-c-skip_during","()","<p>Temporarily turn off warnings. Intended for tests only.\n"],["sort_obj","Gem::Specification","Gem/Specification.html#method-i-sort_obj","()","<p>Returns an object you can use to sort specifications in #sort_by.\n"],["source_index","Gem","Gem.html#method-c-source_index","()","<p>Returns the Gem::SourceIndex of specifications that are in the Gem.path\n"],["source_index=","Gem","Gem.html#method-c-source_index-3D","(si)","<p>Allows setting the default SourceIndex.  This method is available when\nrequiring ‘rubygems/test_case’ …\n"],["sources","Gem","Gem.html#method-c-sources","()","<p>Returns an Array of sources to fetch remote gems from.  If the sources list\nis empty, attempts to load …\n"],["sources=","Gem","Gem.html#method-c-sources-3D","(new_sources)","<p>Need to be able to set the sources without calling Gem.sources.replace\nsince that would cause an infinite …\n"],["spec","Gem::Installer","Gem/Installer.html#method-i-spec","()","<p>Lazy accessor for the installer’s spec.\n"],["spec","Gem::TestCase","Gem/TestCase.html#method-i-spec","(name, version, &block)","<p>Constructs a new Gem::Specification.\n"],["spec_dir","Gem::Specification","Gem/Specification.html#method-i-spec_dir","()","<p>Returns the full path to the directory containing this spec’s gemspec file.\neg: /usr/local/lib/ruby/gems/1.8/specifications …\n"],["spec_file","Gem::Specification","Gem/Specification.html#method-i-spec_file","()","<p>Returns the full path to this spec’s gemspec file. eg:\n/usr/local/lib/ruby/gems/1.8/specifications/mygem-1.0.gemspec …\n"],["spec_name","Gem::Specification","Gem/Specification.html#method-i-spec_name","()","<p>The default name of the gemspec.  See also #file_name\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">spec_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gemspec&quot;</span>\n</pre>\n"],["spec_path","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-spec_path","(gem_full_name)",""],["spec_predecessors","Gem::DependencyList","Gem/DependencyList.html#method-i-spec_predecessors","()","<p>Return a hash of predecessors.  <code>result[spec]</code> is an Array of\ngemspecs that have a dependency satisfied …\n"],["specific?","Gem::Dependency","Gem/Dependency.html#method-i-specific-3F","()","<p>True if the dependency will not always match the latest version.\n"],["specific?","Gem::Requirement","Gem/Requirement.html#method-i-specific-3F","()","<p>True if the requirement will not always match the latest version.\n"],["specific?","Gem::Requirement","Gem/Requirement.html#method-i-specific-3F","()","<p>True if the requirement will not always match the latest version.\n"],["specific_extra_args","Gem::Command","Gem/Command.html#method-c-specific_extra_args","(cmd)","<p>Return an array of extra arguments for the command.  The extra arguments\ncome from the gem configuration …\n"],["specific_extra_args_hash","Gem::Command","Gem/Command.html#method-c-specific_extra_args_hash","()","<p>Accessor for the specific extra args hash (self initializing).\n"],["specification","Gem::SourceIndex","Gem/SourceIndex.html#method-i-specification","(full_name)","<p>The gem specification given a full gem spec name.\n"],["specification","Gem::SourceIndex","Gem/SourceIndex.html#method-i-specification","(full_name)","<p>The gem specification given a full gem spec name.\n"],["specs","Gem::Server","Gem/Server.html#method-i-specs","(req, res)",""],["spermy_recommendation","Version","Version.html#method-i-spermy_recommendation","()","<p>A recommended version for use with a ~&gt; Requirement.\n"],["ssl_available?","Gem","Gem.html#method-i-ssl_available-3F","()","<p>Is SSL (used by the signing commands) available on this platform?\n"],["string","TempIO","TempIO.html#method-i-string","()",""],["success","Gem::Builder","Gem/Builder.html#method-i-success","()",""],["suffix_pattern","Gem","Gem.html#method-c-suffix_pattern","()","<p>Glob pattern for require-able path suffixes.\n"],["suffixes","Gem","Gem.html#method-c-suffixes","()","<p>Suffixes for require-able paths.\n"],["suggest_gems_from_name","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-suggest_gems_from_name","(gem_name)","<p>Suggests a gem based on the supplied <code>gem_name</code>. Returns a\nstring of the gem name if an approximate match …\n"],["summary=","Gem::Specification","Gem/Specification.html#method-i-summary-3D","(str)","<p>A short summary of this gem’s description.\n"],["tar_dir_header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-tar_dir_header","(name, prefix, mode)",""],["tar_file_header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-tar_file_header","(fname, dname, mode, length)",""],["teardown","Gem::TestCase","Gem/TestCase.html#method-i-teardown","()","<p>#teardown restores the process to its original state and removes the\ntempdir unless the <code>KEEP_FILES</code> environment …\n"],["terminate_interaction","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminate_interaction","(status=0)",""],["terminate_interaction","Gem::StreamUI","Gem/StreamUI.html#method-i-terminate_interaction","(status = 0)","<p>Terminate the application with exit code <code>status</code>, running any\nexit handlers that might have been defined. …\n"],["terminate_interaction","Gem::UserInteraction","Gem/UserInteraction.html#method-i-terminate_interaction","(*args)",""],["terminated?","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminated-3F","()",""],["test_file","Gem::Specification","Gem/Specification.html#method-i-test_file","()","<p>Singular accessor for #test_files\n"],["test_file=","Gem::Specification","Gem/Specification.html#method-i-test_file-3D","(file)","<p>Singular accessor for #test_files\n"],["test_files","Gem::Specification","Gem/Specification.html#method-i-test_files","()","<p>Test files included in this gem.  You cannot append to this accessor, you\nmust assign to it.\n"],["test_files=","Gem::Specification","Gem/Specification.html#method-i-test_files-3D","(files)","<p>Set test_files to <code>files</code>, ensuring it is an array.\n"],["time","Gem","Gem.html#method-c-time","(msg, width = 0, display = Gem.configuration.verbose)","<p>Prints the amount of time the supplied block takes to run using the debug\nUI output.\n"],["to_a","Gem::Platform","Gem/Platform.html#method-i-to_a","()",""],["to_oct","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-to_oct","(n, pad_size)",""],["to_ruby","Gem::Specification","Gem/Specification.html#method-i-to_ruby","()","<p>Returns a Ruby code representation of this specification, such that it can\nbe eval’ed and reconstruct …\n"],["to_ruby_for_cache","Gem::Specification","Gem/Specification.html#method-i-to_ruby_for_cache","()","<p>Returns a Ruby lighter-weight code representation of this specification,\nused for indexing only.\n<p>See  …\n"],["to_s","Gem::Platform","Gem/Platform.html#method-i-to_s","()",""],["to_spec","Gem::Dependency","Gem/Dependency.html#method-i-to_spec","()",""],["to_specs","Gem::Dependency","Gem/Dependency.html#method-i-to_specs","()",""],["traverse","Gem::Specification","Gem/Specification.html#method-i-traverse","(trail = [], &block)","<p>Recursively walk dependencies of this spec, executing the\n<code>block</code> for each hop.\n"],["trusted_cert_path","Gem::Security::Policy","Gem/Security/Policy.html#method-c-trusted_cert_path","(cert, opt = {})","<p>Get the path to the file for this cert.\n"],["try_activate","Gem","Gem.html#method-c-try_activate","(path)","<p>Try to activate a gem containing <code>path</code>. Returns true if\nactivation succeeded or wasn’t needed because …\n"],["tsort_each_child","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_child","(node, &block)",""],["tsort_each_node","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_node","(&block)",""],["tty?","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-tty-3F","()",""],["tty?","Gem::StreamUI","Gem/StreamUI.html#method-i-tty-3F","()",""],["type","Gem::Dependency","Gem/Dependency.html#method-i-type","()","<p>Dependency type.\n"],["ui","Gem","Gem.html#method-c-ui","()","<p>Lazily loads DefaultUserInteraction and returns the default UI.\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui","()","<p>See DefaultUserInteraction::ui\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui","()","<p>Return the default UI.\n"],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui-3D","(new_ui)","<p>Set the default UI.  If the default UI is never explicitly set, a simple\nconsole based UserInteraction …\n"],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui-3D","(new_ui)","<p>See DefaultUserInteraction::ui=\n"],["unescape","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-unescape","(str)",""],["uninstall","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall","()","<p>Performs the uninstall of the gem.  This removes the spec, the Gem\ndirectory, and the cached .gem file. …\n"],["uninstall_doc","Gem::DocManager","Gem/DocManager.html#method-i-uninstall_doc","()","<p>Remove RDoc and RI documentation\n"],["uninstall_gem","Gem::TestCase","Gem/TestCase.html#method-i-uninstall_gem","(spec)","<p>Uninstalls the Gem::Specification <code>spec</code>\n"],["uninstall_gem","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall_gem","(spec)","<p>Uninstalls gem <code>spec</code>\n"],["uninstall_old_gemcutter","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-uninstall_old_gemcutter","()",""],["unpack","Gem::Installer","Gem/Installer.html#method-i-unpack","(directory)","<p>Unpacks the gem into the given directory.\n"],["unregister_command","Gem::CommandManager","Gem/CommandManager.html#method-i-unregister_command","(command)","<p>Unregister the Symbol <code>command</code> as a gem command.\n"],["unresolved_deps","Gem","Gem.html#method-c-unresolved_deps","()",""],["update","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-update","(current)",""],["update","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-i-update","(bytes)",""],["update_checksum","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-update_checksum","()","<p>Updates the TarHeader’s checksum\n"],["update_gem","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gem","(name, version = Gem::Requirement.default)",""],["update_gems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gems","(gems_to_update)",""],["update_index","Gem::Indexer","Gem/Indexer.html#method-i-update_index","()","<p>Perform an in-place update of the repository from newly added gems.  Only\nworks for modern indicies, …\n"],["update_ri_cache","Gem::DocManager","Gem/DocManager.html#method-c-update_ri_cache","()","<p>Updates the RI cache for RDoc 2 if it is installed\n"],["update_rubygems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_rubygems","()","<p>Update RubyGems software to the latest version.\n"],["update_specs_index","Gem::Indexer","Gem/Indexer.html#method-i-update_specs_index","(index, source, dest)","<p>Combines specs in <code>index</code> and <code>source</code> then writes\nout a new copy to <code>dest</code>.  For a latest index, does not …\n"],["updated","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-updated","(message)",""],["updated","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-updated","(message)","<p>Prints out a dot and ignores <code>message</code>.\n"],["updated","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-updated","(message)","<p>Prints out the position relative to the total and the <code>message</code>.\n"],["uri_escaper","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-uri_escaper","()",""],["usage","Gem::Command","Gem/Command.html#method-i-usage","()","<p>Override to display the usage for an individual gem command.\n<p>The text “[options]” is automatically …\n"],["use_paths","Gem","Gem.html#method-c-use_paths","(home, *paths)","<p>Use the <code>home</code> and <code>paths</code> values for Gem.dir and\nGem.path.  Used mainly by the unit tests to provide environment …\n"],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-use_ui","(new_ui, &block)","<p>See DefaultUserInteraction::use_ui\n"],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-use_ui","(new_ui)","<p>Use <code>new_ui</code> for the duration of <code>block</code>.\n"],["user_agent","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-user_agent","()",""],["user_dir","Gem","Gem.html#method-c-user_dir","()","<p>Path for gems in the user’s home directory\n"],["user_home","Gem","Gem.html#method-c-user_home","()","<p>The home directory for the user.\n"],["util_build_gem","Gem::TestCase","Gem/TestCase.html#method-i-util_build_gem","(spec)","<p>Builds a gem from <code>spec</code> and places it in <code>File.join\n@gemhome, 'cache'</code>.  Automatically creates files based …\n"],["util_clear_gems","Gem::TestCase","Gem/TestCase.html#method-i-util_clear_gems","()","<p>Removes all installed gems from +@gemhome+.\n"],["util_dir_entry","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-util_dir_entry","()",""],["util_entry","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-util_entry","(tar)",""],["util_gem","Gem::TestCase","Gem/TestCase.html#method-i-util_gem","(name, version, deps = nil, &block)","<p>Creates a gem with <code>name</code>, <code>version</code> and\n<code>deps</code>.  The specification will be yielded before gem creation\nfor …\n"],["util_gem_bindir","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_gem_bindir","(spec = @spec)",""],["util_gem_dir","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_gem_dir","(spec = @spec)",""],["util_gzip","Gem::TestCase","Gem/TestCase.html#method-i-util_gzip","(data)","<p>Gzips <code>data</code>.\n"],["util_inst_bindir","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_inst_bindir","()",""],["util_installer","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_installer","(spec, gem_home, user=false)",""],["util_make_exec","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_make_exec","(spec = @spec, shebang = \"#!/usr/bin/ruby\")",""],["util_make_gems","Gem::TestCase","Gem/TestCase.html#method-i-util_make_gems","(prerelease = false)","<p>Creates several default gems which all have a lib/code.rb file.  The gems\nare not installed but are available …\n"],["util_set_arch","Gem::TestCase","Gem/TestCase.html#method-i-util_set_arch","(arch)","<p>Set the platform to <code>arch</code>\n"],["util_setup_fake_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-util_setup_fake_fetcher","(prerelease = false)","<p>Sets up a fake fetcher using the gems from #util_make_gems.  Optionally\nadditional <code>prerelease</code> gems may …\n"],["util_setup_gem","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_setup_gem","(ui = @ui)",""],["util_setup_spec_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-util_setup_spec_fetcher","(*specs)","<p>Sets up Gem::SpecFetcher to return information from the gems in\n<code>specs</code>. Best used with +@all_gems+ from …\n"],["util_spec","Gem::TestCase","Gem/TestCase.html#method-i-util_spec","(name, version, deps = nil, &block)","<p>Creates a spec with <code>name</code>, <code>version</code> and\n<code>deps</code>.\n"],["util_zip","Gem::TestCase","Gem/TestCase.html#method-i-util_zip","(data)","<p>Deflates <code>data</code>\n"],["v","Gem::TestCase","Gem/TestCase.html#method-i-v","(string)","<p>Construct a new Gem::Version.\n"],["validate","Gem::Specification","Gem/Specification.html#method-i-validate","(packaging = true)","<p>Checks that the specification contains all required fields, and does a very\nbasic sanity check.\n<p>Raises …\n"],["vc_windows?","Gem::TestCase","Gem/TestCase.html#method-i-vc_windows-3F","()","<p>Returns whether or not we’re on a version of Ruby built with VC++ (or\nBorland) versus Cygwin, Mingw, …\n"],["vc_windows?","Gem::TestCase","Gem/TestCase.html#method-c-vc_windows-3F","()","<p>Returns whether or not we’re on a version of Ruby built with VC++ (or\nBorland) versus Cygwin, Mingw, …\n"],["verify_api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-verify_api_key","(key)",""],["verify_gem","Gem::Security::Policy","Gem/Security/Policy.html#method-i-verify_gem","(signature, data, chain, time = Time.now)","<p>Verify that the gem data with the given signature and signing chain matched\nthis security policy at the …\n"],["verify_gem","Gem::Validator","Gem/Validator.html#method-i-verify_gem","(gem_data)","<p>Given a gem file’s contents, validates against its own MD5 checksum\n<p>gem_data &mdash; <p>String &mdash; Contents of the gem …\n\n\n"],["verify_gem_file","Gem::Validator","Gem/Validator.html#method-i-verify_gem_file","(gem_path)","<p>Given the path to a gem file, validates against its own MD5 checksum\n<p>gem_path &mdash; <p>String &mdash; Path to gem file …\n\n\n"],["verify_gem_home","Gem::Installer","Gem/Installer.html#method-i-verify_gem_home","(unpack = false)",""],["verify_trust_dir","Gem::Security","Gem/Security.html#method-c-verify_trust_dir","(path, perms)","<p>Make sure the trust directory exists.  If it does exist, make sure it’s\nactually a directory.  If not, …\n"],["version=","Gem::Specification","Gem/Specification.html#method-i-version-3D","(version)","<p>Set the version to <code>version</code>, potentially also setting\nrequired_rubygems_version if <code>version</code> indicates it …\n"],["visit_String","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-visit_String","(str)",""],["when_invoked","Gem::Command","Gem/Command.html#method-i-when_invoked","(&block)","<p>Call the given block when invoked.\n<p>Normal command invocations just executes the <code>execute</code> method of\nthe …\n"],["which_to_update","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-which_to_update","(highest_installed_gems, gem_names, system = false)",""],["why_not_ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-why_not_ok-3F","(quick = false)",""],["win_platform=","Gem","Gem.html#method-c-win_platform-3D","(val)","<p>Allows toggling Windows behavior.  This method is available when requiring\n‘rubygems/test_case’\n"],["win_platform?","Gem","Gem.html#method-c-win_platform-3F","()","<p>Is this a windows platform?\n"],["win_platform?","Gem::TestCase","Gem/TestCase.html#method-c-win_platform-3F","()","<p>Is this test being run on a Windows platform?\n"],["win_platform?","Gem::TestCase","Gem/TestCase.html#method-i-win_platform-3F","()","<p>Is this test being run on a Windows platform?\n"],["windows_stub_script","Gem::Installer","Gem/Installer.html#method-i-windows_stub_script","(bindir, bin_file_name)","<p>return the stub script text used to launch the true ruby script\n"],["with_response","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-with_response","(resp)",""],["wordy","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-wordy","()",""],["wrap","Gem::Command","Gem/Command.html#method-i-wrap","(text, width)","<p>Wraps <code>text</code> to <code>width</code>\n"],["write","Gem::ConfigFile","Gem/ConfigFile.html#method-i-write","()","<p>Writes out this config file, replacing its source.\n"],["write","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO, raising a FileOverflow exception if\nthe number of bytes will be more than #limit …\n"],["write","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO\n"],["write_file","Gem::TestCase","Gem/TestCase.html#method-i-write_file","(path)","<p>Writes a binary file to <code>path</code> which is relative to +@gemhome+\n"],["write_require_paths_file_if_needed","Gem::RequirePathsBuilder","Gem/RequirePathsBuilder.html#method-i-write_require_paths_file_if_needed","(spec = @spec, gem_home = @gem_home)",""],["write_spec","Gem::Installer","Gem/Installer.html#method-i-write_spec","()","<p>Writes the .gemspec specification (in Ruby) to the gem home’s\nspecifications directory.\n"],["yaml?","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-yaml-3F","(filename)",""],["yaml_initialize","Version","Version.html#method-i-yaml_initialize","(tag, map)",""],["zipped_stream","Gem::Package::TarInput","Gem/Package/TarInput.html#method-i-zipped_stream","(entry)","<p>Return an IO stream for the zipped entry.\n<p>NOTE:  Originally this method used two approaches, Return a …\n"]]}}