var search_data = {"index":{"searchIndex":["gem","testcase","test","unit","assertions","autorunner","runner","gcstressoption","globoption","loadpathoption","options","requirefiles","runcount","runner","worker","testcase","worker","_run_parallel()","_run_suite()","_run_suites()","_run_suites()","after_worker_down()","after_worker_quit()","assert()","assert_block()","assert_equal()","assert_no_match()","assert_not_equal()","assert_not_nil()","assert_not_same()","assert_not_send()","assert_nothing_raised()","assert_nothing_thrown()","assert_raise()","assert_respond_to()","assert_send()","autorun()","close()","del_jobs_status()","died()","have_run?()","hook()","increment_io()","jobs_status()","launch()","new()","new()","non_options()","non_options()","non_options()","on_parallel_worker?()","option_parser()","orig_run_suite()","process_args()","puke()","puts()","read()","run()","run()","run()","run()","run_once()","setup_options()","setup_options()","setup_options()","status()","test_order()","to_s()"],"longSearchIndex":["gem","gem::testcase","test","test::unit","test::unit::assertions","test::unit::autorunner","test::unit::autorunner::runner","test::unit::gcstressoption","test::unit::globoption","test::unit::loadpathoption","test::unit::options","test::unit::requirefiles","test::unit::runcount","test::unit::runner","test::unit::runner::worker","test::unit::testcase","test::unit::worker","test::unit::runner#_run_parallel()","test::unit::worker#_run_suite()","test::unit::runner#_run_suites()","test::unit::worker#_run_suites()","test::unit::runner#after_worker_down()","test::unit::runner#after_worker_quit()","test::unit::assertions#assert()","test::unit::assertions#assert_block()","test::unit::assertions#assert_equal()","test::unit::assertions#assert_no_match()","test::unit::assertions#assert_not_equal()","test::unit::assertions#assert_not_nil()","test::unit::assertions#assert_not_same()","test::unit::assertions#assert_not_send()","test::unit::assertions#assert_nothing_raised()","test::unit::assertions#assert_nothing_thrown()","test::unit::assertions#assert_raise()","test::unit::assertions#assert_respond_to()","test::unit::assertions#assert_send()","test::unit::runner::autorun()","test::unit::runner::worker#close()","test::unit::runner#del_jobs_status()","test::unit::runner::worker#died()","test::unit::runcount::have_run?()","test::unit::runner::worker#hook()","test::unit::worker#increment_io()","test::unit::runner#jobs_status()","test::unit::runner::worker::launch()","test::unit::options::new()","test::unit::runner::worker::new()","test::unit::gcstressoption#non_options()","test::unit::globoption#non_options()","test::unit::requirefiles#non_options()","test::unit::testcase#on_parallel_worker?()","test::unit::options#option_parser()","test::unit::worker#orig_run_suite()","test::unit::options#process_args()","test::unit::runner#puke()","test::unit::runner::worker#puts()","test::unit::runner::worker#read()","test::unit::runcount#run()","test::unit::runner::worker#run()","test::unit::testcase#run()","test::unit::worker#run()","test::unit::runcount::run_once()","test::unit::gcstressoption#setup_options()","test::unit::globoption#setup_options()","test::unit::loadpathoption#setup_options()","test::unit::runner#status()","test::unit::testcase::test_order()","test::unit::runner::worker#to_s()"],"info":[["Gem","","Gem.html","",""],["Gem::TestCase","","Gem/TestCase.html","",""],["Test","","Test.html","",""],["Test::Unit","","Test/Unit.html","",""],["Test::Unit::Assertions","","Test/Unit/Assertions.html","",""],["Test::Unit::AutoRunner","","Test/Unit/AutoRunner.html","",""],["Test::Unit::AutoRunner::Runner","","Test/Unit/AutoRunner/Runner.html","",""],["Test::Unit::GCStressOption","","Test/Unit/GCStressOption.html","",""],["Test::Unit::GlobOption","","Test/Unit/GlobOption.html","",""],["Test::Unit::LoadPathOption","","Test/Unit/LoadPathOption.html","",""],["Test::Unit::Options","","Test/Unit/Options.html","",""],["Test::Unit::RequireFiles","","Test/Unit/RequireFiles.html","",""],["Test::Unit::RunCount","","Test/Unit/RunCount.html","",""],["Test::Unit::Runner","","Test/Unit/Runner.html","",""],["Test::Unit::Runner::Worker","","Test/Unit/Runner/Worker.html","",""],["Test::Unit::TestCase","","Test/Unit/TestCase.html","",""],["Test::Unit::Worker","","Test/Unit/Worker.html","",""],["_run_parallel","Test::Unit::Runner","Test/Unit/Runner.html#method-i-_run_parallel","(suites, type, result)",""],["_run_suite","Test::Unit::Worker","Test/Unit/Worker.html#method-i-_run_suite","(suite, type)",""],["_run_suites","Test::Unit::Runner","Test/Unit/Runner.html#method-i-_run_suites","(suites, type)",""],["_run_suites","Test::Unit::Worker","Test/Unit/Worker.html#method-i-_run_suites","(suites, type)",""],["after_worker_down","Test::Unit::Runner","Test/Unit/Runner.html#method-i-after_worker_down","(worker, e=nil, c=false)",""],["after_worker_quit","Test::Unit::Runner","Test/Unit/Runner.html#method-i-after_worker_quit","(worker)",""],["assert","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert","(test, msg = UNASSIGNED)","<p>Tests if <code>test</code> is true.\n<p><code>msg</code> may be a String or a Proc. If <code>msg</code> is a\nString, it will be used as the failure ...\n"],["assert_block","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_block","(*msgs)","<p>Tests the result of the given block. If the block does not return true, the\nassertion will fail. The …\n"],["assert_equal","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_equal","(exp, act, msg = nil)","<p>Tests if <code>expected</code> is equal to <code>actual</code>.\n<p>An optional failure message may be provided as the final argument. …\n"],["assert_no_match","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_no_match","(regexp, string, msg=nil)","<p>Tests if the given Regexp does not match a given String.\n<p>An optional failure message may be provided as …\n"],["assert_not_equal","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_equal","(exp, act, msg=nil)","<p>Tests if <code>expected</code> is not equal to <code>actual</code>.\n<p>An optional failure message may be provided as the final argument. …\n"],["assert_not_nil","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_nil","(exp, msg=nil)","<p>Tests if <code>expression</code> is not nil.\n<p>An optional failure message may be provided as the final argument.\n"],["assert_not_same","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_same","(expected, actual, message=\"\")","<p>Tests if <code>expected</code> is not the same object as\n<code>actual</code>. This test uses Object#equal? to test equality.\n<p>An …\n"],["assert_not_send","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_send","(send_ary, m = nil)","<p>Passes if the method send doesn’t return a true value.\n<p><code>send_array</code> is composed of:\n<p>A receiver\n"],["assert_nothing_raised","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_nothing_raised","(*args)","<p>If any exceptions are given as arguments, the assertion will fail if one of\nthose exceptions are raised. …\n"],["assert_nothing_thrown","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_nothing_thrown","(msg=nil)","<p>Fails if the given block uses a call to Kernel#throw.\n<p>An optional failure message may be provided as the …\n"],["assert_raise","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_raise","(*args, &b)","<p>Tests if the given block raises an exception. Acceptable exception types\nmaye be given as optional arguments. …\n"],["assert_respond_to","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_respond_to","(obj, meth, msg = nil)","<p>Tests if the given Object responds to <code>method</code>.\n<p>An optional failure message may be provided as the final …\n"],["assert_send","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_send","(send_ary, m = nil)","<p>Passes if the method send returns a true value.\n<p><code>send_array</code> is composed of:\n<p>A receiver\n"],["autorun","Test::Unit::Runner","Test/Unit/Runner.html#method-c-autorun","()",""],["close","Test::Unit::Runner::Worker","Test/Unit/Runner/Worker.html#method-i-close","()",""],["del_jobs_status","Test::Unit::Runner","Test/Unit/Runner.html#method-i-del_jobs_status","()",""],["died","Test::Unit::Runner::Worker","Test/Unit/Runner/Worker.html#method-i-died","(*additional)",""],["have_run?","Test::Unit::RunCount","Test/Unit/RunCount.html#method-c-have_run-3F","()",""],["hook","Test::Unit::Runner::Worker","Test/Unit/Runner/Worker.html#method-i-hook","(id,&block)",""],["increment_io","Test::Unit::Worker","Test/Unit/Worker.html#method-i-increment_io","(orig)",""],["jobs_status","Test::Unit::Runner","Test/Unit/Runner.html#method-i-jobs_status","()",""],["launch","Test::Unit::Runner::Worker","Test/Unit/Runner/Worker.html#method-c-launch","(ruby,args=[])",""],["new","Test::Unit::Options","Test/Unit/Options.html#method-c-new","(*, &block)",""],["new","Test::Unit::Runner::Worker","Test/Unit/Runner/Worker.html#method-c-new","(io, pid, status)",""],["non_options","Test::Unit::GCStressOption","Test/Unit/GCStressOption.html#method-i-non_options","(files, options)",""],["non_options","Test::Unit::GlobOption","Test/Unit/GlobOption.html#method-i-non_options","(files, options)",""],["non_options","Test::Unit::RequireFiles","Test/Unit/RequireFiles.html#method-i-non_options","(files, options)",""],["on_parallel_worker?","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-on_parallel_worker-3F","()",""],["option_parser","Test::Unit::Options","Test/Unit/Options.html#method-i-option_parser","()",""],["orig_run_suite","Test::Unit::Worker","Test/Unit/Worker.html#method-i-orig_run_suite","(suite, type)",""],["process_args","Test::Unit::Options","Test/Unit/Options.html#method-i-process_args","(args = [])",""],["puke","Test::Unit::Runner","Test/Unit/Runner.html#method-i-puke","(klass, meth, e)","<p>Overriding of MiniTest::Unit#puke\n"],["puts","Test::Unit::Runner::Worker","Test/Unit/Runner/Worker.html#method-i-puts","(*args)",""],["read","Test::Unit::Runner::Worker","Test/Unit/Runner/Worker.html#method-i-read","()",""],["run","Test::Unit::RunCount","Test/Unit/RunCount.html#method-i-run","(*)",""],["run","Test::Unit::Runner::Worker","Test/Unit/Runner/Worker.html#method-i-run","(task,type)",""],["run","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-run","(runner)",""],["run","Test::Unit::Worker","Test/Unit/Worker.html#method-i-run","(args = [])",""],["run_once","Test::Unit::RunCount","Test/Unit/RunCount.html#method-c-run_once","()",""],["setup_options","Test::Unit::GCStressOption","Test/Unit/GCStressOption.html#method-i-setup_options","(parser, options)",""],["setup_options","Test::Unit::GlobOption","Test/Unit/GlobOption.html#method-i-setup_options","(parser, options)",""],["setup_options","Test::Unit::LoadPathOption","Test/Unit/LoadPathOption.html#method-i-setup_options","(parser, options)",""],["status","Test::Unit::Runner","Test/Unit/Runner.html#method-i-status","(*args)",""],["test_order","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-test_order","()",""],["to_s","Test::Unit::Runner::Worker","Test/Unit/Runner/Worker.html#method-i-to_s","()",""]]}}