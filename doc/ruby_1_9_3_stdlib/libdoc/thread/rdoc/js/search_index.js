var search_data = {"index":{"searchIndex":["conditionvariable","queue","sizedqueue","threaderror","<<()","<<()","broadcast()","clear()","clear()","deq()","deq()","empty?()","enq()","enq()","length()","max()","max=()","new()","new()","new()","num_waiting()","num_waiting()","pop()","pop()","push()","push()","shift()","shift()","signal()","size()","wait()"],"longSearchIndex":["conditionvariable","queue","sizedqueue","threaderror","queue#<<()","sizedqueue#<<()","conditionvariable#broadcast()","queue#clear()","sizedqueue#clear()","queue#deq()","sizedqueue#deq()","queue#empty?()","queue#enq()","sizedqueue#enq()","queue#length()","sizedqueue#max()","sizedqueue#max=()","conditionvariable::new()","queue::new()","sizedqueue::new()","queue#num_waiting()","sizedqueue#num_waiting()","queue#pop()","sizedqueue#pop()","queue#push()","sizedqueue#push()","queue#shift()","sizedqueue#shift()","conditionvariable#signal()","queue#size()","conditionvariable#wait()"],"info":[["ConditionVariable","","ConditionVariable.html","","<p>ConditionVariable objects augment class Mutex. Using condition variables,\nit is possible to suspend while …\n"],["Queue","","Queue.html","","<p>This class provides a way to synchronize communication between threads.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'thread'</span>\n\n<span class=\"ruby-identifier\">queue</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["SizedQueue","","SizedQueue.html","","<p>This class represents queues of specified size capacity.  The push\noperation may be blocked if the capacity …\n"],["ThreadError","","ThreadError.html","",""],["<<","Queue","Queue.html#method-i-3C-3C","(obj)","<p>Alias of push\n"],["<<","SizedQueue","SizedQueue.html#method-i-3C-3C","(obj)","<p>Alias of push\n"],["broadcast","ConditionVariable","ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["clear","Queue","Queue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","SizedQueue","SizedQueue.html#method-i-clear","()","<p>Removes all objects from the queue and wakes waiting threads, if any.\n"],["deq","Queue","Queue.html#method-i-deq","(non_block=false)","<p>Alias of pop\n"],["deq","SizedQueue","SizedQueue.html#method-i-deq","(*args)","<p>Alias of pop\n"],["empty?","Queue","Queue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["enq","Queue","Queue.html#method-i-enq","(obj)","<p>Alias of push\n"],["enq","SizedQueue","SizedQueue.html#method-i-enq","(obj)","<p>Alias of push\n"],["length","Queue","Queue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["max","SizedQueue","SizedQueue.html#method-i-max","()","<p>Returns the maximum size of the queue.\n"],["max=","SizedQueue","SizedQueue.html#method-i-max-3D","(max)","<p>Sets the maximum size of the queue.\n"],["new","ConditionVariable","ConditionVariable.html#method-c-new","()","<p>Creates a new ConditionVariable\n"],["new","Queue","Queue.html#method-c-new","()","<p>Creates a new queue.\n"],["new","SizedQueue","SizedQueue.html#method-c-new","(max)","<p>Creates a fixed-length queue with a maximum size of <code>max</code>.\n"],["num_waiting","Queue","Queue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["num_waiting","SizedQueue","SizedQueue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["pop","Queue","Queue.html#method-i-pop","(non_block=false)","<p>Retrieves data from the queue.  If the queue is empty, the calling thread\nis suspended until data is …\n"],["pop","SizedQueue","SizedQueue.html#method-i-pop","(*args)","<p>Retrieves data from the queue and runs a waiting thread, if any.\n"],["push","Queue","Queue.html#method-i-push","(obj)","<p>Pushes <code>obj</code> to the queue.\n"],["push","SizedQueue","SizedQueue.html#method-i-push","(obj)","<p>Pushes <code>obj</code> to the queue.  If there is no space left in the\nqueue, waits until space becomes available. …\n"],["shift","Queue","Queue.html#method-i-shift","(non_block=false)","<p>Alias of pop\n"],["shift","SizedQueue","SizedQueue.html#method-i-shift","(*args)","<p>Alias of pop\n"],["signal","ConditionVariable","ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["size","Queue","Queue.html#method-i-size","()","<p>Alias of length.\n"],["wait","ConditionVariable","ConditionVariable.html#method-i-wait","(mutex, timeout=nil)","<p>Releases the lock held in <code>mutex</code> and waits; reacquires the lock\non wakeup.\n<p>If <code>timeout</code> is given, this method …\n"]]}}