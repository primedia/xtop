var search_data = {"index":{"searchIndex":["time","httpdate()","iso8601()","parse()","rfc2822()","rfc822()","strptime()","xmlschema()","zone_offset()"],"longSearchIndex":["time","time#httpdate()","time#iso8601()","time#parse()","time#rfc2822()","time#rfc822()","time#strptime()","time#xmlschema()","time#zone_offset()"],"info":[["Time","","Time.html","","<p>Implements the extensions to the Time class that are described in the\ndocumentation for the time.rb library. …\n"],["httpdate","Time","Time.html#method-i-httpdate","(date)","<p>Parses <code>date</code> as HTTP-date defined by RFC 2616 and converts it\nto a Time object.\n<p>ArgumentError is raised …\n"],["iso8601","Time","Time.html#method-i-iso8601","(date)",""],["parse","Time","Time.html#method-i-parse","(date, now=self.now)","<p>Parses <code>date</code> using Date._parse and converts it to a Time\nobject.\n<p>If a block is given, the year described …\n"],["rfc2822","Time","Time.html#method-i-rfc2822","(date)","<p>Parses <code>date</code> as date-time defined by RFC 2822 and converts it\nto a Time object.  The format is identical …\n"],["rfc822","Time","Time.html#method-i-rfc822","(date)",""],["strptime","Time","Time.html#method-i-strptime","(date, format, now=self.now)","<p>Parses <code>date</code> using Date._strptime and converts it to a Time\nobject.\n<p>If a block is given, the year described …\n"],["xmlschema","Time","Time.html#method-i-xmlschema","(date)","<p>Parses <code>date</code> as dateTime defined by XML Schema and converts it\nto a Time object.  The format is restricted …\n"],["zone_offset","Time","Time.html#method-i-zone_offset","(zone, year=self.now.year)",""]]}}