var search_data = {"index":{"searchIndex":["object","tracer","add_filter()","off()","on()","set_get_line_procs()"],"longSearchIndex":["object","tracer","tracer::add_filter()","tracer::off()","tracer::on()","tracer::set_get_line_procs()"],"info":[["Object","","Object.html","",""],["Tracer","","Tracer.html","","<p>tracer main class\n"],["add_filter","Tracer","Tracer.html#method-c-add_filter","(p = proc)","<p>Used to filter unwanted trace output\n<p>Example which only outputs lines of code executed within the Kernel â€¦\n"],["off","Tracer","Tracer.html#method-c-off","()","<p>Disable tracing\n"],["on","Tracer","Tracer.html#method-c-on","()","<p>Start tracing\n<p>Example\n\n<pre>Tracer.on\n# code to trace here\nTracer.off</pre>\n"],["set_get_line_procs","Tracer","Tracer.html#method-c-set_get_line_procs","(file_name, p = proc)","<p>Register an event handler <code>p</code> which is called everytime a line\nin <code>file_name</code> is executed.\n<p>Example:\n\n<pre>Tracer.set_get_line_procs(&quot;example.rb&quot;, ...</pre>\n"]]}}