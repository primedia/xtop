var search_data = {"index":{"searchIndex":["dir","errno","econnaborted","econnreset","eproto","file","net","http","object","webrick","accesslog","accesslogerror","basiclog","cgi","socket","config","openssl","cookie","daemon","fakeproxyuri","genericserver","htmlutils","httpauth","authenticator","basicauth","digestauth","htdigest","htgroup","htpasswd","proxyauthenticator","proxybasicauth","proxydigestauth","userdb","httpproxyserver","httprequest","httpresponse","httpserver","mounttable","httpservererror","httpservlet","abstractservlet","cgihandler","defaultfilehandler","erbhandler","filehandler","httpservleterror","prochandler","httpstatus","clienterror","eoferror","error","info","redirect","servererror","status","success","httputils","formdata","httpversion","log","nullreader","servererror","simpleserver","utils","timeouthandler","<<()","<<()","<<()","<=>()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","access_log()","add()","add_handler()","addr()","append_data()","authenticate()","authenticate()","basic_auth()","body()","cancel()","cancel()","cert()","challenge()","challenge()","chunked=()","chunked?()","cipher()","client_error?()","close()","code()","content_length()","content_length()","content_length=()","content_type()","content_type()","content_type=()","continue()","convert()","create_listeners()","create_self_signed_cert()","debug()","debug?()","delete()","delete_passwd()","delete_passwd()","dequote()","do_connect()","do_get()","do_get()","do_get()","do_get()","do_get()","do_get()","do_get()","do_head()","do_head()","do_options()","do_options()","do_options()","do_options()","do_post()","do_post()","do_post()","do_post()","do_post()","each()","each()","each()","each()","each()","each_data()","eof?()","error()","error?()","error?()","escape()","escape()","expires()","expires=()","fatal()","fatal?()","fixup()","flush()","flush()","flush()","format()","get_instance()","get_instance()","get_passwd()","get_passwd()","get_passwd()","gets()","getservername()","host()","info()","info?()","info?()","interrupt()","keep_alive?()","keep_alive?()","list()","listen()","load_mime_types()","log()","log()","lookup_server()","make_partial_content()","make_passwd()","make_passwd()","make_passwd()","members()","meta_vars()","method_missing()","mime_type()","mount()","mount_proc()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize_path()","not_modified?()","orig_meta_vars()","orig_parse()","orig_parse_uri()","parse()","parse()","parse_header()","parse_qvalues()","parse_range_header()","parse_set_cookie()","parse_set_cookies()","peer_cert()","peer_cert_chain()","peeraddr()","port()","prepare_range()","proxy_auth()","proxy_basic_auth()","proxy_service()","proxy_uri()","query()","quote()","random_string()","read()","read()","reason_phrase()","reason_phrase()","redirect?()","register()","register()","reload()","reload()","reload()","remote_ip()","remove_handler()","run()","run()","scan()","search_servlet()","send_body()","send_header()","send_response()","server_error?()","server_name()","service()","service()","service()","service()","service()","set_close_on_exec()","set_error()","set_non_blocking()","set_passwd()","set_passwd()","set_passwd()","set_redirect()","setup_header()","setup_params()","setup_ssl_context()","shutdown()","split_header_value()","ssl?()","ssl_context()","start()","start()","start()","start()","status=()","status_line()","stop()","su()","success?()","sysread()","timeout()","to_ary()","to_i()","to_s()","to_s()","to_s()","umount()","unmount()","virtual_host()","warn()","warn?()"],"longSearchIndex":["dir","errno","errno::econnaborted","errno::econnreset","errno::eproto","file","net","net::http","object","webrick","webrick::accesslog","webrick::accesslog::accesslogerror","webrick::basiclog","webrick::cgi","webrick::cgi::socket","webrick::config","webrick::config::openssl","webrick::cookie","webrick::daemon","webrick::fakeproxyuri","webrick::genericserver","webrick::htmlutils","webrick::httpauth","webrick::httpauth::authenticator","webrick::httpauth::basicauth","webrick::httpauth::digestauth","webrick::httpauth::htdigest","webrick::httpauth::htgroup","webrick::httpauth::htpasswd","webrick::httpauth::proxyauthenticator","webrick::httpauth::proxybasicauth","webrick::httpauth::proxydigestauth","webrick::httpauth::userdb","webrick::httpproxyserver","webrick::httprequest","webrick::httpresponse","webrick::httpserver","webrick::httpserver::mounttable","webrick::httpservererror","webrick::httpservlet","webrick::httpservlet::abstractservlet","webrick::httpservlet::cgihandler","webrick::httpservlet::defaultfilehandler","webrick::httpservlet::erbhandler","webrick::httpservlet::filehandler","webrick::httpservlet::httpservleterror","webrick::httpservlet::prochandler","webrick::httpstatus","webrick::httpstatus::clienterror","webrick::httpstatus::eoferror","webrick::httpstatus::error","webrick::httpstatus::info","webrick::httpstatus::redirect","webrick::httpstatus::servererror","webrick::httpstatus::status","webrick::httpstatus::success","webrick::httputils","webrick::httputils::formdata","webrick::httpversion","webrick::log","webrick::nullreader","webrick::servererror","webrick::simpleserver","webrick::utils","webrick::utils::timeouthandler","webrick::basiclog#<<()","webrick::cgi::socket#<<()","webrick::httputils::formdata#<<()","webrick::httpversion#<=>()","webrick::cgi#[]()","webrick::genericserver#[]()","webrick::httprequest#[]()","webrick::httpresponse#[]()","webrick::httpserver::mounttable#[]()","webrick::httpstatus::[]()","webrick::httputils::formdata#[]()","webrick::httpresponse#[]=()","webrick::httpserver::mounttable#[]=()","webrick::httpserver#access_log()","webrick::httpauth::htgroup#add()","webrick::httpservlet::filehandler::add_handler()","webrick::cgi::socket#addr()","webrick::httputils::formdata#append_data()","webrick::httpauth::basicauth#authenticate()","webrick::httpauth::digestauth#authenticate()","webrick::httpauth#basic_auth()","webrick::httprequest#body()","webrick::utils::timeouthandler::cancel()","webrick::utils::timeouthandler#cancel()","webrick::cgi::socket#cert()","webrick::httpauth::basicauth#challenge()","webrick::httpauth::digestauth#challenge()","webrick::httpresponse#chunked=()","webrick::httpresponse#chunked?()","webrick::cgi::socket#cipher()","webrick::httpstatus::client_error?()","webrick::basiclog#close()","webrick::httpstatus::status#code()","webrick::httprequest#content_length()","webrick::httpresponse#content_length()","webrick::httpresponse#content_length=()","webrick::httprequest#content_type()","webrick::httpresponse#content_type()","webrick::httpresponse#content_type=()","webrick::httprequest#continue()","webrick::httpversion::convert()","webrick::utils::create_listeners()","webrick::utils::create_self_signed_cert()","webrick::basiclog#debug()","webrick::basiclog#debug?()","webrick::httpserver::mounttable#delete()","webrick::httpauth::htdigest#delete_passwd()","webrick::httpauth::htpasswd#delete_passwd()","webrick::httputils::dequote()","webrick::httpproxyserver#do_connect()","webrick::httpproxyserver#do_get()","webrick::httpservlet::abstractservlet#do_get()","webrick::httpservlet::cgihandler#do_get()","webrick::httpservlet::defaultfilehandler#do_get()","webrick::httpservlet::erbhandler#do_get()","webrick::httpservlet::filehandler#do_get()","webrick::httpservlet::prochandler#do_get()","webrick::httpproxyserver#do_head()","webrick::httpservlet::abstractservlet#do_head()","webrick::httpproxyserver#do_options()","webrick::httpserver#do_options()","webrick::httpservlet::abstractservlet#do_options()","webrick::httpservlet::filehandler#do_options()","webrick::httpproxyserver#do_post()","webrick::httpservlet::cgihandler#do_post()","webrick::httpservlet::erbhandler#do_post()","webrick::httpservlet::filehandler#do_post()","webrick::httpservlet::prochandler#do_post()","webrick::cgi::socket#each()","webrick::httpauth::htdigest#each()","webrick::httpauth::htpasswd#each()","webrick::httprequest#each()","webrick::httpresponse#each()","webrick::httputils::formdata#each_data()","webrick::cgi::socket#eof?()","webrick::basiclog#error()","webrick::basiclog#error?()","webrick::httpstatus::error?()","webrick::accesslog#escape()","webrick::htmlutils::escape()","webrick::cookie#expires()","webrick::cookie#expires=()","webrick::basiclog#fatal()","webrick::basiclog#fatal?()","webrick::httprequest#fixup()","webrick::httpauth::htdigest#flush()","webrick::httpauth::htgroup#flush()","webrick::httpauth::htpasswd#flush()","webrick::accesslog#format()","webrick::httpservlet::abstractservlet::get_instance()","webrick::httpservlet::prochandler#get_instance()","webrick::httpauth::htdigest#get_passwd()","webrick::httpauth::htpasswd#get_passwd()","webrick::httpauth::userdb#get_passwd()","webrick::cgi::socket#gets()","webrick::utils::getservername()","webrick::httprequest#host()","webrick::basiclog#info()","webrick::basiclog#info?()","webrick::httpstatus::info?()","webrick::utils::timeouthandler#interrupt()","webrick::httprequest#keep_alive?()","webrick::httpresponse#keep_alive?()","webrick::httputils::formdata#list()","webrick::genericserver#listen()","webrick::httputils::load_mime_types()","webrick::basiclog#log()","webrick::log#log()","webrick::httpserver#lookup_server()","webrick::httpservlet::defaultfilehandler#make_partial_content()","webrick::httpauth::basicauth::make_passwd()","webrick::httpauth::digestauth::make_passwd()","webrick::httpauth::userdb#make_passwd()","webrick::httpauth::htgroup#members()","webrick::httprequest#meta_vars()","webrick::fakeproxyuri#method_missing()","webrick::httputils::mime_type()","webrick::httpserver#mount()","webrick::httpserver#mount_proc()","webrick::basiclog::new()","webrick::cgi::new()","webrick::cgi::socket::new()","webrick::cookie::new()","webrick::genericserver::new()","webrick::httpauth::basicauth::new()","webrick::httpauth::digestauth::new()","webrick::httpauth::htdigest::new()","webrick::httpauth::htgroup::new()","webrick::httpauth::htpasswd::new()","webrick::httpproxyserver::new()","webrick::httprequest::new()","webrick::httpresponse::new()","webrick::httpserver::new()","webrick::httpserver::mounttable::new()","webrick::httpservlet::abstractservlet::new()","webrick::httpservlet::cgihandler::new()","webrick::httpservlet::defaultfilehandler::new()","webrick::httpservlet::erbhandler::new()","webrick::httpservlet::filehandler::new()","webrick::httpservlet::prochandler::new()","webrick::httputils::formdata::new()","webrick::httpversion::new()","webrick::log::new()","webrick::utils::timeouthandler::new()","webrick::httputils::normalize_path()","webrick::httpservlet::defaultfilehandler#not_modified?()","webrick::httprequest#orig_meta_vars()","webrick::httprequest#orig_parse()","webrick::httprequest#orig_parse_uri()","webrick::cookie::parse()","webrick::httprequest#parse()","webrick::httputils::parse_header()","webrick::httputils::parse_qvalues()","webrick::httputils::parse_range_header()","webrick::cookie::parse_set_cookie()","webrick::cookie::parse_set_cookies()","webrick::cgi::socket#peer_cert()","webrick::cgi::socket#peer_cert_chain()","webrick::cgi::socket#peeraddr()","webrick::httprequest#port()","webrick::httpservlet::defaultfilehandler#prepare_range()","webrick::httpproxyserver#proxy_auth()","webrick::httpauth#proxy_basic_auth()","webrick::httpproxyserver#proxy_service()","webrick::httpproxyserver#proxy_uri()","webrick::httprequest#query()","webrick::httputils::quote()","webrick::utils::random_string()","webrick::cgi::socket#read()","webrick::nullreader#read()","webrick::httpstatus::reason_phrase()","webrick::httpstatus::status#reason_phrase()","webrick::httpstatus::redirect?()","webrick::utils::timeouthandler#register()","webrick::utils::timeouthandler::register()","webrick::httpauth::htdigest#reload()","webrick::httpauth::htgroup#reload()","webrick::httpauth::htpasswd#reload()","webrick::httprequest#remote_ip()","webrick::httpservlet::filehandler::remove_handler()","webrick::genericserver#run()","webrick::httpserver#run()","webrick::httpserver::mounttable#scan()","webrick::httpserver#search_servlet()","webrick::httpresponse#send_body()","webrick::httpresponse#send_header()","webrick::httpresponse#send_response()","webrick::httpstatus::server_error?()","webrick::httprequest#server_name()","webrick::cgi#service()","webrick::httpproxyserver#service()","webrick::httpserver#service()","webrick::httpservlet::abstractservlet#service()","webrick::httpservlet::filehandler#service()","webrick::utils::set_close_on_exec()","webrick::httpresponse#set_error()","webrick::utils::set_non_blocking()","webrick::httpauth::htdigest#set_passwd()","webrick::httpauth::htpasswd#set_passwd()","webrick::httpauth::userdb#set_passwd()","webrick::httpresponse#set_redirect()","webrick::httpresponse#setup_header()","webrick::accesslog#setup_params()","webrick::genericserver#setup_ssl_context()","webrick::genericserver#shutdown()","webrick::httputils::split_header_value()","webrick::httprequest#ssl?()","webrick::genericserver#ssl_context()","webrick::cgi#start()","webrick::daemon::start()","webrick::genericserver#start()","webrick::simpleserver::start()","webrick::httpresponse#status=()","webrick::httpresponse#status_line()","webrick::genericserver#stop()","webrick::utils::su()","webrick::httpstatus::success?()","object#sysread()","webrick::utils::timeout()","webrick::httputils::formdata#to_ary()","webrick::httpstatus::status#to_i()","webrick::cookie#to_s()","webrick::httputils::formdata#to_s()","webrick::httpversion#to_s()","webrick::httpserver#umount()","webrick::httpserver#unmount()","webrick::httpserver#virtual_host()","webrick::basiclog#warn()","webrick::basiclog#warn?()"],"info":[["Dir","","Dir.html","",""],["Errno","","Errno.html","","<p>System call error module used by webrick for cross platform compatability.\n<p>EPROTO &mdash; protocol error\n<p>ECONNRESET … &mdash; "],["Errno::ECONNABORTED","","Errno/ECONNABORTED.html","","<p>Client sent TCP reset (RST) before server has accepted the connection\nrequested by client.\n"],["Errno::ECONNRESET","","Errno/ECONNRESET.html","","<p>Remote host reset the connection request.\n"],["Errno::EPROTO","","Errno/EPROTO.html","","<p>Protocol error.\n"],["File","","File.html","",""],["Net","","Net.html","",""],["Net::HTTP","","Net/HTTP.html","",""],["Object","","Object.html","",""],["WEBrick","","WEBrick.html","","<p>WEB server toolkit.\n<p>WEBrick is an HTTP server toolkit that can be configured as an HTTPS\nserver, a proxy …\n"],["WEBrick::AccessLog","","WEBrick/AccessLog.html","","<p>AccessLog provides logging to various files in various formats.\n<p>Multiple logs may be written to at the …\n"],["WEBrick::AccessLog::AccessLogError","","WEBrick/AccessLog/AccessLogError.html","","<p>Raised if a parameter such as %e, %i, %o or %n is used without fetching a\nspecific field.\n"],["WEBrick::BasicLog","","WEBrick/BasicLog.html","","<p>A generic logging class\n"],["WEBrick::CGI","","WEBrick/CGI.html","",""],["WEBrick::CGI::Socket","","WEBrick/CGI/Socket.html","",""],["WEBrick::Config","","WEBrick/Config.html","",""],["WEBrick::Config::OpenSSL","","WEBrick/Config/OpenSSL.html","",""],["WEBrick::Cookie","","WEBrick/Cookie.html","",""],["WEBrick::Daemon","","WEBrick/Daemon.html","","<p>A generic module for daemonizing a process\n"],["WEBrick::FakeProxyURI","","WEBrick/FakeProxyURI.html","",""],["WEBrick::GenericServer","","WEBrick/GenericServer.html","",""],["WEBrick::HTMLUtils","","WEBrick/HTMLUtils.html","",""],["WEBrick::HTTPAuth","","WEBrick/HTTPAuth.html","","<p>HTTPAuth provides both basic and digest authentication.\n<p>To enable authentication for requests in WEBrick …\n"],["WEBrick::HTTPAuth::Authenticator","","WEBrick/HTTPAuth/Authenticator.html","","<p>Module providing generic support for both Digest and Basic authentication\nschemes.\n"],["WEBrick::HTTPAuth::BasicAuth","","WEBrick/HTTPAuth/BasicAuth.html","","<p>Basic Authentication for WEBrick\n<p>Use this class to add basic authentication to a WEBrick servlet.\n<p>Here …\n"],["WEBrick::HTTPAuth::DigestAuth","","WEBrick/HTTPAuth/DigestAuth.html","","<p>RFC 2617 Digest Access Authentication for WEBrick\n<p>Use this class to add digest authentication to a WEBrick …\n"],["WEBrick::HTTPAuth::Htdigest","","WEBrick/HTTPAuth/Htdigest.html","","<p>Htdigest accesses apache-compatible digest password files.  Passwords are\nmatched to a realm where they …\n"],["WEBrick::HTTPAuth::Htgroup","","WEBrick/HTTPAuth/Htgroup.html","","<p>Htgroup accesses apache-compatible group files.  Htgroup can be used to\nprovide group-based authentication …\n"],["WEBrick::HTTPAuth::Htpasswd","","WEBrick/HTTPAuth/Htpasswd.html","","<p>Htpasswd accesses apache-compatible password files.  Passwords are matched\nto a realm where they are …\n"],["WEBrick::HTTPAuth::ProxyAuthenticator","","WEBrick/HTTPAuth/ProxyAuthenticator.html","","<p>Module providing generic support for both Digest and Basic authentication\nschemes for proxies.\n"],["WEBrick::HTTPAuth::ProxyBasicAuth","","WEBrick/HTTPAuth/ProxyBasicAuth.html","","<p>Basic authentication for proxy servers.  See BasicAuth for details.\n"],["WEBrick::HTTPAuth::ProxyDigestAuth","","WEBrick/HTTPAuth/ProxyDigestAuth.html","","<p>Digest authentication for proxy servers.  See DigestAuth for details.\n"],["WEBrick::HTTPAuth::UserDB","","WEBrick/HTTPAuth/UserDB.html","","<p>User database mixin for HTTPAuth.  This mixin dispatches user record access\nto the underlying auth_type …\n"],["WEBrick::HTTPProxyServer","","WEBrick/HTTPProxyServer.html","","<p>An HTTP Proxy server which proxies GET, HEAD and POST requests.\n"],["WEBrick::HTTPRequest","","WEBrick/HTTPRequest.html","","<p>An HTTP request.\n"],["WEBrick::HTTPResponse","","WEBrick/HTTPResponse.html","","<p>An HTTP response.\n"],["WEBrick::HTTPServer","","WEBrick/HTTPServer.html","","<p>An HTTP Server\n"],["WEBrick::HTTPServer::MountTable","","WEBrick/HTTPServer/MountTable.html","",""],["WEBrick::HTTPServerError","","WEBrick/HTTPServerError.html","",""],["WEBrick::HTTPServlet","","WEBrick/HTTPServlet.html","",""],["WEBrick::HTTPServlet::AbstractServlet","","WEBrick/HTTPServlet/AbstractServlet.html","","<p>AbstractServlet allows HTTP server modules to be reused across multiple\nservers and allows encapsulation …\n"],["WEBrick::HTTPServlet::CGIHandler","","WEBrick/HTTPServlet/CGIHandler.html","",""],["WEBrick::HTTPServlet::DefaultFileHandler","","WEBrick/HTTPServlet/DefaultFileHandler.html","",""],["WEBrick::HTTPServlet::ERBHandler","","WEBrick/HTTPServlet/ERBHandler.html","","<p>ERBHandler evaluates an ERB file and returns the result.  This handler is\nautomatically used if there …\n"],["WEBrick::HTTPServlet::FileHandler","","WEBrick/HTTPServlet/FileHandler.html","","<p>Serves files from a directory\n"],["WEBrick::HTTPServlet::HTTPServletError","","WEBrick/HTTPServlet/HTTPServletError.html","",""],["WEBrick::HTTPServlet::ProcHandler","","WEBrick/HTTPServlet/ProcHandler.html","",""],["WEBrick::HTTPStatus","","WEBrick/HTTPStatus.html","","<p>This module is used to manager HTTP status codes.\n<p>See www.w3.org/Protocols/rfc2616/rfc2616-sec10.html …\n"],["WEBrick::HTTPStatus::ClientError","","WEBrick/HTTPStatus/ClientError.html","","<p>Root of the HTTP client error statuses\n"],["WEBrick::HTTPStatus::EOFError","","WEBrick/HTTPStatus/EOFError.html","",""],["WEBrick::HTTPStatus::Error","","WEBrick/HTTPStatus/Error.html","","<p>Root of the HTTP error statuses\n"],["WEBrick::HTTPStatus::Info","","WEBrick/HTTPStatus/Info.html","","<p>Root of the HTTP info statuses\n"],["WEBrick::HTTPStatus::Redirect","","WEBrick/HTTPStatus/Redirect.html","","<p>Root of the HTTP redirect statuses\n"],["WEBrick::HTTPStatus::ServerError","","WEBrick/HTTPStatus/ServerError.html","","<p>Root of the HTTP server error statuses\n"],["WEBrick::HTTPStatus::Status","","WEBrick/HTTPStatus/Status.html","","<p>Root of the HTTP status class hierarchy\n"],["WEBrick::HTTPStatus::Success","","WEBrick/HTTPStatus/Success.html","","<p>Root of the HTTP sucess statuses\n"],["WEBrick::HTTPUtils","","WEBrick/HTTPUtils.html","",""],["WEBrick::HTTPUtils::FormData","","WEBrick/HTTPUtils/FormData.html","",""],["WEBrick::HTTPVersion","","WEBrick/HTTPVersion.html","",""],["WEBrick::Log","","WEBrick/Log.html","","<p>A logging class that prepends a timestamp to each message.\n"],["WEBrick::NullReader","","WEBrick/NullReader.html","",""],["WEBrick::ServerError","","WEBrick/ServerError.html","",""],["WEBrick::SimpleServer","","WEBrick/SimpleServer.html","",""],["WEBrick::Utils","","WEBrick/Utils.html","",""],["WEBrick::Utils::TimeoutHandler","","WEBrick/Utils/TimeoutHandler.html","","<p>Class used to manage timeout handlers across multiple threads.\n<p>Timeout handlers should be managed by using …\n"],["<<","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-3C-3C","(obj)","<p>Synonym for log(INFO, obj.to_s)\n"],["<<","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-3C-3C","(data)",""],["<<","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-3C-3C","(str)",""],["<=>","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-i-3C-3D-3E","(other)",""],["[]","WEBrick::CGI","WEBrick/CGI.html#method-i-5B-5D","(key)",""],["[]","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-5B-5D","(key)",""],["[]","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-5B-5D","(header_name)","<p>Retrieves <code>header_name</code>\n"],["[]","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-5B-5D","(field)","<p>Retrieves the response header <code>field</code>\n"],["[]","WEBrick::HTTPServer::MountTable","WEBrick/HTTPServer/MountTable.html#method-i-5B-5D","(dir)",""],["[]","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-5B-5D","(code)","<p>Returns the status class corresponding to <code>code</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">WEBrick</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTPStatus</span>[<span class=\"ruby-value\">302</span>]\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">WEBrick</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTPStatus</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">NotFound</span>\n</pre>\n"],["[]","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-5B-5D","(*key)",""],["[]=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-5B-5D-3D","(field, value)","<p>Sets the response header <code>field</code> to <code>value</code>\n"],["[]=","WEBrick::HTTPServer::MountTable","WEBrick/HTTPServer/MountTable.html#method-i-5B-5D-3D","(dir, val)",""],["access_log","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-access_log","(config, req, res)",""],["add","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-add","(group, members)","<p>Add an Array of <code>members</code> to <code>group</code>\n"],["add_handler","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-c-add_handler","(suffix, handler)","<p>Allow custom handling of requests for files with <code>suffix</code> by\nclass <code>handler</code>\n"],["addr","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-addr","()",""],["append_data","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-append_data","(data)",""],["authenticate","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using\n<code>res</code> if the authentication was not correct.\n"],["authenticate","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using\n<code>res</code> if the authentication was not correct.\n"],["basic_auth","WEBrick::HTTPAuth","WEBrick/HTTPAuth.html#method-i-basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a request.  When\ncalled with a request <code>req</code>, response …\n"],["body","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-body","(&block)",""],["cancel","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-cancel","(id)","<p>Cancels the timeout handler <code>id</code>\n"],["cancel","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-i-cancel","(thread, id)","<p>Cancels the timeout handler <code>id</code>\n"],["cert","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-cert","()",""],["challenge","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-i-challenge","(req, res)","<p>Returns a challenge response which asks for for authentication information\n"],["challenge","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-i-challenge","(req, res, stale=false)","<p>Returns a challenge response which asks for for authentication information\n"],["chunked=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-chunked-3D","(val)","<p>Enables chunked transfer encoding.\n"],["chunked?","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-chunked-3F","()","<p>Will this response body be returned using chunked transfer-encoding?\n"],["cipher","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-cipher","()",""],["client_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-client_error-3F","(code)","<p>Is <code>code</code> a client error status?\n"],["close","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-close","()","<p>Closes the logger (also closes the log device associated to the logger)\n"],["code","WEBrick::HTTPStatus::Status","WEBrick/HTTPStatus/Status.html#method-i-code","()","<p>Returns the HTTP status code\n"],["content_length","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-content_length","()","<p>The content-length header\n"],["content_length","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_length","()","<p>The content-length header\n"],["content_length=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_length-3D","(len)","<p>Sets the content-length header to <code>len</code>\n"],["content_type","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-content_type","()","<p>The content-type header\n"],["content_type","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_type","()","<p>The content-type header\n"],["content_type=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_type-3D","(type)","<p>Sets the content-type header to <code>type</code>\n"],["continue","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-continue","()","<p>Generate HTTP/1.1 100 continue response if the client expects it, otherwise\ndoes nothing.\n"],["convert","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-c-convert","(version)",""],["create_listeners","WEBrick::Utils","WEBrick/Utils.html#method-c-create_listeners","(address, port, logger=nil)","<p>Creates TCP server sockets bound to <code>address</code>:<code>port</code>\nand returns them.\n<p>It will create IPV4 and IPV6 sockets …\n"],["create_self_signed_cert","WEBrick::Utils","WEBrick/Utils.html#method-c-create_self_signed_cert","(bits, cn, comment)",""],["debug","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-debug","(msg)","<p>Shortcut for logging a DEBUG message\n"],["debug?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-debug-3F","()","<p>Will the logger output DEBUG messages?\n"],["delete","WEBrick::HTTPServer::MountTable","WEBrick/HTTPServer/MountTable.html#method-i-delete","(dir)",""],["delete_passwd","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in\n<code>realm</code>.\n"],["delete_passwd","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in\n<code>realm</code>.\n"],["dequote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-dequote","(str)",""],["do_CONNECT","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-i-do_CONNECT","(req, res)",""],["do_GET","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-i-do_GET","(req, res)",""],["do_GET","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_GET","(req, res)","<p>Raises a NotFound exception\n"],["do_GET","WEBrick::HTTPServlet::CGIHandler","WEBrick/HTTPServlet/CGIHandler.html#method-i-do_GET","(req, res)",""],["do_GET","WEBrick::HTTPServlet::DefaultFileHandler","WEBrick/HTTPServlet/DefaultFileHandler.html#method-i-do_GET","(req, res)",""],["do_GET","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-i-do_GET","(req, res)","<p>Handles GET requests\n"],["do_GET","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-i-do_GET","(req, res)",""],["do_GET","WEBrick::HTTPServlet::ProcHandler","WEBrick/HTTPServlet/ProcHandler.html#method-i-do_GET","(request, response)",""],["do_HEAD","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-i-do_HEAD","(req, res)",""],["do_HEAD","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_HEAD","(req, res)","<p>Dispatches to do_GET\n"],["do_OPTIONS","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-i-do_OPTIONS","(req, res)",""],["do_OPTIONS","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-do_OPTIONS","(req, res)",""],["do_OPTIONS","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_OPTIONS","(req, res)","<p>Returns the allowed HTTP request methods\n"],["do_OPTIONS","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-i-do_OPTIONS","(req, res)",""],["do_POST","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-i-do_POST","(req, res)",""],["do_POST","WEBrick::HTTPServlet::CGIHandler","WEBrick/HTTPServlet/CGIHandler.html#method-i-do_POST","(req, res)",""],["do_POST","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-i-do_POST","(req, res)","<p>Handles POST requests\n"],["do_POST","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-i-do_POST","(req, res)",""],["do_POST","WEBrick::HTTPServlet::ProcHandler","WEBrick/HTTPServlet/ProcHandler.html#method-i-do_POST","(request, response)",""],["each","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-each","()",""],["each","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-each","()","<p>Iterates over the request headers\n"],["each","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-each","()","<p>Iterates over each header in the resopnse\n"],["each_data","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-each_data","()",""],["eof?","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-eof-3F","()",""],["error","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-error","(msg)","<p>Shortcut for logging an ERROR message\n"],["error?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-error-3F","()","<p>Will the logger output ERROR messages?\n"],["error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-error-3F","(code)","<p>Is <code>code</code> an error status?\n"],["escape","WEBrick::AccessLog","WEBrick/AccessLog.html#method-i-escape","(data)",""],["escape","WEBrick::HTMLUtils","WEBrick/HTMLUtils.html#method-c-escape","(string)","<p>Escapes &amp;, “, &gt; and &lt; in <code>string</code>\n"],["expires","WEBrick::Cookie","WEBrick/Cookie.html#method-i-expires","()",""],["expires=","WEBrick::Cookie","WEBrick/Cookie.html#method-i-expires-3D","(t)",""],["fatal","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-fatal","(msg)","<p>Shortcut for logging a FATAL message\n"],["fatal?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-fatal-3F","()","<p>Will the logger output FATAL messages?\n"],["fixup","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-fixup","()",""],["flush","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database\nwill be written there instead of to the …\n"],["flush","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-flush","(output=nil)","<p>Flush the group database.  If <code>output</code> is given the database\nwill be written there instead of to the original …\n"],["flush","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database\nwill be written there instead of to the …\n"],["format","WEBrick::AccessLog","WEBrick/AccessLog.html#method-i-format","(format_string, params)",""],["get_instance","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-c-get_instance","(server, *options)","<p>Factory for servlet instances that will handle a request from\n<code>server</code> using <code>options</code> from the mount point. …\n"],["get_instance","WEBrick::HTTPServlet::ProcHandler","WEBrick/HTTPServlet/ProcHandler.html#method-i-get_instance","(server, *options)",""],["get_passwd","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in\n<code>realm</code>.  If <code>reload_db</code> is true the database will be\n…\n"],["get_passwd","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in\n<code>realm</code>.  If <code>reload_db</code> is true the database will be\n…\n"],["get_passwd","WEBrick::HTTPAuth::UserDB","WEBrick/HTTPAuth/UserDB.html#method-i-get_passwd","(realm, user, reload_db=false)","<p>Retrieves a password in <code>realm</code> for <code>user</code> for the\nauth_type of this database.  <code>reload_db</code> is a dummy value. …\n"],["gets","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-gets","(eol=LF, size=nil)",""],["getservername","WEBrick::Utils","WEBrick/Utils.html#method-c-getservername","()","<p>The server hostname\n"],["host","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-host","()","<p>The host this request is for\n"],["info","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-info","(msg)","<p>Shortcut for logging an INFO message\n"],["info?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-info-3F","()","<p>Will the logger output INFO messages?\n"],["info?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-info-3F","(code)","<p>Is <code>code</code> an informational status?\n"],["interrupt","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-i-interrupt","(thread, id, exception)","<p>Interrupts the timeout handler <code>id</code> and raises\n<code>exception</code>\n"],["keep_alive?","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-keep_alive-3F","()","<p>Should the connection this request was made on be kept alive?\n"],["keep_alive?","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-keep_alive-3F","()","<p>Will this response’s connection be kept alive?\n"],["list","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-list","()",""],["listen","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-listen","(address, port)",""],["load_mime_types","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-load_mime_types","(file)","<p>Load Apache compatible mime.types file.\n"],["log","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-log","(level, data)","<p>Logs <code>data</code> at <code>level</code> if the given level is above\nthe current log level.\n"],["log","WEBrick::Log","WEBrick/Log.html#method-i-log","(level, data)","<p>Same as BasicLog#log\n"],["lookup_server","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-lookup_server","(req)","<p>Finds the appropriate virtual host to handle <code>req</code>\n"],["make_partial_content","WEBrick::HTTPServlet::DefaultFileHandler","WEBrick/HTTPServlet/DefaultFileHandler.html#method-i-make_partial_content","(req, res, filename, filesize)",""],["make_passwd","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a basic password entry\n"],["make_passwd","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a digest password entry\n"],["make_passwd","WEBrick::HTTPAuth::UserDB","WEBrick/HTTPAuth/UserDB.html#method-i-make_passwd","(realm, user, pass)","<p>Creates an obscured password in <code>realm</code> with <code>user</code>\nand <code>password</code> using the auth_type of this database.\n"],["members","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-members","(group)","<p>Retrieve the list of members from <code>group</code>\n"],["meta_vars","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-meta_vars","()","<p>This method provides the metavariables defined by the revision 3 of “The\nWWW Common Gateway Interface …\n"],["method_missing","WEBrick::FakeProxyURI","WEBrick/FakeProxyURI.html#method-i-method_missing","(meth, *args)",""],["mime_type","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-mime_type","(filename, mime_tab)",""],["mount","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-mount","(dir, servlet, *options)","<p>Mounts <code>servlet</code> on <code>dir</code> passing\n<code>options</code> to the servlet at creation time\n"],["mount_proc","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-mount_proc","(dir, proc=nil, &block)","<p>Mounts <code>proc</code> or <code>block</code> on <code>dir</code> and\ncalls it with a WEBrick::HTTPRequest and WEBrick::HTTPResponse\n"],["new","WEBrick::BasicLog","WEBrick/BasicLog.html#method-c-new","(log_file=nil, level=nil)","<p>Initializes a new logger for <code>log_file</code> that outputs messages at\n<code>level</code> or higher.  <code>log_file</code> can be a filename, …\n"],["new","WEBrick::CGI","WEBrick/CGI.html#method-c-new","(*args)",""],["new","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-c-new","(config, env, stdin, stdout)",""],["new","WEBrick::Cookie","WEBrick/Cookie.html#method-c-new","(name, value)","<p>attr_accessor :comment_url, :discard, :port\n"],["new","WEBrick::GenericServer","WEBrick/GenericServer.html#method-c-new","(config={}, default=Config::General)",""],["new","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-c-new","(config, default=Config::BasicAuth)","<p>Creates a new BasicAuth instance.\n<p>See WEBrick::Config::BasicAuth for default configuration entries\n<p>You …\n"],["new","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-c-new","(config, default=Config::DigestAuth)","<p>Creates a new DigestAuth instance.  Be sure to use the same DigestAuth\ninstance for multiple requests …\n"],["new","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-c-new","(path)","<p>Open a digest password database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-c-new","(path)","<p>Open a group database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-c-new","(path)","<p>Open a password database at <code>path</code>\n"],["new","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Proxy server configurations.  The proxy server handles the following\nconfiguration items in addition …\n"],["new","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-c-new","(config)",""],["new","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-c-new","(config)","<p>Creates a new HTTP response object\n"],["new","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Creates a new HTTP server according to <code>config</code>\n<p>An HTTP server uses the following attributes:\n<p>:AccessLog … &mdash; "],["new","WEBrick::HTTPServer::MountTable","WEBrick/HTTPServer/MountTable.html#method-c-new","()",""],["new","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-c-new","(server, *options)","<p>Initializes a new servlet for <code>server</code> using\n<code>options</code> which are stored as-is in +@options+.  +@logger+ is …\n"],["new","WEBrick::HTTPServlet::CGIHandler","WEBrick/HTTPServlet/CGIHandler.html#method-c-new","(server, name)",""],["new","WEBrick::HTTPServlet::DefaultFileHandler","WEBrick/HTTPServlet/DefaultFileHandler.html#method-c-new","(server, local_path)",""],["new","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-c-new","(server, name)","<p>Creates a new ERBHandler on <code>server</code> that will evaluate and\nserve the ERB file <code>name</code>\n"],["new","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-c-new","(server, root, options={}, default=Config::FileHandler)","<p>Creates a FileHandler servlet on <code>server</code> that serves files\nstarting at directory <code>root</code>\n<p>If <code>options</code> is a  …\n"],["new","WEBrick::HTTPServlet::ProcHandler","WEBrick/HTTPServlet/ProcHandler.html#method-c-new","(proc)",""],["new","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-c-new","(*args)",""],["new","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-c-new","(version)",""],["new","WEBrick::Log","WEBrick/Log.html#method-c-new","(log_file=nil, level=nil)","<p>Same as BasicLog#initialize\n<p>You can set the timestamp format through #time_format\n"],["new","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-new","()",""],["normalize_path","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-normalize_path","(path)",""],["not_modified?","WEBrick::HTTPServlet::DefaultFileHandler","WEBrick/HTTPServlet/DefaultFileHandler.html#method-i-not_modified-3F","(req, res, mtime, etag)",""],["orig_meta_vars","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-orig_meta_vars","()",""],["orig_parse","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-orig_parse","(socket=nil)",""],["orig_parse_uri","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-orig_parse_uri","(str, scheme=\"http\")",""],["parse","WEBrick::Cookie","WEBrick/Cookie.html#method-c-parse","(str)","<p>Cookie::parse()\n\n<pre>It parses Cookie field sent from the user agent.</pre>\n"],["parse","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-parse","(socket=nil)",""],["parse_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_header","(raw)",""],["parse_qvalues","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_qvalues","(value)",""],["parse_range_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_range_header","(ranges_specifier)",""],["parse_set_cookie","WEBrick::Cookie","WEBrick/Cookie.html#method-c-parse_set_cookie","(str)",""],["parse_set_cookies","WEBrick::Cookie","WEBrick/Cookie.html#method-c-parse_set_cookies","(str)",""],["peer_cert","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-peer_cert","()",""],["peer_cert_chain","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-peer_cert_chain","()",""],["peeraddr","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-peeraddr","()",""],["port","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-port","()","<p>The port this request is for\n"],["prepare_range","WEBrick::HTTPServlet::DefaultFileHandler","WEBrick/HTTPServlet/DefaultFileHandler.html#method-i-prepare_range","(range, filesize)",""],["proxy_auth","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-i-proxy_auth","(req, res)",""],["proxy_basic_auth","WEBrick::HTTPAuth","WEBrick/HTTPAuth.html#method-i-proxy_basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a proxied request.\nWhen called with a request  …\n"],["proxy_service","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-i-proxy_service","(req, res)",""],["proxy_uri","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-i-proxy_uri","(req, res)",""],["query","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-query","()","<p>Request query as a Hash\n"],["quote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-quote","(str)",""],["random_string","WEBrick::Utils","WEBrick/Utils.html#method-c-random_string","(len)","<p>Generates a random string of length <code>len</code>\n"],["read","WEBrick::CGI::Socket","WEBrick/CGI/Socket.html#method-i-read","(size=nil)",""],["read","WEBrick::NullReader","WEBrick/NullReader.html#method-i-read","(*args)",""],["reason_phrase","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-reason_phrase","(code)","<p>Returns the description corresponding to the HTTP status <code>code</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">WEBrick</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTPStatus</span>.<span class=\"ruby-identifier\">reason_phrase</span> <span class=\"ruby-value\">404</span>\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reason_phrase","WEBrick::HTTPStatus::Status","WEBrick/HTTPStatus/Status.html#method-i-reason_phrase","()","<p>Returns the HTTP status description\n"],["redirect?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-redirect-3F","(code)","<p>Is <code>code</code> a redirection status?\n"],["register","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-i-register","(thread, time, exception)","<p>Registers a new timeout handler\n<p>time &mdash; Timeout in seconds\n<p>exception &mdash; Exception to raise when timeout elapsed …\n"],["register","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-register","(seconds, exception)","<p>Registers a new timeout handler\n<p>time &mdash; Timeout in seconds\n<p>exception &mdash; Exception to raise when timeout elapsed …\n"],["reload","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-reload","()","<p>Reloads passwords from the database\n"],["reload","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-reload","()","<p>Reload groups from the database\n"],["reload","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-reload","()","<p>Reload passwords from the database\n"],["remote_ip","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-remote_ip","()","<p>The client’s IP address\n"],["remove_handler","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-c-remove_handler","(suffix)","<p>Remove custom handling of requests for files with <code>suffix</code>\n"],["run","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-run","(sock)",""],["run","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-run","(sock)","<p>Processes requests on <code>sock</code>\n"],["scan","WEBrick::HTTPServer::MountTable","WEBrick/HTTPServer/MountTable.html#method-i-scan","(path)",""],["search_servlet","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-search_servlet","(path)","<p>Finds a servlet for <code>path</code>\n"],["send_body","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-send_body","(socket)","<p>Sends the body on <code>socket</code>\n"],["send_header","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-send_header","(socket)","<p>Sends the headers on <code>socket</code>\n"],["send_response","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-send_response","(socket)","<p>Sends the response on <code>socket</code>\n"],["server_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-server_error-3F","(code)","<p>Is <code>code</code> a server error status?\n"],["server_name","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-server_name","()","<p>The server name this request is for\n"],["service","WEBrick::CGI","WEBrick/CGI.html#method-i-service","(req, res)",""],["service","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-i-service","(req, res)",""],["service","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-service","(req, res)","<p>Services <code>req</code> and fills in <code>res</code>\n"],["service","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-service","(req, res)","<p>Dispatches to a <code>do_</code> method based on <code>req</code> if such a\nmethod is available.  (<code>do_GET</code> for a GET request).  …\n"],["service","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-i-service","(req, res)",""],["set_close_on_exec","WEBrick::Utils","WEBrick/Utils.html#method-c-set_close_on_exec","(io)","<p>Sets the close on exec flag for <code>io</code>\n"],["set_error","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-set_error","(ex, backtrace=false)","<p>Creates an error page for exception <code>ex</code> with an optional\n<code>backtrace</code>\n"],["set_non_blocking","WEBrick::Utils","WEBrick/Utils.html#method-c-set_non_blocking","(io)","<p>Sets IO operations on <code>io</code> to be non-blocking\n"],["set_passwd","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code>\nto <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code>\nto <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::UserDB","WEBrick/HTTPAuth/UserDB.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in <code>realm</code> with <code>user</code> and\n<code>password</code> for the auth_type of this database.\n"],["set_redirect","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-set_redirect","(status, url)","<p>Redirects to <code>url</code> with a WEBrick::HTTPStatus::Redirect\n<code>status</code>.\n<p>Example:\n\n<pre>res.set_redirect WEBrick::HTTPStatus::TemporaryRedirect</pre>\n"],["setup_header","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-setup_header","()","<p>Sets up the headers for sending\n"],["setup_params","WEBrick::AccessLog","WEBrick/AccessLog.html#method-i-setup_params","(config, req, res)","<p>This format specification is a subset of mod_log_config of Apache:\n<p>%a &mdash; Remote IP address\n<p>%b &mdash; Total response …\n"],["setup_ssl_context","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-setup_ssl_context","(config)",""],["shutdown","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-shutdown","()",""],["split_header_value","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-split_header_value","(str)",""],["ssl?","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-ssl-3F","()","<p>Is this an SSL request?\n"],["ssl_context","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-ssl_context","()",""],["start","WEBrick::CGI","WEBrick/CGI.html#method-i-start","(env=ENV, stdin=$stdin, stdout=$stdout)",""],["start","WEBrick::Daemon","WEBrick/Daemon.html#method-c-start","()","<p>Performs the standard operations for daemonizing a process.  Runs a block,\nif given.\n"],["start","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-start","(&block)",""],["start","WEBrick::SimpleServer","WEBrick/SimpleServer.html#method-c-start","()",""],["status=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-status-3D","(status)","<p>Sets the response’s status to the <code>status</code> code\n"],["status_line","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-status_line","()","<p>The response’s HTTP status line\n"],["stop","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-stop","()",""],["su","WEBrick::Utils","WEBrick/Utils.html#method-c-su","(user)","<p>Changes the process’s uid and gid to the ones of <code>user</code>\n"],["success?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-success-3F","(code)","<p>Is <code>code</code> a successful status?\n"],["sysread","Object","Object.html#method-i-sysread","(io, size)","<p>cgi_runner.rb – CGI launcher.\n<p>Author: IPR – Internet Programming with Ruby – writers Copyright © …\n"],["timeout","WEBrick::Utils","WEBrick/Utils.html#method-c-timeout","(seconds, exception=Timeout::Error)","<p>Executes the passed block and raises <code>exception</code> if execution\ntakes more than <code>seconds</code>.\n<p>If <code>seconds</code> is zero …\n"],["to_ary","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-to_ary","()",""],["to_i","WEBrick::HTTPStatus::Status","WEBrick/HTTPStatus/Status.html#method-i-to_i","()",""],["to_s","WEBrick::Cookie","WEBrick/Cookie.html#method-i-to_s","()",""],["to_s","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-to_s","()",""],["to_s","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-i-to_s","()",""],["umount","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-umount","(dir)",""],["unmount","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-unmount","(dir)","<p>Unmounts <code>dir</code>\n"],["virtual_host","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-virtual_host","(server)","<p>Adds <code>server</code> as a virtual host.\n"],["warn","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-warn","(msg)","<p>Shortcut for logging a WARN message\n"],["warn?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-warn-3F","()","<p>Will the logger output WARN messages?\n"]]}}